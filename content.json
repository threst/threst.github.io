{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"threst","url":"https://threst.github.io"},"pages":[{"title":"","date":"2018-05-17T12:42:34.000Z","updated":"2018-05-17T13:03:11.352Z","comments":true,"path":"about/index.html","permalink":"https://threst.github.io/about/index.html","excerpt":"","text":"我是一个悲哀的孩子始终没有长大我从北方的草滩上走出，沿着一条发白的路，走进布满齿轮的城市走进狭小的街巷板棚，每颗低低的心在一片淡漠的烟中继续讲绿色的故事我相信我的听众天空，还有海上迸溅的水滴他们将覆盖我的一切覆盖那无法寻找的坟墓，我知道那时，所有的草和小花都会围拢在灯光暗淡的一瞬轻轻亲吻我的悲哀"}],"posts":[{"title":"61随想","slug":"61随想","date":"2018-06-01T14:13:14.000Z","updated":"2018-06-01T14:58:02.906Z","comments":true,"path":"2018/06/01/61随想/","link":"","permalink":"https://threst.github.io/2018/06/01/61随想/","excerpt":"","text":"今天是国际儿童节,可能每个人心里都住着一个孩子,动态朋友圈都是关于61礼物的,连室友都回长沙陪女朋友了,我就不一样了,买的内存和电脑都到了,装上之后确实不一样了,可以愉快的开虚拟机了!!其实今天还是大四的毕业晚会,想想三年之后就是我们了,现在还是这么菜,每天还是CTAL+V,还是要多看书,又想起高三的生活,转眼一年过去了,根据朋友圈的动态来分析,他们过的都还好,离2018高考也只有6天了,一起加油吧!","categories":[],"tags":[{"name":"瞎记罢写","slug":"瞎记罢写","permalink":"https://threst.github.io/tags/瞎记罢写/"}]},{"title":"常见文件格式分析","slug":"常见文件格式分析","date":"2018-06-01T14:13:14.000Z","updated":"2018-06-01T14:32:07.045Z","comments":true,"path":"2018/06/01/常见文件格式分析/","link":"","permalink":"https://threst.github.io/2018/06/01/常见文件格式分析/","excerpt":"","text":"文件格式概述文件格式实质上是信息的一种特殊的编码方式，计算机在存储信息时，由于信息种类的不同，所采取的文件格式也不同，在windows系统中，计算机通常采用扩展名的方式来区分不同的文件格式，ctf中考察文件格式大致分为4的类： 文本格式：.txt,.doc,.docx 图像格式：.png,.jpg,bmp,.gif 音频格式:.mp3,.wma,.wav 视频格式:.mp4,.rmvb,.avi txt格式txt即英文text的缩写，通常是指windows操作系统自带的一种纯文本文件格式 doc/docx格式doc即document的缩写，docx在doc的基础上加入了xml，通常是指Microsoft Office Word软件创建的文件格式，docx实际上是作为一个zip压缩方式的压缩文件，的哦出现相对doc体积更小，支持的对象更多，同常采用AOPR的工具爆破docx的难度更大 png格式89 50 4e 47 0d 0a 1a属于无损压缩的位图格式，他采用LZ77的派生算法进行压缩，压缩比高，文件体积小，同时不损失颜色和数据，一个png文件可以由一个文件头标志和若干个数据块构成，而数据块有可以分为关键数据块和辅助数据块，每一类数据块又包含若干具体的数据块部分 wiki:https://ctf-wiki.github.io/ctf-wiki/misc/picture/png/ jpeg格式属于有损压缩的与平台无关的图像格式，jpeg的压缩比高(可高达100：1),png主要是块，而jpeg主要是以段的形式wiki:https://ctf-wiki.github.io/ctf-wiki/misc/picture/jpg/ bmp格式是windows的标准图像文件格式，通常情况下采用位映射存储格式，除了图像的深度(可以理解为控制色彩的能力)可选外，不采用任何其他的压缩方式，因此bmp的图像质量非常高，体积也非常大，bmp图像通常可以分为设备相关位图和设备无关位图两大类，一个bmp的文件格式通常由文件头，信息头，颜色信息和位图数据四部分组成文件头:前面两个字节一般42 4D，随后4个字节表示位图大小,再后面4个字节为保留位设置为0,再后面的4个字节非常关键，表示文件头到位图数据的偏移量 gif格式也是一种无损压缩，它存储的不是颜色的本身，而是该点的颜色列表的索引值，其内部分成许多存储快，可以用来存储多副图像或者是决定图像表现行为的控制块，继而实现动图和交互式应用，一个gif图像通常由文件头，gif数据流和文件终结器三个部分组成，目前常见的有87(不支持动图)和89两个版本wiki:https://ctf-wiki.github.io/ctf-wiki/misc/picture/gif/ mp3mp3即MPEG-a Audio Layer-3的简称，根据压缩质量和编码的复杂程度可以大致分为3层，分别对应与mp1,mp2,mp3,这三种有损压缩的声音文件，根据用途的不同，每层采用的编码方式也不同，其编码层次越高，编码器就越复杂，压缩率也高，一个mp3文件大致可以分成TAG_V2,Frame,TAG_V1三部分，其中frame是构成mp3的最小组成单位","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"如何在MIMIKATZ添加模块","slug":"如何在MIMIKATZ添加模块","date":"2018-06-01T09:33:09.000Z","updated":"2018-06-01T14:47:58.943Z","comments":true,"path":"2018/06/01/如何在MIMIKATZ添加模块/","link":"","permalink":"https://threst.github.io/2018/06/01/如何在MIMIKATZ添加模块/","excerpt":"","text":"嗨，大家好 ！我今天要写关于“我怎样才能添加到模块到mimikatz中？”首先，你必须在github中克隆或下载。我使用Visual Studio Community 2015来打开该项目。 在尝试添加新模块之前，我们必须构建mimikatz项目。如果这里失败了，记得在下一次操作之前先修复你的开发环境。我试过了，结果成功了，让我们继续，我们在/ mimikatz / modules中创建自己的模块头和C文件，在这里： /mimikatz/modules/kuhl_m_littlePrince.c /mimikatz/modules/kuhl_m_littlePrince.h 我将讨论在检查项目时使用的一些全局变量。了解它们的用途将有助于我们开发模块。比如全局变量kuhl_m_littlePrince＆ kuhl_m_c_littlePrince。或这些类型的全局变量：KUHL_M和KUHL_M_C。“KUHL_M”表示Kiwi用户级高级模块。KUHL_M是由kuhl_m.h中的“struct _KUHL_M”定义的结构。 123456789typedef struct _KUHL_M &#123; const wchar_t * shortName; const wchar_t * fullName; const wchar_t * description; const unsigned short nbCommands; const KUHL_M_C * commands; const PKUHL_M_C_FUNC_INIT pInit; const PKUHL_M_C_FUNC_INIT pClean;&#125; KUHL_M, *PKUHL_M; 在kuhl_m.h中定义的struct KUHL_M或 * PKUHL_M`，这个结构的参数为： 1.shortName用作模块名称，2.fullName用于列出显示名称3.描述用于描述模块4.nbcommand用于命令的数量。5.命令使用KUL_M_C中定义的模块函数列表6.由于“PKUHL_M_C_FUNC_INIT”定义的名称是指NTSTATUS。pInit和pClean是NTSTATUS的变量类型。 PINIT＆pClean功能不是强制性的，只是为了调用函数之前初始化模块，则当模块被卸载的原型为PINIT＆pClean相同：NTSTATUS kuhl_m_modulename_init/clean() “KUHL_M_C”表示Kiwi用户级高级模块命令。 wchar_t是“无符号短”。PKUHL_M_C_FUNC定义了一个类型为“NTSTATUS”的函数 12345typedef struct _KUHL_M_C &#123; const PKUHL_M_C_FUNC pCommand; const wchar_t * command; const wchar_t * description;&#125; KUHL_M_C, *PKUHL_M_C; 1.pCommand是我们的模块功能2.“command”说我们如何在终端中调用这个模块3.描述是对函数做什么的简要描述NTSTATUS类型在Ntdef.h中定义，系统提供的状态码在Ntstatus.h中定义。NTSTATUS值用于传递系统信息。它们有四种类型：成功值，信息值，警告和错误值 NTSTATUS kuhl_m_modulename_functioname（int argc，wchar_t * argv []）;它可以在NTSTATUS中返回它想要的内容，除了：STATUS_FATAL_APP_EXIT，需要退出mimikatz。 我们在头文件中做了必要的声明并传递给了主文件。 我们用kuhl_m_modulename.h＆kuhl_m_modulename.c创建了我们的模块。最后一步我们需要在mimikatz.h中添加模块，然后在mimikatz.c模块列表中添加全局变量。 模块列表 你现在可以建立mimikatz，然后运行它！ 如果你看到下面这个消息，那么你成功了！ 祝你有美好的一天^^ 本文翻译:https://littlesecurityprince.com/security/2018/03/18/ModuleMimikatz.html","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]},{"title":"实验吧wp(持续更新)","slug":"实验吧wp","date":"2018-05-30T14:13:14.000Z","updated":"2018-06-01T14:29:42.245Z","comments":true,"path":"2018/05/30/实验吧wp/","link":"","permalink":"https://threst.github.io/2018/05/30/实验吧wp/","excerpt":"","text":"密码学疑惑的汉字题目： 现有一段经过加密的密文，内容如下：王夫 井工 夫口 由中人 井中 夫夫 由中大。请找出这段密文隐藏的消息明文。 格式：CTF{ } 解题链接： http://ctf5.shiyanbar.com/423/crypto/1.html 当铺密码:就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几1 2 3 4 5 6 7 8 9由 中 人 工 大 王 夫 井 羊所以王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125CTF{RM} 凯撒和某某加密题目：aZZg/x\\ZbavpZiEZp+n)o+ writeup：这是整个ascii表的凯撒移动，我参照网上提供一个py代码： 1234567891011121314#coding:utf-8import stringdef foo(): s=\"aZZg/x\\ZbavpZiEZp+n)o+\" #ascii码表中可打印的字符 a=string.maketrans('', '')[33:127] for n in xrange(0,26): b=a[n:]+a[:n] table=string.maketrans(a,b) print string.translate(s,table) passif __name__ == '__main__': foo() print 'ok' aZZg/x\\ZbavpZiEZp+n)o+b[[h0y][cbwq[jF[q,op,c\\i1z^\\dcxr\\kG\\r-p+q-d]]j2{_]edys]lH]s.q,r.e^^k3|^fezt^mI^t/r-s/ f__l4}a_gf{u_nJ_u0s.t0 g`m5~bhg|voK`v1t/u1haan6!caih}wapLaw2u0v2ibbo7”dbji~xbqMbx3v1w3jccp8#eckj!ycrNcy4w2x4kddq9$fdlk”zdsOdz5x3y5leer:%geml#{etPe{6y4z6mffs;&amp;hfnm$|fuQf|7z5{7nggt&lt;’igon%}gvRg}8{6|8ohhu=(jhpo&amp;~hwSh~9|7}9piiv&gt;)kiqp’!ixTi!:}8~:qjjw?ljrq(“jyUj”;~9!;rkkx@+mksr)#kzVk#&lt;!:”&lt;sllyA,nlts$l{Wl$=”;#=tmmzB-omut+%m|Xm%&gt;#&lt;$&gt;unn{C.pnvu,&amp;n}Yn&amp;?$=%?voo|D/qowv-‘o~Zo‘@%&gt;&amp;@wpp}E0rpxw.(p![p(A&amp;?’Axqq~F1sqyx/)q”\\q)B‘@(Byrr!G2trzy0r#]rC(A)Czss”H3us{z1+s$^s+D)BDok 注意这一行：f__l4}a_gf{u_nJ_u0s.t0栅栏密码特点就是隔几个字母能读顺成一个单词，一般译为分2个一组具体情况具体分析，就像此题一处特殊单独三个一组。观察敏感得知，反正有奇葩字符肯定不是，看有没有{，}，CTF,flag这种字符得知：f__l4}a_gf{u_nJ_u0s.t0进行解密： f__ =&gt;f _ _l4} =&gt;l 4 }a_ =&gt;a _gf =&gt;g f{u =&gt;{ un =&gt; nJ_ =&gt;J _u0 =&gt;u 0s. =&gt;s .t0 =&gt;t 0 结果就是flag{_Just_4_fun_0.0_} keyboard 题目：提示：和键盘有关解题链接： http://ctf5.shiyanbar.com/360/keyboard.html writeup：打开网页后看到：BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN根据题目提示，我发现这些在键盘上排列出一个英文字母..（这些明显是密室逃脱的套路）BHUK,LP对应N，TGBNHGYT对应B，UYGBN对应C flag:NBNCBNNBNBC 密文 rot1357R9S980RNOS49973S757PQO9S80Q36P （md5不解密）解密网站flag:57E9F980EABF49973F757CDB9F80D36C 他的情书 从前从前,有个人爱你很久很久格式：ctf{}解题链接： http://ctf5.shiyanbar.com/crypto/4f12查看源码 `[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]])()[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()` 控制台解码提示Hint:urlenode再仔细查看源码发现 var Words =&quot;%3Ccenter%3E%0A%0A%3Cp%3E%u4E0D%u96BE%u7684%uFF0C%u8F93%u5165%u5BC6%u7801%u8FA3%21%3C%2fp%3E%0A%0A%3Cscript%20language%3D%22JScript.Encode%22%3E%23@%7E%5EEwAAAA%3D%3DC%5E%2b.D%60rt%2b%5EVKE%23p@%23@%26EwUAAA%3D%3D%5E%23%7E@%0A%0A%3C%21--%0A%09%2f%2f%2a%2a%2a%28%u3065%uFFE3%203%uFFE3%29%u3065%u6211%u8981%u62B1%u62B1%21%21%21%2a%2a%2a%0Aeval%28function%28p%2Ca%2Cc%2Ck%2Ce%2Cd%29%7Be%3Dfunction%28c%29%7Breturn%28c%3Ca%3F%22%22%3Ae%28parseInt%28c%2fa%29%29%29%2b%28%28c%3Dc%25a%29%3E35%3FString.fromCharCode%28c%2b29%29%3Ac.toString%2836%29%29%7D%3Bif%28%21%27%27.replace%28%2f%5E%2f%2CString%29%29%7Bwhile%28c--%29d%5Be%28c%29%5D%3Dk%5Bc%5D%7C%7Ce%28c%29%3Bk%3D%5Bfunction%28e%29%7Breturn%20d%5Be%5D%7D%5D%3Be%3Dfunction%28%29%7Breturn%27%5C%5Cw%2b%27%7D%3Bc%3D1%3B%7D%3Bwhile%28c--%29if%28k%5Bc%5D%29p%3Dp.replace%28new%20RegExp%28%27%5C%5Cb%27%2be%28c%29%2b%27%5C%5Cb%27%2C%27g%27%29%2Ck%5Bc%5D%29%3Breturn%20p%3B%7D%28%27%3C%21--v%20p%28%29%7B6%208%3Dh.o.e.n%3B6%202%3D%22q%3D%3D%22%3B6%20a%3D%5C%27t.s%3Fe%3D%5C%27%3B6%20d%3Dj.r%3B6%20k%3D%5C%27%5C%27%3B6%20g%3D2.9%28m%2C4%2a4%29%2b2.9%28l%2C5%2a5%29%2b2.9%280%2C1%29%2b2.b%287%2C1%29%2b2.b%28z%2C1%29%2b2.b%28B%2C1%29%2b2.9%283%2b3%2C7%29%3B8%3Dd.b%28d.f%28%5C%27%3F%5C%27%29%2b1%29%3Ba%3Da.9%280%2Ca.f%28%5C%27%3F%5C%27%29%2b1%29%2b%5C%27A%3D%5C%27%3Bw%28i%3D0%3Bi%3C8.y%3Bi%2b%2b%29%7Bx%288.c%28i%29%3D%3Dg.c%28i%29%29%7Bh.u%288.c%28i%29%29%7D%7Dj%3Da%2b8%7D--%3E%27%2C38%2C38%2C%27%7C%7Ccry%7C%7C%7C%7Cvar%7C%7Cpass%7Csubstring%7Caddr%7Csubstr%7CcharAt%7Clocatie%7Cpasswd%7CindexOf%7Cpass2%7Cdocument%7C%7Clocation%7Cout%7C24%7C15%7Cvalue%7Cform%7Czhegejiamiyidiandoubuku%7CRm9yM0re354v5E4FUg5FasDboooo%7Chref%7Cphp%7Csoroki%7Cwrite%7Cfunction%7Cfor%7Cif%7CLen%7C11%7Cl0vau%7C13%27.split%28%27%7C%27%29%2C0%2C%7B%7D%29%29%0A--%3E%0A%3C%2fscript%3E%0A%0A%3Cform%20name%3D%22form%22%3E%0APassword%3A%20%3Cinput%20type%3D%22password%22%20name%3D%22passwd%22%3E%20%3Cinput%20type%3D%22button%22%20value%3D%22boom%21%21%21%21%22%20onClick%3D%22zhegejiamiyidiandoubuku%28%29%22%3E%0A%3C%2fform%3E%0A%0A%3C%2fcenter%3E&quot;; urldecode得到123456789101112&lt;center&gt;&lt;p&gt;不难的，输入密码辣!&lt;/p&gt;&lt;script language=\"JScript.Encode\"&gt;#@~^EwAAAA==C^+.D`rt+^VKE#p@#@&amp;EwUAAA==^#~@&lt;!-- //***(づ￣ 3￣)づ我要抱抱!!!***eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?\"\":e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!''.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return'\\\\w+'&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p;&#125;('&lt;!--v p()&#123;6 8=h.o.e.n;6 2=\"q==\";6 a=\\'t.s?e=\\';6 d=j.r;6 k=\\'\\';6 g=2.9(m,4*4)+2.9(l,5*5)+2.9(0,1)+2.b(7,1)+2.b(z,1)+2.b(B,1)+2.9(3+3,7);8=d.b(d.f(\\'?\\')+1);a=a.9(0,a.f(\\'?\\')+1)+\\'A=\\';w(i=0;i&lt;8.y;i++)&#123;x(8.c(i)==g.c(i))&#123;h.u(8.c(i))&#125;&#125;j=a+8&#125;--&gt;',38,38,'||cry||||var||pass|substring|addr|substr|charAt|locatie|passwd|indexOf|pass2|document||location|out|24|15|value|form|zhegejiamiyidiandoubuku|Rm9yM0re354v5E4FUg5FasDboooo|href|php|soroki|write|function|for|if|Len|11|l0vau|13'.split('|'),0,&#123;&#125;))--&gt;&lt;/script&gt;&lt;form name=\"form\"&gt;Password: &lt;input type=\"password\" name=\"passwd\"&gt; &lt;input type=\"button\" value=\"boom!!!!\" onClick=\"zhegejiamiyidiandoubuku()\"&gt;&lt;/form&gt;&lt;/center&gt; 经过网站解密:https://www.sojson.com/jsjiemi.html12345678910111213141516171819202122232425&lt;!--function zhegejiamiyidiandoubuku()&#123; var pass=document.form.passwd.value; var cry=\"Rm9yM0re354v5E4FUg5FasDboooo==\"; var addr='soroki.php?passwd='; var locatie=location.href; var out=''; var pass2=cry.substring(15,4*4)+cry.substring(24,5*5)+cry.substring(0,1)+cry.substr(7,1)+cry.substr(11,1)+cry.substr(13,1)+cry.substring(3+3,7); pass=locatie.substr(locatie.indexOf('?')+1);addr=addr.substring(0,addr.indexOf('?')+1)+'l0vau='; for(i=0;i&lt;pass.Len;i++)&#123; if(pass.charAt(i)==pass2.charAt(i)) &#123; document.write(pass.charAt(i)) &#125; &#125;location=addr+pass &#125;--&gt;``` 将以下代码放置控制台运行```javascript var cry=\"Rm9yM0re354v5E4FUg5FasDboooo==\"; var addr='soroki.php?passwd='; var locatie=location.href; var out=''; var pass2=cry.substring(15,4*4)+cry.substring(24,5*5)+cry.substring(0,1)+cry.substr(7,1)+cry.substr(11,1)+cry.substr(13,1)+cry.substring(3+3,7); pass=locatie.substr(locatie.indexOf('?')+1);addr=addr.substring(0,addr.indexOf('?')+1)+'l0vau='; \"soroki.php?l0vau=\" 得到soroki.php?l0vau= 编写python代码12345678910 #-*- coding:utf-8 -*-import requestscry=\"Rm9yM0re354v5E4FUg5FasDboooo==\"addr='soroki.php?passwd='locatie=\"http://ctf5.shiyanbar.com/crypto/4/\"pass2=cry[15:16]+cry[24:25]+cry[0:1]+cry[7:8]+cry[11:12]+cry[13:14]+cry[6:7]addr=addr[:addr.index('?')+1]+'l0vau='location=locatie+addr+pass2print locationhtml=requests.get(location) 得到http://ctf5.shiyanbar.com/crypto/4/soroki.php?l0vau=FoRevEr得到aW4yIHNheTpJIGxvdmUgeW91IEZvcmV2ZXIhVGhlIEdpcmwgc2F5OiB6cWN7ZmtxdGxfZnBfeWZkX3B5fQ==解密in2 say:I love you Forever!The Girl say: zqc{fkqtl_fp_yfd_py}flag:ctf{intwo_is_big_sb} js小明某天在看js的时候，突然看到了这么一段代码，发现怎么也理不出代码逻辑，你能帮帮他吗？格式：SimCTF{}解题链接： http://ctf5.shiyanbar.com/crypto/2.html 一定要在查看源码中复制代码,把下面eval转换为console.log再放到控制台中运行12345eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?\"\":e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!''.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return'\\\\w+'&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p;&#125;('&lt;1 8=\"7/a\"&gt;9(\\'\\\\6\\\\3\\\\2\\\\5\\\\4\\\\b\\\\i\\\\h\\\\k\\\\j\\\\0\\\\g\\\\d\\\\c\\\\f\\\\0\\\\e\\')&lt;/1&gt;',21,21,'u0065|script|u006d|u0069|u0054|u0043|u0053|text|type|alert|javascript|u0046|u006f|u0063|u007d|u0064|u006e|u006a|u007b|u005f|u0073'.split('|'),0,&#123;&#125;))得到&lt;script type=\"text/javascript\"&gt;alert('\\u0053\\u0069\\u006d\\u0043\\u0054\\u0046\\u007b\\u006a\\u0073\\u005f\\u0065\\u006e\\u0063\\u006f\\u0064\\u0065\\u007d')&lt;/script&gt; 解密：http://tool.chinaz.com/tools/unicode.aspx","categories":[],"tags":[{"name":"writeup ctf","slug":"writeup-ctf","permalink":"https://threst.github.io/tags/writeup-ctf/"}]},{"title":"kali下安装docker","slug":"kali安装docker","date":"2018-05-29T12:33:09.000Z","updated":"2018-05-30T14:35:17.620Z","comments":true,"path":"2018/05/29/kali安装docker/","link":"","permalink":"https://threst.github.io/2018/05/29/kali安装docker/","excerpt":"","text":"周末水了下suctf，只做出签到题，太菜了，今天在安全客上面梅子酒师傅发出了wp，看了之后觉得质量非常高，最重要的是可以在docker上复现，发现现在kali上面并没有安装docker，之前在知乎上面写过一篇关于如何安装docker的文章，于是晚上试了下，尴尬的是失败了！！google了下，喜获一个一键安装脚本，看了下大佬脚本发现可能是apt-get install docker-ce这个的问题，因为之前一直是apt-cache policy docker-engine 之前的安装方式由于kali linux是基于Debian Wheezy，所以这里docker需要的内核版本至少是3.10，因此需要检查下kali的内核，如果不够的话，需要更新内核uname -a切换用户root下 1.创建/etc/apt/sources.list.d/backports.listleafpad /etc/apt/sources.list.d/backports.list 2.在list文件里加上一条反向端口条目deb http://http.debian.net/debian wheezy-backports main 3.更新软件包apt update 4.如果以前安装过docker就这样删除所有旧版本docker apt-get purge lxc-docker* apt-get purge docker.io* 可能没有旧版本（之前没有安装过）没有的继续 5.确认apt添加了https方法和CA cerificatesapt-get install apt-transport-https ca-certificates gnupg2 6.添加一个新的GPG keyapt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D 7.安装repositoryapt-cache policy docker-engine这个命令可以查看是否存在资源之后再apt-get install docker-engine但是这个好像不行了要执行下列命令apt-get install docker-ce 一键安装脚本#!/bin/bash # install dependencies sudo apt-get install apt-transport-https ca-certificates curl gnupg software-properties-common dirmngr # use https get sources sudo echo &quot;deb https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt; /etc/apt/sources.list sudo echo &quot;deb-src https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list # update apt-get export DEBIAN_FRONTEND=&quot;noninteractive&quot; sudo apt-get update # remove previously installed Docker sudo apt-get purge lxc-docker* sudo apt-get purge docker.io* # add Docker repo gpg key curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - # add deb docker sources sudo echo &quot;deb [arch=amd64] https://download.docker.com/linux/debian stretch stable&quot; &gt;&gt; /etc/apt/sources.list cat &gt; /etc/apt/sources.list.d/docker.list &lt;&lt;&apos;EOF&apos; deb https://apt.dockerproject.org/repo debian-stretch main EOF sudo apt-get update # install Docker sudo apt-get install docker-ce # run Hellow World image sudo docker run hello-world # manage Docker as a non-root user sudo groupadd docker sudo usermod -aG docker $USER # configure Docker to start on boot sudo systemctl enable docker 脚本地址 测试:root@kali:/home/threst# docker run hello-world出现下面这个就是安装成功了 Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 使用国内镜像:docker pull registry.docker-cn.com/myname/myrepo:mytag例如docker pull registry.docker-cn.com/suctf/2018-web-annonymous","categories":[],"tags":[{"name":"kali docker","slug":"kali-docker","permalink":"https://threst.github.io/tags/kali-docker/"}]},{"title":"你肯定不知道的GraphQL安全概述和测试技巧","slug":"你肯定不知道的GraphQL安全概述和测试技巧","date":"2018-05-22T09:33:09.000Z","updated":"2018-05-22T14:32:49.122Z","comments":true,"path":"2018/05/22/你肯定不知道的GraphQL安全概述和测试技巧/","link":"","permalink":"https://threst.github.io/2018/05/22/你肯定不知道的GraphQL安全概述和测试技巧/","excerpt":"","text":"写在前面的话随着GraphQL技术的日益普及，我们总结了一些关于常见安全错误的文档和提示。 什么是GraphQL？GraphQL是由Facebook开发并于2015年公开发布的数据查询语言。它是REST API的替代品。 即使你没有看到任何GraphQL在那里，很可能你已经在使用它，因为它是在一些大的科技巨头，Facebook, GitHub, Pinterest, Twitter, HackerOne更多。 这项技术的几个关键点1.GraphQL提供了API中数据的完整和可理解的描述，并使客户能够精确地询问他们需要什么。返回可预测的结果。2.典型的RESTAPI需要从多个URL进行加载，但GraphQLAPI可以在单个请求中获取应用程序所需的所有数据。3.GraphQL api是按照类型和字段而不是端点来组织的,您可以从单个端点访问所有数据的全部功能。4.GraphQL是强类型的，以确保应用程序只询问可能的情况并提供明确而有用的错误。5.新的字段和类型可以添加到GraphQL API，而不会影响现有的查询。老化的字段可以被弃用，并且隐藏在工具中。 在开始深入研究GraphQL安全领域之前，下面简要回顾它的工作原理。该官方文档写得很好，是真正有用的。 一个GraphQL查询如下所示：基本的GraphQL查询 query{ user{ id email firstName lastName } } 尽管响应是JSON：基本的GraphQL响应 { &quot;data&quot;: { &quot;user&quot;: { &quot;id&quot;: &quot;1&quot;, &quot;email&quot;: &quot;paolo@doyensec.com&quot;, &quot;firstName&quot;: &quot;Paolo&quot;, &quot;lastName&quot;: &quot;Stagno&quot; } } } 安全测试技巧由于Burp Suite不太了解GraphQL语法，因此我建议使用graphql-ide，这是一个基于Electron的应用程序，允许您编辑和发送请求至GraphQL端点; 我还编写了一个小python脚本GraphQL_Introspection.py，它列举了一个GraphQL端点（带有内省），以便提取文档。该脚本对于检查GraphQL模式寻找信息泄露，隐藏数据和不可访问的字段非常有用。 该工具将生成类似于以下内容的HTML报告： 内省是用来要求一个GraphQL模式来获取关于它所支持的查询、类型等信息的信息。 作为一个渗透测试人员，我建议你去寻找发给“/ graphql”或“/graphql.php”的请求，因为这些是通常的GraphQL端点名称; 您还应搜索“/ graphiql”，“graphql / console /”，联机GraphQL IDE与后端交互，以及“/graphql.php?debug=1”（带有附加错误报告的调试模式），因为它们可能会被留下由开发人员开放。 在测试应用程序时，验证是否可以在没有通常授权令牌标头的情况下发出请求： 由于GraphQL框架没有提供任何保护数据的手段，因此开发人员因按照文档中的说明实施访问控制： “但是，对于生产代码库，将授权逻辑委托给业务逻辑层”。 任何事情都可能会出错，因此没有正确认证和或授权的用户是否可以从服务器请求整个底层数据库非常重要。当使用GraphQL构建应用程序时，开发人员必须将数据映射到他们选择的数据库技术中的查询。这是易于引入安全漏洞的原因，导致 破坏访问控制，不安全的直接对象引用甚至SQL / NoSQL注入。 作为破坏实现的一个示例，以下请求 / 响应表明我们可以为平台的任何用户（通过ID参数循环访存）获取数据，同时转储密码哈希值： 询问 query{ user(id: 165274){ id email firstName lastName password } } 响应 { &quot;data&quot;: { &quot;user&quot;: { &quot;id&quot;: &quot;165274&quot;, &quot;email&quot;: &quot;johndoe@mail.com&quot;, &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Doe&quot; &quot;password&quot;: &quot;5F4DCC3B5AA765D61D8327DEB882CF99&quot; } } } 您需要检查的另一件事与尝试执行非法查询时的信息泄露有关：信息披露 { &quot;errors&quot;: [ { &quot;message&quot;: &quot;Invalid ID.&quot;, &quot;locations&quot;: [ { &quot;line&quot;: 2, &quot;column&quot;: 12 } &quot;Stack&quot;: &quot;Error: invalid ID\\n at (/var/www/examples/04-bank/graphql.php)\\n&quot; ] } ] } 虽然GraphQL是强类型的，但SQL / NoSQL注入仍然是可能的，因为GraphQL只是客户端应用程序和数据库之间的一个层。问题可能存在于为了查询数据库而从GraphQL查询中获取变量的层中，未正确清理的变量导致旧的简单SQL注入。在Mongodb的情况下，NoSQL注入可能并不那么简单，因为我们不能”juggle”类型（例如将字符串转换为数组，请参阅PHP MongoDB注入）。 GraphQL SQL注入 mutation search($filters Filters!){ authors(filter: $filters) viewer{ id email firstName lastName } } { &quot;filters&quot;:{ &quot;username&quot;:&quot;paolo&apos; or 1=1--&quot; &quot;minstories&quot;:0 } } 谨防嵌套查询！它们可以允许恶意客户端通过过度复杂的查询来执行DoS（拒绝服务）攻击，这些查询会占用服务器的所有资源： 嵌套查询 query { stories{ title body comments{ comment author{ comments{ author{ comments{ comment author{ comments{ comment author{ comments{ comment author{ name } } } } } } } } } } } } 可能设置超时，最大深度或查询复杂度阈值来针对DoS进行简单补救请记住，在PHP GraphQL实现中：复杂性分析默认是禁用的限制查询深度默认情况下处于禁用状态自省是默认启用的。这意味着任何人都可以通过发送包含元字段类型和模式的特殊查询来完整描述您的模式 结尾GraphQL是一项新的有趣的技术，可用于构建安全的应用程序。由于开发人员负责实施访问控制，因此应用程序很容易出现经典的Web应用程序漏洞，如Broken Access Controls，不安全的直接对象引用，跨站点脚本（XSS）和经典注入漏洞。就像任何技术一样，基于GraphQL的应用程序可能会像这个实际例子那样容易出现开发实现错误： “通过使用脚本，整个国家（我用美国，英国和加拿大测试过的）可能的号码组合都可以通过这些URL运行，并且如果一个号码与Facebook帐户相关联，则它可以与名称和更多细节（图像等）。“ 参考:https://en.wikipedia.org/wiki/GraphQLhttps://dev-blog.apollodata.com/the-concepts-of-graphql-bc68bd819be3https://graphql.org/learn/https://www.howtographql.com/https://www.hackerone.com/blog/the-30-thousand-dollar-gem-part-1https://hackerone.com/reports/291531https://labs.detectify.com/2018/03/14/graphql-abuse/https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbebhttp://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/https://webonyx.github.io/graphql-php/ 本文翻译:https://blog.doyensec.com/2018/05/17/graphql-security-overview.html","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]},{"title":"git一条龙(一看就会的那种)","slug":"git一条龙(一看就会的那种)","date":"2018-05-17T12:33:09.000Z","updated":"2018-05-17T12:51:32.325Z","comments":true,"path":"2018/05/17/git一条龙(一看就会的那种)/","link":"","permalink":"https://threst.github.io/2018/05/17/git一条龙(一看就会的那种)/","excerpt":"","text":"0x00安装gitlinux一般自带，windows访问以下链接https://git-scm.com/downloads然后去github上去注册一个帐号 0x01创建版本库1.新建文件夹随便新建一个文件夹 2.将目录变成Git可以管理的仓库初始化一个Git仓库,鼠标右键打开git bash，输入以下命令git init 3.添加文件到git仓库首先随便你写个要添加至git仓库的文件 第一步，使用命令`git add 随便什么文件名`，注意，可反复多次使用，添加多个文件； 第二步，使用命令`git commit`，完成。 添加远程库添加ssh在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：ssh-keygen -t rsa -C &quot;youremail@example.com&quot;如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人 登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容： 关联一个远程库git remote add origin git@github.com:你github账户名/刚才创的项目名.git 关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 具体如何操作？添加文件到git仓库首先随便你写个要添加至git仓库的文件 第一步，使用命令git add 随便什么文件名，注意，可反复多次使用，添加多个文件；第二步，使用命令git commit，完成。第三步，使用命令git push -u origin master推送到分支中在第三步之前，可以git checkout -b xxx创建xxx分支为你所用 其他命令git checkout -b xxx：新建xxx分支 git checkout命令加上-b参数表示创建并切换，相当于以下两条命令： git branch xxx git checkout xxx` git branch：查看处于那个分支git checkout master：切换master分支git merge xxx：将xxx分支合并master分支,git merge命令用于合并指定分支到当前分支。git branch -d xxx：删除xxx分支要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；关联后，使用命令git push -u origin xxx第一次推送master分支的所有内容；此后，每次本地提交后，只要有必要，就可以使用命令git push origin xxx推送最新修改； https://backlog.com/git-tutorial/cn/http://www.runoob.com/git/git-tutorial.htmlhttps://github.com/xirong/my-git/blob/master/ixirong.com.mdhttp://www.nafnafa.com/archives/33","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://threst.github.io/tags/git/"}]},{"title":"isccwp","slug":"isccwp","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-21T14:22:38.738Z","comments":true,"path":"2018/05/12/isccwp/","link":"","permalink":"https://threst.github.io/2018/05/12/isccwp/","excerpt":"","text":"iscchashdump长度碰撞&lt;?php include &quot;secret.php&quot;;` @$username=(string)$_POST[&apos;username&apos;]; function enc($text){ global $key; return md5($key.$text); } if(enc($username) === $_COOKIE[&apos;verify&apos;]){ if(is_numeric(strpos($username, &quot;admin&quot;))){ die($flag); } else{ die(&quot;you are not admin&quot;); } } else{ setcookie(&quot;verify&quot;, enc(&quot;guest&quot;), time()+60*60*24*7); setcookie(&quot;len&quot;, strlen($key), time()+60*60*24*7); } show_source(__FILE__); 要要注意这个$key的长度根据返回包的len参数为46,所以hashdump长度输入46,在本地测试可以把inlcude这行删掉，自己定义$key,$flag 逆向第一题[原题wp]：(https://blog.csdn.net/xiangshangbashaonian/article/details/79575062) openssl rsa -pubin -text -modulus -in warmup -in public.key Public-Key: (256 bit) Modulus: 00:d9:9e:95:22:96:a6:d9:60:df:c2:50:4a:ba:54: 5b:94:42:d6:0a:7b:9e:93:0a:ff:45:1c:78:ec:55: d5:55:eb Exponent: 65537 (0x10001) Modulus=D99E952296A6D960DFC2504ABA545B9442D60A7B9E930AFF451C78EC55D555EB writing RSA key -----BEGIN PUBLIC KEY----- MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhANmelSKWptlg38JQSrpUW5RC1gp7npMK /0UceOxV1VXrAgMBAAE= -----END PUBLIC KEY-----` python一下 a = 0xd99e952296a6d960dfc2504aba545b9442d60a7b9e930aff451c78ec55d555eb print a = 98432079271513130981267919056149161631892822707167177858831841699521774310891L 放到这个[网站]上面试试分解(http://factordb.com/index.php)最终代码: #coding:utf-8 import gmpy import rsa p = 302825536744096741518546212761194311477 q = 325045504186436346209877301320131277983 n = 98432079271513130981267919056149161631892822707167177858831841699521774310891 e = 65537 d = int(gmpy.invert(e , (p-1) * (q-1))) privatekey = rsa.PrivateKey(n , e , d , p , q) #根据已知参数，计算私钥 with open(&quot;encrypted.message1&quot; , &quot;rb&quot;) as f: print(rsa.decrypt(f.read(), privatekey).decode()) #使用私钥对密文进行解密，并打印 with open(&quot;encrypted.message2&quot; , &quot;rb&quot;) as f: print(rsa.decrypt(f.read(), privatekey).decode()) #使用私钥对密文进行解密，并打印 with open(&quot;encrypted.message3&quot; , &quot;rb&quot;) as f: print(rsa.decrypt(f.read(), privatekey).decode()) #使用私钥对密文进行解密，并打印 iscc cbc翻转攻击打开网页查看注释提示tips:index.txt打开index.txt看到源码，审计一波 &lt;?php include &apos;sqlwaf.php&apos;; define(&quot;SECRET_KEY&quot;, &quot;................&quot;); define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;); session_start(); function get_random_iv(){ $iv=&apos;&apos;; for($i=0;$i&lt;16;$i++){ $iv.=chr(rand(1,255)); } return $iv; } function login($info){ $iv=get_random_iv(); $plain = serialize($info); $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv); $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;]; setcookie(&quot;iv&quot;, base64_encode($iv)); setcookie(&quot;cipher&quot;, base64_encode($cipher)); } function show_homepage(){ if ($_SESSION[&quot;username&quot;]===&apos;admin&apos;){ echo &apos;&lt;p&gt;Hello admin&lt;/p&gt;&apos;; echo &apos;&lt;p&gt;Flag is ****&lt;/p&gt;&apos;; }else{ echo &apos;&lt;p&gt;hello &apos;.$_SESSION[&apos;username&apos;].&apos;&lt;/p&gt;&apos;; echo &apos;&lt;p&gt;Only admin can see flag&lt;/p&gt;&apos;; } echo &apos;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&apos;; die(); } function check_login(){ if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;])){ $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]); $iv = base64_decode($_COOKIE[&quot;iv&quot;]); if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)){ $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;); $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;]; }else{ die(&quot;ERROR!&quot;); } } } if (isset($_POST[&apos;username&apos;])&amp;&amp;isset($_POST[&apos;password&apos;])) { $username=waf((string)$_POST[&apos;username&apos;]); $password=waf((string)$_POST[&apos;password&apos;]); if($username === &apos;admin&apos;){ exit(&apos;&lt;p&gt;You are not real admin!&lt;/p&gt;&apos;); }else{ $info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password); login($info); show_homepage(); } } else{ if(isset($_SESSION[&quot;username&quot;])){ check_login(); show_homepage(); } } ?&gt; 开始我们尝试直接username=admin，password=admin结果输出You are not real admin! 因为这行代码判断username不能为admin if($username === ‘admin’){ exit(‘You are not real admin!‘);此题与这题相似存在index.php.swp，vim -r index.php.swp继续iscc首先发送xdmin，12345，在返回包里存在iv，cipher参数 import base64 import requests import urllib iv_raw=&apos;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&apos; #这里填写第一次返回的iv值 cipher_raw=&apos;8WdhbPxjZy9xYAgoCeghiOUQu0ri1Y3dv7cX44MbvOfIC6zZxCbR%2FPFpeMatL5qIgT%2BYA66tIdCBpxtWsWxV9Q%3D%3D&apos; #这里填写第一次返回的cipher值 print &quot;[*]原始iv和cipher&quot; print &quot;iv_raw: &quot; + iv_raw print &quot;cipher_raw: &quot; + cipher_raw print &quot;[*]对cipher解码，进行反转&quot; cipher = base64.b64decode(urllib.unquote(cipher_raw)) #a:2:{s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;12345&quot;} #s:2:{s:8:&quot;userna #me&quot;;s:5:&quot;zdmin&quot;; #s:8:&quot;password&quot;;s #:3:&quot;12345&quot;;} xor_cipher = cipher[0:9] + chr(ord(cipher[9]) ^ ord(&apos;m&apos;) ^ ord(&apos;a&apos;)) + cipher[10:] #请根据你的输入自行更改，原理看上面的介绍 xor_cipher=urllib.quote(base64.b64encode(xor_cipher)) print &quot;反转后的cipher：&quot; + xor_cipherost 包中的cookie中添加iv，cipher，iv的参数用放回包中的，cipher使用反转后的cipher，再发包可以看见返回包中有串base64_decode() import base64 import urllib cipher = &apos;Bc6oENSSAEPpPdv/rbqRZG1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6IjEyMzQ1Ijt9&apos;#填写提交后所得的无法反序列化密文 iv = &apos;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&apos;#一开始提交的iv #cipher = urllib.unquote(cipher) cipher = base64.b64decode(cipher) iv = base64.b64decode(urllib.unquote(iv)) newIv = &apos;&apos; right = &apos;a:2:{s:8:&quot;userna&apos;#被损坏前正确的明文 for i in range(16): newIv += chr(ord(right[i])^ord(iv[i])^ord(cipher[i])) #这一步相当于把原来iv中不匹配的部分修改过来 print urllib.quote(base64.b64encode(newIv)) 解密这串base64,加到iv参数中，再post，出flag","categories":[],"tags":[{"name":"writeup","slug":"writeup","permalink":"https://threst.github.io/tags/writeup/"}]},{"title":"艰难的hexo上线","slug":"艰难的hexo上线","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-17T13:08:05.146Z","comments":true,"path":"2018/05/12/艰难的hexo上线/","link":"","permalink":"https://threst.github.io/2018/05/12/艰难的hexo上线/","excerpt":"","text":"我就是那个触发了这一切的错漏。漏洞不仅仅是个错误，这还说明有更大的问题。思想上的纰漏，说明了你是个怎么样的人。永远不给他们看我的源代码，只有这样才能保护我自己。封闭自己，创造出冰冷而完美的迷宫，没人能找到我。从现在开始，过一种没有漏洞的生活，不惜一切地保护我的完美迷宫。 《Mr Robot》S01 《黑客军团》第1季 写在前面的话之前一直想搭个博客记录一下学习,也算是监督,办域名弄空间太麻烦了,于是打算就是使用github+hexo搭个静态的. kali下的尝试在网上搜了下全是关于windows和mac下的,并没有linux下的,更别说kali,要搭hexo首先要以下条件:1.nodejs2.git3.hexo开始发现kali自带nodejs,大喜!但是喜不过三秒,npm命令找不到,各种尝试,个个失败:(突然发现可以重装node,于是卸载node,然后又在弄npm和node的链接,npm install -g cnpm --registry=https://registry.npm.taobao.orgnpm install hexo-cli -gcd /node-v4.9.1-linux-x64/lib/node_modules/hexo-cli/bin./hexo -v终于有hexo了hexo -init提示not empty, please run hexo init on an empty folder and then copy your files into itsudo ln -s /home/threst/node-v4.9.1-linux-x64/lib/node_modules/hexo-cli/bin /hexo /usr/local/bin/hexomkdir hexocd hexohexo init创建好了，可是使用npm install没有回显提示hexo失败!!!! win7尝试因为去装了个移动硬盘原来那个kali系统不用了,所以要重新安装虚拟机,这里又是个坑,虚拟机各种报错,后来发现没有apt upgrade 正式安装1.下载git,nodejs2.github创建gitpage项目3.npm install hexo -g4.hexo -v检查是否安装成功5.新建hexo文件夹,进入hexo init安装hexo6.npm install7.在hexo文件夹中右键,git bash8.git config --global user.name &quot;threst&quot; git config --global user.email &quot;qq.com&quot;9.ssh-keygen -t rsa -C &quot;qq.com&quot;10.在github中添加ssh key,输入id_rsa.pub11.ssh -T git@github.com The authenticity of host ‘github.com (13.250.177.223)’ can’t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘github.com,13.250.177.223’ (RSA) to the list of known hosts.Hi threst! You’ve successfully authenticated, but GitHub does not provide shell access. ssh可以连接这里又是个坑,hexo d的时候总是传不到github上去,只有本地有,问了些大佬,都没这种问题,后来发现repo有两种方式,只有这种可以,之前试的是https://threst/threst.github.io.gitdeploy: type: git repo: git@github.com:threst/threst.github.io.git branch: master13.提示ERROR Deployer not found: gitnpm install hexo-deployer-git --save14.hexo clean hexo g hexo d测试0k 安装主题在hexo文件夹中打开gitbashnpm install hexo-generator-json-content --save &amp;&amp; git clone https://github.com/fi3ework/hexo-theme-archer.git themes/archer在_config.yml中设置theme: archer 最后的坑1.主题中_config的图片不用加引号2.favion我没有写所以在_config中把那行直接去掉,而不是不填这两点都可导致页面打开404或空白(重装5遍)","categories":[],"tags":[]},{"title":"逆向入门--ARM64的linux","slug":"逆向工程入门— ARM64上的Linux","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-13T14:31:40.124Z","comments":true,"path":"2018/05/12/逆向工程入门— ARM64上的Linux/","link":"","permalink":"https://threst.github.io/2018/05/12/逆向工程入门— ARM64上的Linux/","excerpt":"","text":"序幕正如您知道的那样，ARM为我们周围的各种低功耗设备供电，包括但不限于电话，路由器，物联网设备等。因此，深入研究这种体系结构并理解它与x86和x64体系结构有何不同之处是合理的。对于这篇文章，我们将重点介绍目前最常用的64位ARM CPU。我们的设备包括ARM Cortex-A53 CPU的Ubuntu 16.04，它支持32位和64位指令集。 在之前的文章中，我们逆向了x64Linux和Windows中的C++二进制文件。在这篇文章中，我们将会使用同样的程序，但用c语言重写。 编译程序：$ gcc crack_me.c -o crack_me ####二进制信息： 反编译现在让我们用启动GDB二进制并开始分析。请注意，我使用GEF（https://github.com/hugsy/gef）和GDB，所以我的提示符看起来像gef&gt;而不是gdb&gt;。我们先分解一下主要功能。 $ gdb ./crack_me gef&gt; disas main 我们的注意力直接转向&lt;main + 64&gt;处的&lt;check_pass&gt;函数，但在之前，您可能需要花点时间并理解这些指令的含义。您可以在ARM的文档（https://developer.arm.com/docs/100069/latest/a64-general-instructions）上阅读更多关于这些内容的信息。以下是对我们的分析很重要的一些说明。 b -分支到标签，类似于jmp语句bl -分支到链接到标签，类似于调用语句b.ne -分支到标签，如果不相等，类似于jne语句b.eq -分支到标签，如果相等，类似于je声明 让我们深入汇编代码。编号是指在gdb反汇编输出中突出显示的部分。 1.在地址0x4007bc， &lt;main+4&gt;，堆栈指针（SP）寄存器是MOV “ED寄存器X29。然后我们注意到从x29寄存器访问的主要函数参数。请注意，x29寄存器的偏移量28包含argc，而偏移量16包含argv（这是我们的输入密码）。在比较argc值时，如果它等于0x2，我们将（b.eq – branch if equal)分支到&lt;main + 52&gt;。2.接下来的三行&lt;main + 52&gt;，&lt;main + 56&gt;和&lt;main + 60&gt;将argv字符串的大小从16扩展到24（16 + 0x8 = 24），并由x0寄存器引用。3.然后我们调用（bl – branch with link）到&lt;check_pass&gt;函数。 我们来拆开&lt;check_pass&gt;函数。 gef&gt; disas check_pass 4.在地址 0x400738,&lt;check_pass+8&gt;，新的argv字符串从x0寄存器复制到x29寄存器。偏移量为24。然后，我们看到一些堆栈的canary操作，从&lt;check_pass+12&gt;到&lt;check_pass+24&gt;，有一些被储存在x29寄存器中，地址是0x411048，然后在函数的末尾，从&lt;check_pass + 96&gt;开始，直到&lt;check_pass + 124&gt;。5.回到&lt;check_pass&gt;函数的主体，我们看到从&lt;check_pass + 32&gt;开始，有些东西被访问从0x4008d0，并被储存到x29寄存器中，有偏移0x28(40)，可能是秘密密码?6.然后从&lt;check_pass + 60&gt;开始，x1寄存器指向从0x4008d0和x0寄存器中新复制的数据到x29寄存器中的argv字符串，偏移量为24，然后调用strcmp (x0 &amp; x1)函数。strcmp函数的返回值存储在16位通用w0寄存器中。如果字符串相等，则w0设置为0x0，否则设置为0x1。 回到&lt;main&gt;功能… 7.&lt;check_pass&gt;函数的返回值存储在w0寄存器中，该值被复制到偏移量为44的x29寄存器中。然后在&lt;main + 76&gt;处比较w0寄存器的值以查看它是否等于0x1。如果不是，我们跳转（b.ne – branch if not equal)到&lt;main + 100&gt;，这将导致我们获得成功消息，最后退出程序。现在我们将用错误的密码启动该程序。但在此之前，我们必须在&lt;main + 76&gt;的比较语句中添加断点。 gef&gt; break *0x400804 gef&gt; run pass123 我们在0x400804，&lt;main+76&gt;的比较语句中击中了断点另外，请注意x0寄存器的值是0x1。因为，x0指针只是w0寄存器+ 32位额外位，x0包含&lt;check_pass&gt;函数的返回值。从源代码中，我们知道程序将检查check_pass函数的返回值是否为1，以显示“错误密码”消息。因此，该值应该是除了0x1之外的任何值，以便程序向我们显示成功消息。 让我们改变它的价值… gef&gt; set $x0=0x0 现在让我们继续执行。 gef&gt; continue 结语原来我们的假设是正确的。将x0的值从0x1更改为0x0的技巧。这意味着它会一直检查w0是否设置为0x1来显示不正确的消息，我们从程序的源代码中知道这一点。因此，回到&lt;check_pass&gt;函数，我们注意到从地址0x4008d0复制了一些东西。我们来检查一下。 这看起来不像任何有效的汇编指令，但53的重复是可疑的，41也是十六进制的&#39;A‘。这绝对看起来像一个常量字符串。让我们看看更深。从我们的地址0x4008d0转储10多行… 查看0x4008d0和0x4008d4，我们可以看出它是little-endian 8位字符串。让我们尝试解码它… 这里我们有原始密码“ PASSWORD ”。 这只是使用gdb分析二进制文件在不同的体系结构中的一个例子。展望未来，我们将处理更复杂的程序，不常见的架构和更奇怪的二进制文件。原文地址：https://scriptdotsh.com/index.php/2018/04/26/ground-zero-part-3-reverse-engineering-basics-linux-on-arm64/","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]},{"title":"逆向入门--linux64","slug":"逆向工程基础 - Linux x64","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-13T14:27:12.061Z","comments":true,"path":"2018/05/12/逆向工程基础 - Linux x64/","link":"","permalink":"https://threst.github.io/2018/05/12/逆向工程基础 - Linux x64/","excerpt":"","text":"序幕这个Ground Zero系列适合初学者入门使用，让他们进入逆向工程领域。因为这是x64的时代，所以我跳过了x86体系结构。但是你要知道，所有将用c++编写的示例也可以编译为x86，但是我将把它作为作业留给你们。如果你没有任何经验，也无所谓了。你唯一需要的就是有对编程语言的基本理解。开始时，我们将编写一个简单的c++程序，它将提示用户输入密码。它将检查密码是否匹配，如果它正确，它将提示正确，否则将提示错误。我举这个例子的主要原因是，这个例子将让你了解jump，以及其他类似的条件在汇编语言中是如何工作的。另一个原因是，大多数具有硬编码键的程序都可以用类似的方式破解，只不过需要更多的数学知识，而这正是大多数盗版分销商如何破解合法软件并传播密钥的方式。让我们先了解一下我们编写的c++程序。所有的代码都将托管在我的Github页面中：https://github.com/paranoidninja/ScriptDotSh-Reverse-Engineering 这里的代码非常简单。我们的程序将一个参数作为密码输入，如果我不输入任何密码，它将打印help命令。如果我指定了一个密码，它会以10个字节的字符形式存储，并将密码发送到check_pass()函数。我们的硬编码密码是check_pass()函数中的PASSWORD1。在这里，我们的密码与strcmp90函数的实际密码变量mypass进行比较。如果密码匹配，则返回零，否则返回1。返回到我们的主功能，如果我们接收到1，它会打印错误的密码，否则会打印正确的密码。 现在，让我们在GDB调试器中找到这个代码。用GDB执行二进制文件，将首先在main中设置一个断点，然后再发送参数。其次，我们会让enable time在我们的GDB上运行，所以如果我们走错了一步，我们可以逆转这一步。这可以通过以下命令完成：target record-full和reverse-stepi / nexti 如果你不明白这一点，问题不大。你只需关注gdb $部分，就像你上面看到的那样，在给断点使用break main之后，我输了一个错误的密码pass123。我的编译过的代码应该如前所述打印一个不正确的密码，但是随着我们继续，我们会找到两种方法来绕过代码; 一种是通过从内存中取出实际密码，二是通过修改跳转值并打印密码正确。 反汇编下一步是反汇编整个代码，看看到底发生了什么： 我们在整个反汇编代码中的主要关注以下几点： 1.je - je表示如果相等就跳转到某个地址，如果不相等，继续下一步。2.call-调用一个新的函数。请记住，在加载完成后，反汇编代码将从主反汇编函数更改为新函数的反汇编代码。 test - 检查两个值是否相等 cmp- 比较两个值 JNE - 如果它不等于某物，jne就意味着跳转。否则，继续下一步。 有些人可能会问，既然我们有cmp，我们为什么要进行test呢?答案可以在这里找到，解释得很漂亮:https://stackoverflow.com/questions/39556649/linux-assembly-whats-difference-between-test-eax-eax-and-cmp-eax-0 所以，如果我们看到上面的反汇编代码，我们知道如果我们运行没有密码或参数的二进制文件，它将打印帮助，否则将继续检查密码。所以这个cmp应该是检查我们是否有参数的部分。如果一个参数不存在，它将继续打印帮助，否则它将跳转到&lt;main + 70&gt;。如果你在左边的地址旁边看到那些数字，我们可以看到在&lt;+70&gt;处，我们正在将某些东西移动到rax寄存器中。所以，我们要做的是我们将在je上设置一个断点，方法是指定它的地址0x0000000000400972，然后看看它是跳转到&lt;+70&gt;通过要求它继续c。GDB命令c将继续运行二进制文件，直到遇到另一个断点。 而现在，如果您执行的是step迭代的stepi，它将执行一次迭代执行，并且它应该将您带到&lt;+70&gt;它将Quad Word移入rax寄存器的位置。 我们的逻辑到现在为止都是正确的，现在我们来看下一个有趣的东西，也就是调用部分。如果你看到它旁边，它上面写着类似于&lt;_Z10check_passPc&gt;，它就是我们的check_pass()函数。让我们跳到使用stepi，看看函数里面是什么。一旦你跳到check_pass()函数并反汇编它，你会看到一组新的反汇编代码，它就是check_pass()函数本身的代码。这里有四行有趣的代码： 第一部分是将rdx寄存器的值移至rsi并将rax移至rdi。下一部分是调用strcmp()函数，它是C ++的字符串比较函数。接下来，我们有测试这两个值进行比较，如果这两个值相等，我们跳（JE）到&lt;_Z10check_passPc + 77&gt;将0移动到EAX寄存器。如果值不相等，函数将继续在&lt;+70&gt;处继续并在eax寄存器赋值1。现在，这些只不过是我们先前在check_pass()函数中指定的返回值。由于我们输入了无效密码，将发送的返回值为1。但是如果我们可以将返回值修改为零，那么它将输出为“正确的密码”。 另外，我们可以继续检查被移动到rsi和rdi寄存器中的内容。所以，让我们在那里放置一个断点并直接跳到它。 从上图可以看出，我使用了x / s $ rdx和x / s $ rax命令从寄存器中获取值。x / s表示检查寄存器并将其显示为一个字符串。如果你想以字节为单位获得它，你可以指定x / b，或者如果你想要字符，你可以指定x / c等等。然而，有多种变化。现在我们获取密码的第一部分已经在这里了。但是，让我们看看我们如何将&lt;_Z10check_passPc + 70&gt;处的返回值修改为零。所以，我们会拍摄stepi并跳到这个迭代。 结语正如您在上面看到的，函数在二进制中将0x1移到eax，但是在它可以做一个je之前，我们使用set $eax = 0x0将值修改为0x0，然后继续使用c作为下面的函数，瞧!!!我们有一个返回的值作为正确的密码! 这只是一个简单的例子，让您开始逆向工程。随着我们深入，我们将看到套接字函数，运行时加密，编码隐藏的域名等等。这整个过程可以在Windows中使用Olly调试器完成，我将在下一篇博文中展示。 原文地址:https://scriptdotsh.com/index.php/2018/04/09/ground-zero-part-1-reverse-engineering-basics/","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]}]}